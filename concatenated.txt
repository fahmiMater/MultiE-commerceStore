
/* ---- File: src/main/java/com/ecommerce/multistore/analytics/application/dto/ProductStatsResponse.java ---- */

package com.ecommerce.multistore.analytics.application.dto;

public class ProductStatsResponse {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/analytics/application/dto/SalesReportResponse.java ---- */

package com.ecommerce.multistore.analytics.application.dto;

public class SalesReportResponse {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/analytics/application/service/AnalyticsService.java ---- */

package com.ecommerce.multistore.analytics.application.service;

public class AnalyticsService {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/analytics/domain/ProductAnalytics.java ---- */

package com.ecommerce.multistore.analytics.domain;

public class ProductAnalytics {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/analytics/infrastructure/web/AnalyticsController.java ---- */

package com.ecommerce.multistore.analytics.infrastructure.web;

public class AnalyticsController {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/brand/application/dto/BrandResponse.java ---- */


/* ---- File: src/main/java/com/ecommerce/multistore/brand/application/dto/BrandResponse.java ---- */

package com.ecommerce.multistore.brand.application.dto;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * استجابة العلامة التجارية
 * Brand Response DTO
 */
public class BrandResponse {

    private UUID id;
    private String displayId;
    private String name;
    private String nameAr;
    private String slug;
    private String description;
    private String descriptionAr;
    private String logoUrl;
    private String websiteUrl;
    private Boolean isActive;
    private Integer sortOrder;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private Long productCount;

    // Constructors
    public BrandResponse() {}

    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }

    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getNameAr() { return nameAr; }
    public void setNameAr(String nameAr) { this.nameAr = nameAr; }

    public String getSlug() { return slug; }
    public void setSlug(String slug) { this.slug = slug; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public String getDescriptionAr() { return descriptionAr; }
    public void setDescriptionAr(String descriptionAr) { this.descriptionAr = descriptionAr; }

    public String getLogoUrl() { return logoUrl; }
    public void setLogoUrl(String logoUrl) { this.logoUrl = logoUrl; }

    public String getWebsiteUrl() { return websiteUrl; }
    public void setWebsiteUrl(String websiteUrl) { this.websiteUrl = websiteUrl; }

    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }

    public Integer getSortOrder() { return sortOrder; }
    public void setSortOrder(Integer sortOrder) { this.sortOrder = sortOrder; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }

    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }

    public Long getProductCount() { return productCount; }
    public void setProductCount(Long productCount) { this.productCount = productCount; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/brand/application/dto/CreateBrandRequest.java ---- */


/* ---- File: src/main/java/com/ecommerce/multistore/brand/application/dto/CreateBrandRequest.java ---- */

package com.ecommerce.multistore.brand.application.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Max;

/**
 * طلب إنشاء علامة تجارية
 * Create Brand Request DTO
 */
public class CreateBrandRequest {

    @NotBlank(message = "Brand name is required")
    @Size(max = 255, message = "Brand name cannot exceed 255 characters")
    private String name;

    @Size(max = 255, message = "Arabic name cannot exceed 255 characters")
    private String nameAr;

    @Size(max = 5000, message = "Description cannot exceed 5000 characters")
    private String description;

    @Size(max = 5000, message = "Arabic description cannot exceed 5000 characters")
    private String descriptionAr;

    private String logoUrl;
    private String websiteUrl;

    @Min(value = 0, message = "Sort order cannot be negative")
    @Max(value = 9999, message = "Sort order cannot exceed 9999")
    private Integer sortOrder = 0;

    private Boolean isActive = true;

    // Constructors
    public CreateBrandRequest() {}

    public CreateBrandRequest(String name) {
        this.name = name;
    }

    // Getters and Setters
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getNameAr() { return nameAr; }
    public void setNameAr(String nameAr) { this.nameAr = nameAr; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public String getDescriptionAr() { return descriptionAr; }
    public void setDescriptionAr(String descriptionAr) { this.descriptionAr = descriptionAr; }

    public String getLogoUrl() { return logoUrl; }
    public void setLogoUrl(String logoUrl) { this.logoUrl = logoUrl; }

    public String getWebsiteUrl() { return websiteUrl; }
    public void setWebsiteUrl(String websiteUrl) { this.websiteUrl = websiteUrl; }

    public Integer getSortOrder() { return sortOrder; }
    public void setSortOrder(Integer sortOrder) { this.sortOrder = sortOrder; }

    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/brand/application/service/BrandService.java ---- */


/* ---- File: src/main/java/com/ecommerce/multistore/brand/application/service/BrandService.java ---- */

package com.ecommerce.multistore.brand.application.service;

import com.ecommerce.multistore.brand.application.dto.BrandResponse;
import com.ecommerce.multistore.brand.application.dto.CreateBrandRequest;
import com.ecommerce.multistore.brand.domain.Brand;
import com.ecommerce.multistore.brand.infrastructure.BrandRepository;
import com.ecommerce.multistore.shared.exception.DuplicateResourceException;
import com.ecommerce.multistore.shared.exception.ResourceNotFoundException;
import com.ecommerce.multistore.shared.utils.SlugGenerator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * خدمة إدارة العلامات التجارية
 * Brand Management Service
 */
@Service
@Transactional
public class BrandService {

    private final BrandRepository brandRepository;

    @Autowired
    public BrandService(BrandRepository brandRepository) {
        this.brandRepository = brandRepository;
    }

    /**
     * إنشاء علامة تجارية جديدة
     * Create new brand
     */
    @CacheEvict(value = "brands", allEntries = true)
    public BrandResponse createBrand(CreateBrandRequest request) {
        // التحقق من عدم وجود اسم مكرر
        if (brandRepository.existsByName(request.getName())) {
            throw new DuplicateResourceException("Brand with name '" + request.getName() + "' already exists");
        }

        // توليد slug فريد
        String slug = SlugGenerator.generateUniqueSlug(
            request.getName(), 
            brandRepository::existsBySlug
        );

        // إنشاء العلامة التجارية
        Brand brand = new Brand();
        brand.setName(request.getName());
        brand.setNameAr(request.getNameAr());
        brand.setSlug(slug);
        brand.setDescription(request.getDescription());
        brand.setDescriptionAr(request.getDescriptionAr());
        brand.setLogoUrl(request.getLogoUrl());
        brand.setWebsiteUrl(request.getWebsiteUrl());
        brand.setSortOrder(request.getSortOrder());
        brand.setIsActive(request.getIsActive());

        Brand savedBrand = brandRepository.save(brand);
        return convertToResponse(savedBrand);
    }

    /**
     * الحصول على علامة تجارية بواسطة ID
     * Get brand by ID
     */
    @Transactional(readOnly = true)
    @Cacheable(value = "brands", key = "#id")
    public Optional<BrandResponse> findById(UUID id) {
        return brandRepository.findById(id)
                .map(this::convertToResponse);
    }

    /**
     * الحصول على علامة تجارية بواسطة Display ID
     * Get brand by display ID
     */
    @Transactional(readOnly = true)
    @Cacheable(value = "brands", key = "#displayId")
    public Optional<BrandResponse> findByDisplayId(String displayId) {
        return brandRepository.findByDisplayId(displayId)
                .map(this::convertToResponse);
    }

    /**
     * الحصول على علامة تجارية بواسطة Slug
     * Get brand by slug
     */
    @Transactional(readOnly = true)
    @Cacheable(value = "brands", key = "#slug")
    public Optional<BrandResponse> findBySlug(String slug) {
        return brandRepository.findBySlug(slug)
                .map(this::convertToResponse);
    }

    /**
     * الحصول على جميع العلامات التجارية
     * Get all brands
     */
    @Transactional(readOnly = true)
    public Page<BrandResponse> getAllBrands(Pageable pageable) {
        return brandRepository.findAll(pageable)
                .map(this::convertToResponse);
    }

    /**
     * الحصول على العلامات التجارية النشطة
     * Get active brands
     */
    @Transactional(readOnly = true)
    @Cacheable(value = "brands", key = "'active'")
    public List<BrandResponse> getActiveBrands() {
        return brandRepository.findByIsActiveTrueOrderBySortOrderAsc()
                .stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    /**
     * البحث في العلامات التجارية
     * Search brands
     */
    @Transactional(readOnly = true)
    public Page<BrandResponse> searchBrands(String query, Pageable pageable) {
        return brandRepository.searchBrands(query, pageable)
                .map(this::convertToResponse);
    }

    /**
     * تحديث علامة تجارية
     * Update brand
     */
    @CacheEvict(value = "brands", allEntries = true)
    public BrandResponse updateBrand(UUID id, CreateBrandRequest request) {
        Brand brand = brandRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Brand not found with ID: " + id));

        // التحقق من عدم وجود اسم مكرر (باستثناء العلامة الحالية)
        if (!brand.getName().equals(request.getName()) && 
            brandRepository.existsByName(request.getName())) {
            throw new DuplicateResourceException("Brand with name '" + request.getName() + "' already exists");
        }

        // تحديث slug إذا تغير الاسم
        if (!brand.getName().equals(request.getName())) {
            String newSlug = SlugGenerator.generateUniqueSlug(
                request.getName(), 
                slug -> !slug.equals(brand.getSlug()) && brandRepository.existsBySlug(slug)
            );
            brand.setSlug(newSlug);
        }

        // تحديث البيانات
        brand.updateInfo(
            request.getName(),
            request.getNameAr(),
            request.getDescription(),
            request.getDescriptionAr()
        );
        brand.setLogoUrl(request.getLogoUrl());
        brand.setWebsiteUrl(request.getWebsiteUrl());
        brand.setSortOrder(request.getSortOrder());
        brand.setIsActive(request.getIsActive());

        Brand updatedBrand = brandRepository.save(brand);
        return convertToResponse(updatedBrand);
    }

    /**
     * تفعيل علامة تجارية
     * Activate brand
     */
    @CacheEvict(value = "brands", allEntries = true)
    public BrandResponse activateBrand(UUID id) {
        Brand brand = brandRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Brand not found with ID: " + id));

        brand.activate();
        Brand updatedBrand = brandRepository.save(brand);
        return convertToResponse(updatedBrand);
    }

    /**
     * إلغاء تفعيل علامة تجارية
     * Deactivate brand
     */
    @CacheEvict(value = "brands", allEntries = true)
    public BrandResponse deactivateBrand(UUID id) {
        Brand brand = brandRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Brand not found with ID: " + id));

        brand.deactivate();
        Brand updatedBrand = brandRepository.save(brand);
        return convertToResponse(updatedBrand);
    }

    /**
     * حذف علامة تجارية
     * Delete brand
     */
    @CacheEvict(value = "brands", allEntries = true)
    public void deleteBrand(UUID id) {
        Brand brand = brandRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Brand not found with ID: " + id));

        brandRepository.delete(brand);
    }

    // Helper Methods

    /**
     * تحويل Entity إلى Response DTO
     * Convert entity to response DTO
     */
    private BrandResponse convertToResponse(Brand brand) {
        BrandResponse response = new BrandResponse();
        response.setId(brand.getId());
        response.setDisplayId(brand.getDisplayId());
        response.setName(brand.getName());
        response.setNameAr(brand.getNameAr());
        response.setSlug(brand.getSlug());
        response.setDescription(brand.getDescription());
        response.setDescriptionAr(brand.getDescriptionAr());
        response.setLogoUrl(brand.getLogoUrl());
        response.setWebsiteUrl(brand.getWebsiteUrl());
        response.setIsActive(brand.getIsActive());
        response.setSortOrder(brand.getSortOrder());
        response.setCreatedAt(brand.getCreatedAt());
        response.setUpdatedAt(brand.getUpdatedAt());
        return response;
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/brand/domain/Brand.java ---- */

package com.ecommerce.multistore.brand.domain;

import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * كيان العلامة التجارية
 * Brand Entity
 */
@Entity
@Table(name = "brands")
public class Brand {
    
    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private UUID id;
    
    @Column(name = "display_id", unique = true)
    private String displayId;
    
    @Column(nullable = false)
    private String name;
    
    @Column(name = "name_ar")
    private String nameAr;
    
    @Column(unique = true, nullable = false)
    private String slug;
    
    @Column(columnDefinition = "TEXT")
    private String description;
    
    @Column(name = "description_ar", columnDefinition = "TEXT")
    private String descriptionAr;
    
    @Column(name = "logo_url")
    private String logoUrl;
    
    @Column(name = "website_url")
    private String websiteUrl;
    
    @Column(name = "is_active")
    private Boolean isActive = true;
    
    @Column(name = "sort_order")
    private Integer sortOrder = 0;
    
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
    
    // Constructors
    public Brand() {
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }
    
    public Brand(String name, String nameAr, String slug) {
        this();
        this.name = name;
        this.nameAr = nameAr;
        this.slug = slug;
    }
    
    // Business Methods
    public void activate() {
        this.isActive = true;
        this.updatedAt = LocalDateTime.now();
    }
    
    public void deactivate() {
        this.isActive = false;
        this.updatedAt = LocalDateTime.now();
    }
    
    public void updateInfo(String name, String nameAr, String description, String descriptionAr) {
        this.name = name;
        this.nameAr = nameAr;
        this.description = description;
        this.descriptionAr = descriptionAr;
        this.updatedAt = LocalDateTime.now();
    }
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getNameAr() { return nameAr; }
    public void setNameAr(String nameAr) { this.nameAr = nameAr; }
    
    public String getSlug() { return slug; }
    public void setSlug(String slug) { this.slug = slug; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public String getDescriptionAr() { return descriptionAr; }
    public void setDescriptionAr(String descriptionAr) { this.descriptionAr = descriptionAr; }
    
    public String getLogoUrl() { return logoUrl; }
    public void setLogoUrl(String logoUrl) { this.logoUrl = logoUrl; }
    
    public String getWebsiteUrl() { return websiteUrl; }
    public void setWebsiteUrl(String websiteUrl) { this.websiteUrl = websiteUrl; }
    
    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }
    
    public Integer getSortOrder() { return sortOrder; }
    public void setSortOrder(Integer sortOrder) { this.sortOrder = sortOrder; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
    
    @PreUpdate
    public void preUpdate() {
        this.updatedAt = LocalDateTime.now();
    }
    
    @Override
    public String toString() {
        return "Brand{" +
                "id=" + id +
                ", displayId='" + displayId + '\'' +
                ", name='" + name + '\'' +
                ", nameAr='" + nameAr + '\'' +
                ", slug='" + slug + '\'' +
                ", isActive=" + isActive +
                '}';
    }
}


/* ---- File: src/main/java/com/ecommerce/multistore/brand/infrastructure/BrandRepository.java ---- */



/* ---- File: src/main/java/com/ecommerce/multistore/brand/infrastructure/BrandRepository.java ---- */

package com.ecommerce.multistore.brand.infrastructure;

import com.ecommerce.multistore.brand.domain.Brand;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * مستودع العلامات التجارية
 * Brand Repository
 */
@Repository
public interface BrandRepository extends JpaRepository<Brand, UUID> {

    /**
     * البحث بواسطة Display ID
     */
    Optional<Brand> findByDisplayId(String displayId);

    /**
     * البحث بواسطة Slug
     */
    Optional<Brand> findBySlug(String slug);

    /**
     * البحث بواسطة الاسم
     */
    Optional<Brand> findByName(String name);

    /**
     * التحقق من وجود Slug
     */
    boolean existsBySlug(String slug);

    /**
     * التحقق من وجود اسم
     */
    boolean existsByName(String name);

    /**
     * الحصول على العلامات النشطة
     */
    List<Brand> findByIsActiveTrueOrderBySortOrderAsc();

    /**
     * الحصول على العلامات النشطة مع التصفح
     */
    Page<Brand> findByIsActiveTrue(Pageable pageable);

    /**
     * البحث في العلامات التجارية
     */
    @Query("SELECT b FROM Brand b WHERE " +
           "(LOWER(b.name) LIKE LOWER(CONCAT('%', :query, '%')) OR " +
           "LOWER(b.nameAr) LIKE LOWER(CONCAT('%', :query, '%')) OR " +
           "LOWER(b.description) LIKE LOWER(CONCAT('%', :query, '%'))) AND " +
           "b.isActive = true")
    Page<Brand> searchBrands(@Param("query") String query, Pageable pageable);

    /**
     * الحصول على العلامات مرتبة حسب الترتيب
     */
    List<Brand> findAllByOrderBySortOrderAsc();

    /**
     * عدد المنتجات لكل علامة تجارية
     */
    @Query("SELECT b.id, COUNT(p.id) FROM Brand b LEFT JOIN Product p ON b.id = p.brand.id GROUP BY b.id")
    List<Object[]> countProductsByBrand();
}



/* ---- File: src/main/java/com/ecommerce/multistore/brand/infrastructure/web/BrandController.java ---- */

package com.ecommerce.multistore.brand.infrastructure.web;

import com.ecommerce.multistore.brand.application.dto.BrandResponse;
import com.ecommerce.multistore.brand.application.dto.CreateBrandRequest;
import com.ecommerce.multistore.brand.application.service.BrandService;
import com.ecommerce.multistore.shared.constants.AppConstants;
import com.ecommerce.multistore.shared.dto.ApiResponse;
import com.ecommerce.multistore.shared.dto.PaginatedResponse;
import com.ecommerce.multistore.shared.utils.PaginationUtils;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

/**
 * تحكم العلامات التجارية
 * Brand Controller
 */
@RestController
@RequestMapping(AppConstants.API_BASE_PATH + "/brands")
@Tag(name = "Brands", description = "إدارة العلامات التجارية - Brand Management")
public class BrandController {

    private final BrandService brandService;

    @Autowired
    public BrandController(BrandService brandService) {
        this.brandService = brandService;
    }

    /**
     * إنشاء علامة تجارية جديدة
     * Create new brand
     */
    @PostMapping
    @Operation(summary = "إنشاء علامة تجارية جديدة", description = "Create a new brand")
    public ResponseEntity<ApiResponse<BrandResponse>> createBrand(
            @Valid @RequestBody CreateBrandRequest request) {
        
        BrandResponse brand = brandService.createBrand(request);
        
        ApiResponse<BrandResponse> response = ApiResponse.success(
            brand, 
            "Brand created successfully", 
            201
        );
        response.setMessageAr("تم إنشاء العلامة التجارية بنجاح");
        
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    /**
     * الحصول على علامة تجارية بواسطة ID
     * Get brand by ID
     */
    @GetMapping("/{id}")
    @Operation(summary = "Get Brand by ID", description = "الحصول على علامة تجارية بواسطة المعرف")
    public ResponseEntity<ApiResponse<BrandResponse>> getBrandById(
            @Parameter(description = "Brand ID") @PathVariable UUID id) {

        return brandService.findById(id)
                .map(brand -> {
                    ApiResponse<BrandResponse> response = ApiResponse.success(
                        brand, 
                        "Brand retrieved successfully"
                    );
                    response.setMessageAr("تم استرجاع العلامة التجارية بنجاح");
                    return ResponseEntity.ok(response);
                })
                .orElse(ResponseEntity.notFound().build());
    }

    /**
     * الحصول على علامة تجارية بواسطة Display ID
     * Get brand by display ID
     */
    @GetMapping("/display/{displayId}")
    @Operation(summary = "Get Brand by Display ID", description = "الحصول على علامة تجارية بواسطة معرف العرض")
    public ResponseEntity<ApiResponse<BrandResponse>> getBrandByDisplayId(
            @Parameter(description = "Brand Display ID") @PathVariable String displayId) {

        return brandService.findByDisplayId(displayId)
                .map(brand -> {
                    ApiResponse<BrandResponse> response = ApiResponse.success(
                        brand, 
                        "Brand retrieved successfully"
                    );
                    response.setMessageAr("تم استرجاع العلامة التجارية بنجاح");
                    return ResponseEntity.ok(response);
                })
                .orElse(ResponseEntity.notFound().build());
    }

    /**
     * الحصول على علامة تجارية بواسطة Slug
     * Get brand by slug
     */
    @GetMapping("/slug/{slug}")
    @Operation(summary = "Get Brand by Slug", description = "الحصول على علامة تجارية بواسطة الرابط الودي")
    public ResponseEntity<ApiResponse<BrandResponse>> getBrandBySlug(
            @Parameter(description = "Brand Slug") @PathVariable String slug) {

        return brandService.findBySlug(slug)
                .map(brand -> {
                    ApiResponse<BrandResponse> response = ApiResponse.success(
                        brand, 
                        "Brand retrieved successfully"
                    );
                    response.setMessageAr("تم استرجاع العلامة التجارية بنجاح");
                    return ResponseEntity.ok(response);
                })
                .orElse(ResponseEntity.notFound().build());
    }

    /**
 * الحصول على جميع العلامات التجارية
 * Get all brands
 */
@GetMapping
@Operation(summary = "Get All Brands", description = "الحصول على جميع العلامات التجارية")
public ResponseEntity<ApiResponse<PaginatedResponse<BrandResponse>>> getAllBrands(
        @Parameter(description = "Page number") @RequestParam(defaultValue = "0") int page,
        @Parameter(description = "Page size") @RequestParam(defaultValue = "20") int size,
        @Parameter(description = "Sort by field") @RequestParam(defaultValue = "name") String sortBy,
        @Parameter(description = "Sort direction") @RequestParam(defaultValue = "asc") String sortDir) {

    Pageable pageable = PaginationUtils.createPageable(page, size, sortBy, sortDir);
    Page<BrandResponse> brands = brandService.getAllBrands(pageable);

    // استخدام static factory method
    PaginatedResponse<BrandResponse> paginatedResponse = PaginatedResponse.from(brands);

    ApiResponse<PaginatedResponse<BrandResponse>> response = ApiResponse.success(
        paginatedResponse,
        "Brands retrieved successfully"
    );
    response.setMessageAr("تم استرجاع العلامات التجارية بنجاح");

    return ResponseEntity.ok(response);
}


    /**
     * الحصول على العلامات التجارية النشطة
     * Get active brands
     */
    @GetMapping("/active")
    @Operation(summary = "Get Active Brands", description = "الحصول على العلامات التجارية النشطة")
    public ResponseEntity<ApiResponse<List<BrandResponse>>> getActiveBrands() {

        List<BrandResponse> brands = brandService.getActiveBrands();
        ApiResponse<List<BrandResponse>> response = ApiResponse.success(
            brands, 
            "Active brands retrieved successfully"
        );
        response.setMessageAr("تم استرجاع العلامات التجارية النشطة بنجاح");

        return ResponseEntity.ok(response);
    }

   

/**
 * البحث في العلامات التجارية
 * Search brands
 */
@GetMapping("/search")
@Operation(summary = "Search Brands", description = "البحث في العلامات التجارية")
public ResponseEntity<ApiResponse<PaginatedResponse<BrandResponse>>> searchBrands(
        @Parameter(description = "Search query") @RequestParam String query,
        @Parameter(description = "Page number") @RequestParam(defaultValue = "0") int page,
        @Parameter(description = "Page size") @RequestParam(defaultValue = "20") int size,
        @Parameter(description = "Sort by field") @RequestParam(defaultValue = "name") String sortBy,
        @Parameter(description = "Sort direction") @RequestParam(defaultValue = "asc") String sortDir) {

    Pageable pageable = PaginationUtils.createPageable(page, size, sortBy, sortDir);
    Page<BrandResponse> brands = brandService.searchBrands(query, pageable);

    // استخدام static factory method
    PaginatedResponse<BrandResponse> paginatedResponse = PaginatedResponse.from(brands);

    ApiResponse<PaginatedResponse<BrandResponse>> response = ApiResponse.success(
        paginatedResponse,
        "Brands search completed successfully"
    );
    response.setMessageAr("تم البحث في العلامات التجارية بنجاح");

    return ResponseEntity.ok(response);
}
    /**
     * تحديث علامة تجارية
     * Update brand
     */
    @PutMapping("/{id}")
    @Operation(summary = "Update Brand", description = "تحديث علامة تجارية")
    public ResponseEntity<ApiResponse<BrandResponse>> updateBrand(
            @Parameter(description = "Brand ID") @PathVariable UUID id,
            @Valid @RequestBody CreateBrandRequest request) {

        BrandResponse brand = brandService.updateBrand(id, request);
        ApiResponse<BrandResponse> response = ApiResponse.success(
            brand, 
            "Brand updated successfully"
        );
        response.setMessageAr("تم تحديث العلامة التجارية بنجاح");

        return ResponseEntity.ok(response);
    }

    /**
     * تفعيل علامة تجارية
     * Activate brand
     */
    @PatchMapping("/{id}/activate")
    @Operation(summary = "Activate Brand", description = "تفعيل علامة تجارية")
    public ResponseEntity<ApiResponse<BrandResponse>> activateBrand(
            @Parameter(description = "Brand ID") @PathVariable UUID id) {

        BrandResponse brand = brandService.activateBrand(id);
        ApiResponse<BrandResponse> response = ApiResponse.success(
            brand, 
            "Brand activated successfully"
        );
        response.setMessageAr("تم تفعيل العلامة التجارية بنجاح");

        return ResponseEntity.ok(response);
    }

    /**
     * إلغاء تفعيل علامة تجارية
     * Deactivate brand
     */
    @PatchMapping("/{id}/deactivate")
    @Operation(summary = "Deactivate Brand", description = "إلغاء تفعيل علامة تجارية")
    public ResponseEntity<ApiResponse<BrandResponse>> deactivateBrand(
            @Parameter(description = "Brand ID") @PathVariable UUID id) {

        BrandResponse brand = brandService.deactivateBrand(id);
        ApiResponse<BrandResponse> response = ApiResponse.success(
            brand, 
            "Brand deactivated successfully"
        );
        response.setMessageAr("تم إلغاء تفعيل العلامة التجارية بنجاح");

        return ResponseEntity.ok(response);
    }

    /**
     * حذف علامة تجارية
     * Delete brand
     */
    @DeleteMapping("/{id}")
    @Operation(summary = "Delete Brand", description = "حذف علامة تجارية")
    public ResponseEntity<ApiResponse<Void>> deleteBrand(
            @Parameter(description = "Brand ID") @PathVariable UUID id) {

        brandService.deleteBrand(id);
        ApiResponse<Void> response = ApiResponse.success(
            null, 
            "Brand deleted successfully"
        );
        response.setMessageAr("تم حذف العلامة التجارية بنجاح");

        return ResponseEntity.ok(response);
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/category/application/dto/CategoryResponse.java ---- */


/* ---- File: src/main/java/com/ecommerce/multistore/category/application/dto/CategoryResponse.java ---- */

package com.ecommerce.multistore.category.application.dto;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

/**
 * استجابة الفئة
 * Category Response DTO
 */
public class CategoryResponse {

    private UUID id;
    private String displayId;
    private String name;
    private String nameAr;
    private String slug;
    private String description;
    private String descriptionAr;
    private UUID parentId;
    private String imageUrl;
    private String icon;
    private Integer sortOrder;
    private Boolean isActive;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private Long productCount;
    private List<CategoryResponse> children;

    // Constructors
    public CategoryResponse() {}

    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }

    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getNameAr() { return nameAr; }
    public void setNameAr(String nameAr) { this.nameAr = nameAr; }

    public String getSlug() { return slug; }
    public void setSlug(String slug) { this.slug = slug; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public String getDescriptionAr() { return descriptionAr; }
    public void setDescriptionAr(String descriptionAr) { this.descriptionAr = descriptionAr; }

    public UUID getParentId() { return parentId; }
    public void setParentId(UUID parentId) { this.parentId = parentId; }

    public String getImageUrl() { return imageUrl; }
    public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }

    public String getIcon() { return icon; }
    public void setIcon(String icon) { this.icon = icon; }

    public Integer getSortOrder() { return sortOrder; }
    public void setSortOrder(Integer sortOrder) { this.sortOrder = sortOrder; }

    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }

    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }

    public Long getProductCount() { return productCount; }
    public void setProductCount(Long productCount) { this.productCount = productCount; }

    public List<CategoryResponse> getChildren() { return children; }
    public void setChildren(List<CategoryResponse> children) { this.children = children; }
}




/* ---- File: src/main/java/com/ecommerce/multistore/category/application/dto/CategoryTreeResponse.java ---- */

/* ---- File: src/main/java/com/ecommerce/multistore/category/application/dto/CategoryTreeResponse.java ---- */

package com.ecommerce.multistore.category.application.dto;

import java.util.List;

/**
 * استجابة شجرة الفئات
 * Category Tree Response DTO
 */
public class CategoryTreeResponse {

    private List<CategoryResponse> categories;
    private Integer totalCategories;
    private Integer activeCategories;
    private Integer parentCategories;
    private Integer childCategories;

    // Constructors
    public CategoryTreeResponse() {}

    public CategoryTreeResponse(List<CategoryResponse> categories) {
        this.categories = categories;
        this.totalCategories = categories.size();
        this.activeCategories = (int) categories.stream().filter(c -> c.getIsActive()).count();
        this.parentCategories = (int) categories.stream().filter(c -> c.getParentId() == null).count();
        this.childCategories = (int) categories.stream().filter(c -> c.getParentId() != null).count();
    }

    // Getters and Setters
    public List<CategoryResponse> getCategories() { return categories; }
    public void setCategories(List<CategoryResponse> categories) { this.categories = categories; }

    public Integer getTotalCategories() { return totalCategories; }
    public void setTotalCategories(Integer totalCategories) { this.totalCategories = totalCategories; }

    public Integer getActiveCategories() { return activeCategories; }
    public void setActiveCategories(Integer activeCategories) { this.activeCategories = activeCategories; }

    public Integer getParentCategories() { return parentCategories; }
    public void setParentCategories(Integer parentCategories) { this.parentCategories = parentCategories; }

    public Integer getChildCategories() { return childCategories; }
    public void setChildCategories(Integer childCategories) { this.childCategories = childCategories; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/category/application/dto/CreateCategoryRequest.java ---- */


/* ---- File: src/main/java/com/ecommerce/multistore/category/application/dto/CreateCategoryRequest.java ---- */

package com.ecommerce.multistore.category.application.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Max;
import java.util.UUID;

/**
 * طلب إنشاء فئة
 * Create Category Request DTO
 */
public class CreateCategoryRequest {

    @NotBlank(message = "Category name is required")
    @Size(max = 255, message = "Category name cannot exceed 255 characters")
    private String name;

    @Size(max = 255, message = "Arabic name cannot exceed 255 characters")
    private String nameAr;

    @Size(max = 5000, message = "Description cannot exceed 5000 characters")
    private String description;

    @Size(max = 5000, message = "Arabic description cannot exceed 5000 characters")
    private String descriptionAr;

    private UUID parentId;
    private String imageUrl;
    private String icon;

    @Min(value = 0, message = "Sort order cannot be negative")
    @Max(value = 9999, message = "Sort order cannot exceed 9999")
    private Integer sortOrder = 0;

    private Boolean isActive = true;

    // Constructors
    public CreateCategoryRequest() {}

    public CreateCategoryRequest(String name) {
        this.name = name;
    }

    // Getters and Setters
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getNameAr() { return nameAr; }
    public void setNameAr(String nameAr) { this.nameAr = nameAr; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public String getDescriptionAr() { return descriptionAr; }
    public void setDescriptionAr(String descriptionAr) { this.descriptionAr = descriptionAr; }

    public UUID getParentId() { return parentId; }
    public void setParentId(UUID parentId) { this.parentId = parentId; }

    public String getImageUrl() { return imageUrl; }
    public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }

    public String getIcon() { return icon; }
    public void setIcon(String icon) { this.icon = icon; }

    public Integer getSortOrder() { return sortOrder; }
    public void setSortOrder(Integer sortOrder) { this.sortOrder = sortOrder; }

    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/category/application/service/CategoryService.java ---- */


/* ---- File: src/main/java/com/ecommerce/multistore/category/application/service/CategoryService.java ---- */

package com.ecommerce.multistore.category.application.service;

import com.ecommerce.multistore.category.application.dto.CategoryResponse;
import com.ecommerce.multistore.category.application.dto.CategoryTreeResponse;
import com.ecommerce.multistore.category.application.dto.CreateCategoryRequest;
import com.ecommerce.multistore.category.domain.Category;
import com.ecommerce.multistore.category.infrastructure.CategoryRepository;
import com.ecommerce.multistore.shared.exception.BusinessException;
import com.ecommerce.multistore.shared.exception.DuplicateResourceException;
import com.ecommerce.multistore.shared.exception.ResourceNotFoundException;
import com.ecommerce.multistore.shared.utils.SlugGenerator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * خدمة إدارة الفئات
 * Category Management Service
 */
@Service
@Transactional
public class CategoryService {

    private final CategoryRepository categoryRepository;

    @Autowired
    public CategoryService(CategoryRepository categoryRepository) {
        this.categoryRepository = categoryRepository;
    }

    /**
     * إنشاء فئة جديدة
     * Create new category
     */
    @CacheEvict(value = "categories", allEntries = true)
    public CategoryResponse createCategory(CreateCategoryRequest request) {
        // التحقق من عدم وجود اسم مكرر
        if (categoryRepository.existsByName(request.getName())) {
            throw new DuplicateResourceException("Category with name '" + request.getName() + "' already exists");
        }

        // التحقق من وجود الفئة الأب إذا تم تحديدها
        if (request.getParentId() != null) {
            categoryRepository.findById(request.getParentId())
                .orElseThrow(() -> new ResourceNotFoundException("Parent category not found"));
        }

        // توليد slug فريد
        String slug = SlugGenerator.generateUniqueSlug(
            request.getName(), 
            categoryRepository::existsBySlug
        );

        // إنشاء الفئة
        Category category = new Category();
        category.setName(request.getName());
        category.setNameAr(request.getNameAr());
        category.setSlug(slug);
        category.setDescription(request.getDescription());
        category.setDescriptionAr(request.getDescriptionAr());
        category.setParentId(request.getParentId());
        category.setImageUrl(request.getImageUrl());
        category.setIcon(request.getIcon());
        category.setSortOrder(request.getSortOrder());
        category.setIsActive(request.getIsActive());

        Category savedCategory = categoryRepository.save(category);
        return convertToResponse(savedCategory);
    }

    /**
     * الحصول على فئة بواسطة ID
     * Get category by ID
     */
    @Transactional(readOnly = true)
    @Cacheable(value = "categories", key = "#id")
    public Optional<CategoryResponse> findById(UUID id) {
        return categoryRepository.findById(id)
                .map(this::convertToResponse);
    }

    /**
     * الحصول على فئة بواسطة Slug
     * Get category by slug
     */
    @Transactional(readOnly = true)
    @Cacheable(value = "categories", key = "#slug")
    public Optional<CategoryResponse> findBySlug(String slug) {
        return categoryRepository.findBySlug(slug)
                .map(this::convertToResponse);
    }

    /**
     * الحصول على جميع الفئات
     * Get all categories
     */
    @Transactional(readOnly = true)
    public Page<CategoryResponse> getAllCategories(Pageable pageable) {
        return categoryRepository.findAll(pageable)
                .map(this::convertToResponse);
    }

    /**
     * الحصول على الفئات الرئيسية
     * Get parent categories
     */
    @Transactional(readOnly = true)
    @Cacheable(value = "categories", key = "'parents'")
    public List<CategoryResponse> getParentCategories() {
        return categoryRepository.findByParentIdIsNullAndIsActiveTrueOrderBySortOrderAsc()
                .stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    /**
     * الحصول على الفئات الفرعية
     * Get child categories
     */
    @Transactional(readOnly = true)
    @Cacheable(value = "categories", key = "'children_' + #parentId")
    public List<CategoryResponse> getChildCategories(UUID parentId) {
        return categoryRepository.findByParentIdAndIsActiveTrueOrderBySortOrderAsc(parentId)
                .stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    /**
     * الحصول على شجرة الفئات
     * Get category tree
     */
    @Transactional(readOnly = true)
    @Cacheable(value = "categories", key = "'tree'")
    public CategoryTreeResponse getCategoryTree() {
        List<Category> allCategories = categoryRepository.findCategoryTree();

        // تجميع الفئات حسب الأب
        Map<UUID, List<Category>> categoryMap = allCategories.stream()
                .filter(c -> c.getParentId() != null)
                .collect(Collectors.groupingBy(Category::getParentId));

        // بناء شجرة الفئات
        List<CategoryResponse> parentCategories = allCategories.stream()
                .filter(c -> c.getParentId() == null)
                .map(parent -> {
                    CategoryResponse parentResponse = convertToResponse(parent);
                    List<Category> children = categoryMap.get(parent.getId());
                    if (children != null) {
                        List<CategoryResponse> childrenResponses = children.stream()
                                .map(this::convertToResponse)
                                .collect(Collectors.toList());
                        parentResponse.setChildren(childrenResponses);
                    }
                    return parentResponse;
                })
                .collect(Collectors.toList());

        return new CategoryTreeResponse(parentCategories);
    }

    /**
     * البحث في الفئات
     * Search categories
     */
    @Transactional(readOnly = true)
    public Page<CategoryResponse> searchCategories(String query, Pageable pageable) {
        return categoryRepository.searchCategories(query, pageable)
                .map(this::convertToResponse);
    }

    /**
     * تحديث فئة
     * Update category
     */
    @CacheEvict(value = "categories", allEntries = true)
    public CategoryResponse updateCategory(UUID id, CreateCategoryRequest request) {
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Category not found with ID: " + id));

        // التحقق من عدم وجود اسم مكرر (باستثناء الفئة الحالية)
        if (!category.getName().equals(request.getName()) && 
            categoryRepository.existsByName(request.getName())) {
            throw new DuplicateResourceException("Category with name '" + request.getName() + "' already exists");
        }

        // التحقق من الفئة الأب
        if (request.getParentId() != null) {
            if (request.getParentId().equals(id)) {
                throw new IllegalArgumentException("Category cannot be its own parent");
            }
            categoryRepository.findById(request.getParentId())
                .orElseThrow(() -> new ResourceNotFoundException("Parent category not found"));
        }

        // تحديث slug إذا تغير الاسم
        if (!category.getName().equals(request.getName())) {
            String newSlug = SlugGenerator.generateUniqueSlug(
                request.getName(), 
                slug -> !slug.equals(category.getSlug()) && categoryRepository.existsBySlug(slug)
            );
            category.setSlug(newSlug);
        }

        // تحديث البيانات
        category.updateInfo(
            request.getName(),
            request.getNameAr(),
            request.getDescription(),
            request.getDescriptionAr()
        );
        category.setParentId(request.getParentId());
        category.setImageUrl(request.getImageUrl());
        category.setIcon(request.getIcon());
        category.setSortOrder(request.getSortOrder());
        category.setIsActive(request.getIsActive());

        Category updatedCategory = categoryRepository.save(category);
        return convertToResponse(updatedCategory);
    }

    // في CategoryService.java
/**
 * تفعيل فئة
 * Activate category
 */
@Transactional
public CategoryResponse activateCategory(UUID id) {
    Category category = categoryRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Category not found with ID: " + id));
    
    category.setIsActive(true);
    category.setUpdatedAt(LocalDateTime.now());
    
    Category savedCategory = categoryRepository.save(category);
    return convertToResponse(savedCategory);
}

/**
 * إلغاء تفعيل فئة
 * Deactivate category
 */
@Transactional
public CategoryResponse deactivateCategory(UUID id) {
    Category category = categoryRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Category not found with ID: " + id));
    
    // التحقق من وجود فئات فرعية نشطة
    if (categoryRepository.existsByParentIdAndIsActive(id, true)) {
        throw new BusinessException("Cannot deactivate category with active subcategories");
    }
    
    category.setIsActive(false);
    category.setUpdatedAt(LocalDateTime.now());
    
    Category savedCategory = categoryRepository.save(category);
    return convertToResponse(savedCategory);
}


    /**
     * حذف فئة
     * Delete category
     */
    @CacheEvict(value = "categories", allEntries = true)
    public void deleteCategory(UUID id) {
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Category not found with ID: " + id));

        // التحقق من عدم وجود فئات فرعية
        List<Category> children = categoryRepository.findByParentIdAndIsActiveTrueOrderBySortOrderAsc(id);
        if (!children.isEmpty()) {
            throw new IllegalStateException("Cannot delete category with active children");
        }

        categoryRepository.delete(category);
    }

    // Helper Methods

    /**
     * تحويل Entity إلى Response DTO
     * Convert entity to response DTO
     */
    private CategoryResponse convertToResponse(Category category) {
        CategoryResponse response = new CategoryResponse();
        response.setId(category.getId());
        response.setDisplayId(category.getDisplayId());
        response.setName(category.getName());
        response.setNameAr(category.getNameAr());
        response.setSlug(category.getSlug());
        response.setDescription(category.getDescription());
        response.setDescriptionAr(category.getDescriptionAr());
        response.setParentId(category.getParentId());
        response.setImageUrl(category.getImageUrl());
        response.setIcon(category.getIcon());
        response.setSortOrder(category.getSortOrder());
        response.setIsActive(category.getIsActive());
        response.setCreatedAt(category.getCreatedAt());
        response.setUpdatedAt(category.getUpdatedAt());
        return response;
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/category/domain/Category.java ---- */


/* ---- File: src/main/java/com/ecommerce/multistore/category/domain/Category.java ---- */

package com.ecommerce.multistore.category.domain;

import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * كيان الفئة
 * Category Entity
 */
@Entity
@Table(name = "categories")
public class Category {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private UUID id;

    @Column(name = "display_id", unique = true)
    private String displayId;

    @Column(nullable = false)
    private String name;

    @Column(name = "name_ar")
    private String nameAr;

    @Column(unique = true, nullable = false)
    private String slug;

    @Column(columnDefinition = "TEXT")
    private String description;

    @Column(name = "description_ar", columnDefinition = "TEXT")
    private String descriptionAr;

    @Column(name = "parent_id")
    private UUID parentId;

    @Column(name = "image_url")
    private String imageUrl;

    private String icon;

    @Column(name = "sort_order")
    private Integer sortOrder = 0;

    @Column(name = "is_active")
    private Boolean isActive = true;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    // Relations
    @OneToMany(mappedBy = "parentId", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Category> children = new ArrayList<>();

    // Constructors
    public Category() {
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }

    public Category(String name, String slug) {
        this();
        this.name = name;
        this.slug = slug;
    }

    // Business Methods
    public boolean isParent() {
        return parentId == null;
    }

    public boolean hasChildren() {
        return children != null && !children.isEmpty();
    }

    public void activate() {
        this.isActive = true;
        this.updatedAt = LocalDateTime.now();
    }

    public void deactivate() {
        this.isActive = false;
        this.updatedAt = LocalDateTime.now();
    }

    public void updateInfo(String name, String nameAr, String description, String descriptionAr) {
        this.name = name;
        this.nameAr = nameAr;
        this.description = description;
        this.descriptionAr = descriptionAr;
        this.updatedAt = LocalDateTime.now();
    }

    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }

    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getNameAr() { return nameAr; }
    public void setNameAr(String nameAr) { this.nameAr = nameAr; }

    public String getSlug() { return slug; }
    public void setSlug(String slug) { this.slug = slug; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public String getDescriptionAr() { return descriptionAr; }
    public void setDescriptionAr(String descriptionAr) { this.descriptionAr = descriptionAr; }

    public UUID getParentId() { return parentId; }
    public void setParentId(UUID parentId) { this.parentId = parentId; }

    public String getImageUrl() { return imageUrl; }
    public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }

    public String getIcon() { return icon; }
    public void setIcon(String icon) { this.icon = icon; }

    public Integer getSortOrder() { return sortOrder; }
    public void setSortOrder(Integer sortOrder) { this.sortOrder = sortOrder; }

    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }

    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }

    public List<Category> getChildren() { return children; }
    public void setChildren(List<Category> children) { this.children = children; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/category/infrastructure/CategoryRepository.java ---- */


/* ---- File: src/main/java/com/ecommerce/multistore/category/infrastructure/CategoryRepository.java ---- */

package com.ecommerce.multistore.category.infrastructure;

import com.ecommerce.multistore.category.domain.Category;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * مستودع الفئات
 * Category Repository
 */
@Repository
public interface CategoryRepository extends JpaRepository<Category, UUID> {

    /**
     * البحث بواسطة Display ID
     */
    Optional<Category> findByDisplayId(String displayId);

    /**
     * البحث بواسطة Slug
     */
    Optional<Category> findBySlug(String slug);

    /**
     * البحث بواسطة الاسم
     */
    Optional<Category> findByName(String name);

    /**
     * التحقق من وجود Slug
     */
    boolean existsBySlug(String slug);

    /**
     * التحقق من وجود اسم
     */
    boolean existsByName(String name);

    /**
     * الحصول على الفئات الرئيسية
     */
    List<Category> findByParentIdIsNullAndIsActiveTrueOrderBySortOrderAsc();

    /**
     * الحصول على الفئات الفرعية
     */
    List<Category> findByParentIdAndIsActiveTrueOrderBySortOrderAsc(UUID parentId);
// في CategoryRepository.java
boolean existsByParentIdAndIsActive(UUID parentId, boolean isActive);

    /**
     * الحصول على الفئات النشطة
     */
    List<Category> findByIsActiveTrueOrderBySortOrderAsc();

    /**
     * الحصول على الفئات النشطة مع التصفح
     */
    Page<Category> findByIsActiveTrue(Pageable pageable);

    /**
     * البحث في الفئات
     */
    @Query("SELECT c FROM Category c WHERE " +
           "(LOWER(c.name) LIKE LOWER(CONCAT('%', :query, '%')) OR " +
           "LOWER(c.nameAr) LIKE LOWER(CONCAT('%', :query, '%')) OR " +
           "LOWER(c.description) LIKE LOWER(CONCAT('%', :query, '%'))) AND " +
           "c.isActive = true")
    Page<Category> searchCategories(@Param("query") String query, Pageable pageable);

    /**
     * عدد المنتجات لكل فئة
     */
    @Query("SELECT c.id, COUNT(p.id) FROM Category c LEFT JOIN Product p ON c.id = p.category.id GROUP BY c.id")
    List<Object[]> countProductsByCategory();

    /**
     * الحصول على شجرة الفئات
     */
    @Query("SELECT c FROM Category c WHERE c.isActive = true ORDER BY c.parentId NULLS FIRST, c.sortOrder ASC")
    List<Category> findCategoryTree();
}



/* ---- File: src/main/java/com/ecommerce/multistore/category/infrastructure/web/CategoryController.java ---- */

package com.ecommerce.multistore.category.infrastructure.web;

import com.ecommerce.multistore.category.application.dto.CategoryResponse;
import com.ecommerce.multistore.category.application.dto.CategoryTreeResponse;
import com.ecommerce.multistore.category.application.dto.CreateCategoryRequest;
import com.ecommerce.multistore.category.application.service.CategoryService;
import com.ecommerce.multistore.shared.constants.AppConstants;
import com.ecommerce.multistore.shared.dto.ApiResponse;
import com.ecommerce.multistore.shared.dto.PaginatedResponse;
import com.ecommerce.multistore.shared.utils.PaginationUtils;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

/**
 * تحكم الفئات
 * Category Controller
 */
@RestController
@RequestMapping(AppConstants.API_BASE_PATH + "/categories")
@Tag(name = "Categories", description = "إدارة الفئات - Category Management")
public class CategoryController {

    private final CategoryService categoryService;

    @Autowired
    public CategoryController(CategoryService categoryService) {
        this.categoryService = categoryService;
    }

    /**
     * إنشاء فئة جديدة
     * Create new category
     */
    @PostMapping
    @Operation(summary = "Create Category", description = "إنشاء فئة جديدة")
    public ResponseEntity<ApiResponse<CategoryResponse>> createCategory(
            @Valid @RequestBody CreateCategoryRequest request) {

        CategoryResponse category = categoryService.createCategory(request);
        ApiResponse<CategoryResponse> response = ApiResponse.success(
            category,
            "Category created successfully",
            201
        );
        response.setMessageAr("تم إنشاء الفئة بنجاح");

        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    /**
     * الحصول على فئة بواسطة ID
     * Get category by ID
     */
    @GetMapping("/{id}")
    @Operation(summary = "Get Category by ID", description = "الحصول على فئة بواسطة المعرف")
    public ResponseEntity<ApiResponse<CategoryResponse>> getCategoryById(
            @Parameter(description = "Category ID") @PathVariable UUID id) {

        return categoryService.findById(id)
                .map(category -> {
                    ApiResponse<CategoryResponse> response = ApiResponse.success(
                        category,
                        "Category retrieved successfully"
                    );
                    response.setMessageAr("تم استرجاع الفئة بنجاح");
                    return ResponseEntity.ok(response);
                })
                .orElse(ResponseEntity.notFound().build());
    }

    /**
     * الحصول على فئة بواسطة Slug
     * Get category by slug
     */
    @GetMapping("/slug/{slug}")
    @Operation(summary = "Get Category by Slug", description = "الحصول على فئة بواسطة الرابط الودي")
    public ResponseEntity<ApiResponse<CategoryResponse>> getCategoryBySlug(
            @Parameter(description = "Category Slug") @PathVariable String slug) {

        return categoryService.findBySlug(slug)
                .map(category -> {
                    ApiResponse<CategoryResponse> response = ApiResponse.success(
                        category,
                        "Category retrieved successfully"
                    );
                    response.setMessageAr("تم استرجاع الفئة بنجاح");
                    return ResponseEntity.ok(response);
                })
                .orElse(ResponseEntity.notFound().build());
    }

    /**
     * الحصول على جميع الفئات
     * Get all categories
     */
    @GetMapping
    @Operation(summary = "Get All Categories", description = "الحصول على جميع الفئات")
    public ResponseEntity<ApiResponse<PaginatedResponse<CategoryResponse>>> getAllCategories(
            @Parameter(description = "Page number") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "Page size") @RequestParam(defaultValue = "20") int size,
            @Parameter(description = "Sort by field") @RequestParam(defaultValue = "name") String sortBy,
            @Parameter(description = "Sort direction") @RequestParam(defaultValue = "asc") String sortDir) {

        Pageable pageable = PaginationUtils.createPageable(page, size, sortBy, sortDir);
        Page<CategoryResponse> categories = categoryService.getAllCategories(pageable);

        // استخدام static factory method
        PaginatedResponse<CategoryResponse> paginatedResponse = PaginatedResponse.from(categories);

        ApiResponse<PaginatedResponse<CategoryResponse>> response = ApiResponse.success(
            paginatedResponse,
            "Categories retrieved successfully"
        );
        response.setMessageAr("تم استرجاع الفئات بنجاح");

        return ResponseEntity.ok(response);
    }

    /**
     * الحصول على الفئات الرئيسية
     * Get parent categories
     */
    @GetMapping("/parents")
    @Operation(summary = "Get Parent Categories", description = "الحصول على الفئات الرئيسية")
    public ResponseEntity<ApiResponse<List<CategoryResponse>>> getParentCategories() {

        List<CategoryResponse> categories = categoryService.getParentCategories();
        ApiResponse<List<CategoryResponse>> response = ApiResponse.success(
            categories,
            "Parent categories retrieved successfully"
        );
        response.setMessageAr("تم استرجاع الفئات الرئيسية بنجاح");

        return ResponseEntity.ok(response);
    }

    /**
     * الحصول على الفئات الفرعية
     * Get child categories
     */
    @GetMapping("/{parentId}/children")
    @Operation(summary = "Get Child Categories", description = "الحصول على الفئات الفرعية")
    public ResponseEntity<ApiResponse<List<CategoryResponse>>> getChildCategories(
            @Parameter(description = "Parent Category ID") @PathVariable UUID parentId) {

        List<CategoryResponse> categories = categoryService.getChildCategories(parentId);
        ApiResponse<List<CategoryResponse>> response = ApiResponse.success(
            categories,
            "Child categories retrieved successfully"
        );
        response.setMessageAr("تم استرجاع الفئات الفرعية بنجاح");

        return ResponseEntity.ok(response);
    }

    /**
     * الحصول على شجرة الفئات
     * Get category tree
     */
    @GetMapping("/tree")
    @Operation(summary = "Get Category Tree", description = "الحصول على شجرة الفئات")
    public ResponseEntity<ApiResponse<CategoryTreeResponse>> getCategoryTree() {

        CategoryTreeResponse tree = categoryService.getCategoryTree();
        ApiResponse<CategoryTreeResponse> response = ApiResponse.success(
            tree,
            "Category tree retrieved successfully"
        );
        response.setMessageAr("تم استرجاع شجرة الفئات بنجاح");

        return ResponseEntity.ok(response);
    }

    /**
     * البحث في الفئات
     * Search categories
     */
    @GetMapping("/search")
    @Operation(summary = "Search Categories", description = "البحث في الفئات")
    public ResponseEntity<ApiResponse<PaginatedResponse<CategoryResponse>>> searchCategories(
            @Parameter(description = "Search query") @RequestParam String query,
            @Parameter(description = "Page number") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "Page size") @RequestParam(defaultValue = "20") int size,
            @Parameter(description = "Sort by field") @RequestParam(defaultValue = "name") String sortBy,
            @Parameter(description = "Sort direction") @RequestParam(defaultValue = "asc") String sortDir) {

        Pageable pageable = PaginationUtils.createPageable(page, size, sortBy, sortDir);
        Page<CategoryResponse> categories = categoryService.searchCategories(query, pageable);

        // استخدام static factory method
        PaginatedResponse<CategoryResponse> paginatedResponse = PaginatedResponse.from(categories);

        ApiResponse<PaginatedResponse<CategoryResponse>> response = ApiResponse.success(
            paginatedResponse,
            "Categories search completed successfully"
        );
        response.setMessageAr("تم البحث في الفئات بنجاح");

        return ResponseEntity.ok(response);
    }

    /**
     * تحديث فئة
     * Update category
     */
    @PutMapping("/{id}")
    @Operation(summary = "Update Category", description = "تحديث فئة")
    public ResponseEntity<ApiResponse<CategoryResponse>> updateCategory(
            @Parameter(description = "Category ID") @PathVariable UUID id,
            @Valid @RequestBody CreateCategoryRequest request) {

        CategoryResponse category = categoryService.updateCategory(id, request);
        ApiResponse<CategoryResponse> response = ApiResponse.success(
            category,
            "Category updated successfully"
        );
        response.setMessageAr("تم تحديث الفئة بنجاح");

        return ResponseEntity.ok(response);
    }

    /**
     * تفعيل فئة
     * Activate category
     */
    @PatchMapping("/{id}/activate")
    @Operation(summary = "Activate Category", description = "تفعيل فئة")
    public ResponseEntity<ApiResponse<CategoryResponse>> activateCategory(
            @Parameter(description = "Category ID") @PathVariable UUID id) {

        CategoryResponse category = categoryService.activateCategory(id);
        ApiResponse<CategoryResponse> response = ApiResponse.success(
            category,
            "Category activated successfully"
        );
        response.setMessageAr("تم تفعيل الفئة بنجاح");

        return ResponseEntity.ok(response);
    }

    /**
     * إلغاء تفعيل فئة
     * Deactivate category
     */
    @PatchMapping("/{id}/deactivate")
    @Operation(summary = "Deactivate Category", description = "إلغاء تفعيل فئة")
    public ResponseEntity<ApiResponse<CategoryResponse>> deactivateCategory(
            @Parameter(description = "Category ID") @PathVariable UUID id) {

        CategoryResponse category = categoryService.deactivateCategory(id);
        ApiResponse<CategoryResponse> response = ApiResponse.success(
            category,
            "Category deactivated successfully"
        );
        response.setMessageAr("تم إلغاء تفعيل الفئة بنجاح");

        return ResponseEntity.ok(response);
    }

    /**
     * حذف فئة
     * Delete category
     */
    @DeleteMapping("/{id}")
    @Operation(summary = "Delete Category", description = "حذف فئة")
    public ResponseEntity<ApiResponse<Void>> deleteCategory(
            @Parameter(description = "Category ID") @PathVariable UUID id) {

        categoryService.deleteCategory(id);
        ApiResponse<Void> response = ApiResponse.success(
            null,
            "Category deleted successfully"
        );
        response.setMessageAr("تم حذف الفئة بنجاح");

        return ResponseEntity.ok(response);
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/inventory/application/dto/InventoryMovementRequest.java ---- */

package com.ecommerce.multistore.inventory.application.dto;

public class InventoryMovementRequest {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/inventory/application/dto/InventoryMovementResponse.java ---- */

package com.ecommerce.multistore.inventory.application.dto;

public class InventoryMovementResponse {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/inventory/application/dto/StockUpdateRequest.java ---- */

package com.ecommerce.multistore.inventory.application.dto;

public class StockUpdateRequest {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/inventory/application/service/InventoryService.java ---- */

package com.ecommerce.multistore.inventory.application.service;

public class InventoryService {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/inventory/domain/InventoryMovement.java ---- */


/* =====================================================
 * وحدة المخزون - Inventory Module
 * =====================================================
 */

/* ---- File: src/main/java/com/ecommerce/multistore/inventory/domain/InventoryMovement.java ---- */

package com.ecommerce.multistore.inventory.domain;

import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * كيان حركة المخزون
 * Inventory Movement Entity
 */
@Entity
@Table(name = "inventory_movements")
public class InventoryMovement {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private UUID id;

    @Column(name = "display_id", unique = true)
    private String displayId;

    @Column(name = "product_id", nullable = false)
    private UUID productId;

    @Enumerated(EnumType.STRING)
    @Column(name = "movement_type", nullable = false)
    private MovementType movementType;

    @Column(nullable = false)
    private Integer quantity;

    @Column(name = "reference_type")
    private String referenceType;

    @Column(name = "reference_id")
    private UUID referenceId;

    @Column(columnDefinition = "TEXT")
    private String notes;

    @Column(name = "created_by")
    private UUID createdBy;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    // Constructors
    public InventoryMovement() {
        this.createdAt = LocalDateTime.now();
    }

    public InventoryMovement(UUID productId, MovementType movementType, Integer quantity) {
        this();
        this.productId = productId;
        this.movementType = movementType;
        this.quantity = quantity;
    }

    // Business Methods
    public boolean isInbound() {
        return movementType == MovementType.IN || movementType == MovementType.RELEASED;
    }

    public boolean isOutbound() {
        return movementType == MovementType.OUT || movementType == MovementType.RESERVED;
    }

    public Integer getEffectiveQuantity() {
        return isInbound() ? quantity : -quantity;
    }

    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }

    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }

    public UUID getProductId() { return productId; }
    public void setProductId(UUID productId) { this.productId = productId; }

    public MovementType getMovementType() { return movementType; }
    public void setMovementType(MovementType movementType) { this.movementType = movementType; }

    public Integer getQuantity() { return quantity; }
    public void setQuantity(Integer quantity) { this.quantity = quantity; }

    public String getReferenceType() { return referenceType; }
    public void setReferenceType(String referenceType) { this.referenceType = referenceType; }

    public UUID getReferenceId() { return referenceId; }
    public void setReferenceId(UUID referenceId) { this.referenceId = referenceId; }

    public String getNotes() { return notes; }
    public void setNotes(String notes) { this.notes = notes; }

    public UUID getCreatedBy() { return createdBy; }
    public void setCreatedBy(UUID createdBy) { this.createdBy = createdBy; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }

    /**
     * أنواع حركة المخزون
     * Movement Types
     */
    public enum MovementType {
        IN("دخول"),
        OUT("خروج"),
        ADJUSTMENT("تعديل"),
        RESERVED("محجوز"),
        RELEASED("محرر");

        private final String arabicName;

        MovementType(String arabicName) {
            this.arabicName = arabicName;
        }

        public String getArabicName() {
            return arabicName;
        }
    }
}




/* ---- File: src/main/java/com/ecommerce/multistore/inventory/infrastructure/InventoryMovementRepository.java ---- */

package com.ecommerce.multistore.inventory.infrastructure;

public class InventoryMovementRepository {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/inventory/infrastructure/web/InventoryController.java ---- */

package com.ecommerce.multistore.inventory.infrastructure.web;

public class InventoryController {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/MultiStoreBackendApplication.java ---- */


/* ---- File: src/main/java/com/ecommerce/multistore/MultiStoreBackendApplication.java ---- */

package com.ecommerce.multistore;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@SpringBootApplication
@EnableCaching
@EnableAsync
@EnableTransactionManagement
public class MultiStoreBackendApplication {

    public static void main(String[] args) {
        SpringApplication.run(MultiStoreBackendApplication.class, args);
    }
}




/* ---- File: src/main/java/com/ecommerce/multistore/order/application/dto/AddressDto.java ---- */

package com.ecommerce.multistore.order.application.dto;

import jakarta.validation.constraints.NotBlank;

/**
 * عنوان DTO
 * Address DTO
 */
public class AddressDto {
    
    @NotBlank(message = "First name is required")
    private String firstName;
    
    @NotBlank(message = "Last name is required")
    private String lastName;
    
    private String phone;
    
    @NotBlank(message = "Address line 1 is required")
    private String addressLine1;
    
    private String addressLine2;
    
    @NotBlank(message = "City is required")
    private String city;
    
    private String state;
    private String postalCode;
    private String country = "Yemen";
    
    // Getters and Setters
    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }
    
    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }
    
    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }
    
    public String getAddressLine1() { return addressLine1; }
    public void setAddressLine1(String addressLine1) { this.addressLine1 = addressLine1; }
    
    public String getAddressLine2() { return addressLine2; }
    public void setAddressLine2(String addressLine2) { this.addressLine2 = addressLine2; }
    
    public String getCity() { return city; }
    public void setCity(String city) { this.city = city; }
    
    public String getState() { return state; }
    public void setState(String state) { this.state = state; }
    
    public String getPostalCode() { return postalCode; }
    public void setPostalCode(String postalCode) { this.postalCode = postalCode; }
    
    public String getCountry() { return country; }
    public void setCountry(String country) { this.country = country; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/order/application/dto/CreateOrderRequest.java ---- */

package com.ecommerce.multistore.order.application.dto;

import jakarta.validation.constraints.*;
import java.math.BigDecimal;
import java.util.List;
import java.util.UUID;

/**
 * طلب إنشاء طلب جديد
 * Create order request DTO
 */
public class CreateOrderRequest {
    
    private UUID userId;
    
    @NotBlank(message = "Customer email is required")
    @Email(message = "Invalid email format")
    private String customerEmail;
    
    private String customerPhone;
    
    @NotBlank(message = "Customer name is required")
    private String customerName;
    
    @NotNull(message = "Shipping address is required")
    private AddressDto shippingAddress;
    
    private AddressDto billingAddress;
    
    @NotEmpty(message = "Order items cannot be empty")
    private List<OrderItemDto> items;
    
    private String shippingMethod;
    private String couponCode;
    private String notes;
    
    // Getters and Setters
    public UUID getUserId() { return userId; }
    public void setUserId(UUID userId) { this.userId = userId; }
    
    public String getCustomerEmail() { return customerEmail; }
    public void setCustomerEmail(String customerEmail) { this.customerEmail = customerEmail; }
    
    public String getCustomerPhone() { return customerPhone; }
    public void setCustomerPhone(String customerPhone) { this.customerPhone = customerPhone; }
    
    public String getCustomerName() { return customerName; }
    public void setCustomerName(String customerName) { this.customerName = customerName; }
    
    public AddressDto getShippingAddress() { return shippingAddress; }
    public void setShippingAddress(AddressDto shippingAddress) { this.shippingAddress = shippingAddress; }
    
    public AddressDto getBillingAddress() { return billingAddress; }
    public void setBillingAddress(AddressDto billingAddress) { this.billingAddress = billingAddress; }
    
    public List<OrderItemDto> getItems() { return items; }
    public void setItems(List<OrderItemDto> items) { this.items = items; }
    
    public String getShippingMethod() { return shippingMethod; }
    public void setShippingMethod(String shippingMethod) { this.shippingMethod = shippingMethod; }
    
    public String getCouponCode() { return couponCode; }
    public void setCouponCode(String couponCode) { this.couponCode = couponCode; }
    
    public String getNotes() { return notes; }
    public void setNotes(String notes) { this.notes = notes; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/order/application/dto/OrderItemDto.java ---- */

package com.ecommerce.multistore.order.application.dto;

import jakarta.validation.constraints.*;
import java.math.BigDecimal;
import java.util.UUID;

/**
 * عنصر الطلب DTO
 * Order item DTO
 */
public class OrderItemDto {
    
    @NotNull(message = "Product ID is required")
    private UUID productId;
    
    @NotBlank(message = "Product name is required")
    private String productName;
    
    private String productNameAr;
    private String productSku;
    
    @NotNull(message = "Quantity is required")
    @Min(value = 1, message = "Quantity must be at least 1")
    private Integer quantity;
    
    @NotNull(message = "Unit price is required")
    @DecimalMin(value = "0.0", inclusive = false, message = "Unit price must be greater than 0")
    private BigDecimal unitPrice;
    
    private String attributes;
    
    // Getters and Setters
    public UUID getProductId() { return productId; }
    public void setProductId(UUID productId) { this.productId = productId; }
    
    public String getProductName() { return productName; }
    public void setProductName(String productName) { this.productName = productName; }
    
    public String getProductNameAr() { return productNameAr; }
    public void setProductNameAr(String productNameAr) { this.productNameAr = productNameAr; }
    
    public String getProductSku() { return productSku; }
    public void setProductSku(String productSku) { this.productSku = productSku; }
    
    public Integer getQuantity() { return quantity; }
    public void setQuantity(Integer quantity) { this.quantity = quantity; }
    
    public BigDecimal getUnitPrice() { return unitPrice; }
    public void setUnitPrice(BigDecimal unitPrice) { this.unitPrice = unitPrice; }
    
    public String getAttributes() { return attributes; }
    public void setAttributes(String attributes) { this.attributes = attributes; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/order/application/dto/OrderItemResponse.java ---- */

package com.ecommerce.multistore.order.application.dto;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * استجابة عنصر الطلب
 * Order item response DTO
 */
public class OrderItemResponse {
    
    private UUID id;
    private String displayId;
    private UUID productId;
    private String productName;
    private String productNameAr;
    private String productSku;
    private Integer quantity;
    private BigDecimal unitPrice;
    private BigDecimal totalPrice;
    private String attributes;
    private LocalDateTime createdAt;
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public UUID getProductId() { return productId; }
    public void setProductId(UUID productId) { this.productId = productId; }
    
    public String getProductName() { return productName; }
    public void setProductName(String productName) { this.productName = productName; }
    
    public String getProductNameAr() { return productNameAr; }
    public void setProductNameAr(String productNameAr) { this.productNameAr = productNameAr; }
    
    public String getProductSku() { return productSku; }
    public void setProductSku(String productSku) { this.productSku = productSku; }
    
    public Integer getQuantity() { return quantity; }
    public void setQuantity(Integer quantity) { this.quantity = quantity; }
    
    public BigDecimal getUnitPrice() { return unitPrice; }
    public void setUnitPrice(BigDecimal unitPrice) { this.unitPrice = unitPrice; }
    
    public BigDecimal getTotalPrice() { return totalPrice; }
    public void setTotalPrice(BigDecimal totalPrice) { this.totalPrice = totalPrice; }
    
    public String getAttributes() { return attributes; }
    public void setAttributes(String attributes) { this.attributes = attributes; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/order/application/dto/OrderResponse.java ---- */

package com.ecommerce.multistore.order.application.dto;

import com.ecommerce.multistore.order.domain.OrderStatus;
import com.ecommerce.multistore.order.domain.PaymentStatus;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

/**
 * استجابة الطلب
 * Order response DTO
 */
public class OrderResponse {
    
    private UUID id;
    private String displayId;
    private String orderNumber;
    private UUID userId;
    private OrderStatus status;
    private PaymentStatus paymentStatus;
    private String customerEmail;
    private String customerPhone;
    private String customerName;
    private String shippingAddress;
    private String billingAddress;
    private BigDecimal subtotal;
    private BigDecimal taxAmount;
    private BigDecimal shippingAmount;
    private BigDecimal discountAmount;
    private BigDecimal totalAmount;
    private String shippingMethod;
    private String trackingNumber;
    private LocalDateTime shippedAt;
    private LocalDateTime deliveredAt;
    private String notes;
    private String couponCode;
    private String currency;
    private String onexQuoteId;
    private String onexInvoiceId;
    private String onexStatus;
    private LocalDateTime onexSyncedAt;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    
    private List<OrderItemResponse> items;
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public String getOrderNumber() { return orderNumber; }
    public void setOrderNumber(String orderNumber) { this.orderNumber = orderNumber; }
    
    public UUID getUserId() { return userId; }
    public void setUserId(UUID userId) { this.userId = userId; }
    
    public OrderStatus getStatus() { return status; }
    public void setStatus(OrderStatus status) { this.status = status; }
    
    public PaymentStatus getPaymentStatus() { return paymentStatus; }
    public void setPaymentStatus(PaymentStatus paymentStatus) { this.paymentStatus = paymentStatus; }
    
    public String getCustomerEmail() { return customerEmail; }
    public void setCustomerEmail(String customerEmail) { this.customerEmail = customerEmail; }
    
    public String getCustomerPhone() { return customerPhone; }
    public void setCustomerPhone(String customerPhone) { this.customerPhone = customerPhone; }
    
    public String getCustomerName() { return customerName; }
    public void setCustomerName(String customerName) { this.customerName = customerName; }
    
    public String getShippingAddress() { return shippingAddress; }
    public void setShippingAddress(String shippingAddress) { this.shippingAddress = shippingAddress; }
    
    public String getBillingAddress() { return billingAddress; }
    public void setBillingAddress(String billingAddress) { this.billingAddress = billingAddress; }
    
    public BigDecimal getSubtotal() { return subtotal; }
    public void setSubtotal(BigDecimal subtotal) { this.subtotal = subtotal; }
    
    public BigDecimal getTaxAmount() { return taxAmount; }
    public void setTaxAmount(BigDecimal taxAmount) { this.taxAmount = taxAmount; }
    
    public BigDecimal getShippingAmount() { return shippingAmount; }
    public void setShippingAmount(BigDecimal shippingAmount) { this.shippingAmount = shippingAmount; }
    
    public BigDecimal getDiscountAmount() { return discountAmount; }
    public void setDiscountAmount(BigDecimal discountAmount) { this.discountAmount = discountAmount; }
    
    public BigDecimal getTotalAmount() { return totalAmount; }
    public void setTotalAmount(BigDecimal totalAmount) { this.totalAmount = totalAmount; }
    
    public String getShippingMethod() { return shippingMethod; }
    public void setShippingMethod(String shippingMethod) { this.shippingMethod = shippingMethod; }
    
    public String getTrackingNumber() { return trackingNumber; }
    public void setTrackingNumber(String trackingNumber) { this.trackingNumber = trackingNumber; }
    
    public LocalDateTime getShippedAt() { return shippedAt; }
    public void setShippedAt(LocalDateTime shippedAt) { this.shippedAt = shippedAt; }
    
    public LocalDateTime getDeliveredAt() { return deliveredAt; }
    public void setDeliveredAt(LocalDateTime deliveredAt) { this.deliveredAt = deliveredAt; }
    
    public String getNotes() { return notes; }    public void setNotes(String notes) { this.notes = notes; }
    
    public String getCouponCode() { return couponCode; }
    public void setCouponCode(String couponCode) { this.couponCode = couponCode; }
    
    public String getCurrency() { return currency; }
    public void setCurrency(String currency) { this.currency = currency; }
    
    public String getOnexQuoteId() { return onexQuoteId; }
    public void setOnexQuoteId(String onexQuoteId) { this.onexQuoteId = onexQuoteId; }
    
    public String getOnexInvoiceId() { return onexInvoiceId; }
    public void setOnexInvoiceId(String onexInvoiceId) { this.onexInvoiceId = onexInvoiceId; }
    
    public String getOnexStatus() { return onexStatus; }
    public void setOnexStatus(String onexStatus) { this.onexStatus = onexStatus; }
    
    public LocalDateTime getOnexSyncedAt() { return onexSyncedAt; }
    public void setOnexSyncedAt(LocalDateTime onexSyncedAt) { this.onexSyncedAt = onexSyncedAt; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
    
    public List<OrderItemResponse> getItems() { return items; }
    public void setItems(List<OrderItemResponse> items) { this.items = items; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/order/application/service/OrderService.java ---- */

package com.ecommerce.multistore.order.application.service;

import com.ecommerce.multistore.order.application.dto.*;
import com.ecommerce.multistore.order.domain.*;
import com.ecommerce.multistore.order.infrastructure.OrderRepository;
import com.ecommerce.multistore.order.infrastructure.OrderItemRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * خدمة إدارة الطلبات
 * تحتوي على جميع العمليات المتعلقة بالطلبات
 * 
 * Order Management Service
 * Contains all order-related operations
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Service
@Transactional
public class OrderService {

    private final OrderRepository orderRepository;
    private final OrderItemRepository orderItemRepository;
    private final ObjectMapper objectMapper;

    /**
     * Constructor لحقن Dependencies
     * Constructor for dependency injection
     * 
     * @param orderRepository مستودع الطلبات
     * @param orderItemRepository مستودع عناصر الطلبات
     * @param objectMapper محول JSON
     */
    @Autowired
    public OrderService(OrderRepository orderRepository, 
                       OrderItemRepository orderItemRepository,
                       ObjectMapper objectMapper) {
        this.orderRepository = orderRepository;
        this.orderItemRepository = orderItemRepository;
        this.objectMapper = objectMapper;
    }

    /**
     * إنشاء طلب جديد
     * Creates a new order
     * 
     * @param request بيانات الطلب الجديد
     * @return OrderResponse الطلب المُنشأ
     * @throws IllegalArgumentException إذا كانت البيانات غير صحيحة
     */
    public OrderResponse createOrder(CreateOrderRequest request) {
        // التحقق من صحة البيانات
        validateOrderRequest(request);

        // إنشاء كائن الطلب
        Order order = buildOrderFromRequest(request);
        
        // حساب المبالغ
        calculateOrderAmounts(order, request.getItems());
        
        // حفظ الطلب
        Order savedOrder = orderRepository.save(order);
        
        // إنشاء عناصر الطلب
        List<OrderItem> orderItems = createOrderItems(savedOrder.getId(), request.getItems());
        orderItemRepository.saveAll(orderItems);
        
        // تحويل إلى Response وإرجاع النتيجة
        return convertToResponse(savedOrder, orderItems);
    }

    /**
     * البحث عن طلب بواسطة UUID
     * Finds an order by UUID
     * 
     * @param id المعرف الفريد للطلب
     * @return Optional<OrderResponse> الطلب إذا وُجد
     */
    @Transactional(readOnly = true)
    public Optional<OrderResponse> findById(UUID id) {
        return orderRepository.findById(id)
                .map(order -> {
                    List<OrderItem> items = orderItemRepository.findByOrderId(order.getId());
                    return convertToResponse(order, items);
                });
    }

    /**
     * البحث عن طلب بواسطة Display ID
     * Finds an order by display ID
     * 
     * @param displayId المعرف المعروض
     * @return Optional<OrderResponse> الطلب إذا وُجد
     */
    @Transactional(readOnly = true)
    public Optional<OrderResponse> findByDisplayId(String displayId) {
        return orderRepository.findByDisplayId(displayId)
                .map(order -> {
                    List<OrderItem> items = orderItemRepository.findByOrderId(order.getId());
                    return convertToResponse(order, items);
                });
    }

    /**
     * البحث عن طلب بواسطة رقم الطلب
     * Finds an order by order number
     * 
     * @param orderNumber رقم الطلب
     * @return Optional<OrderResponse> الطلب إذا وُجد
     */
    @Transactional(readOnly = true)
    public Optional<OrderResponse> findByOrderNumber(String orderNumber) {
        return orderRepository.findByOrderNumber(orderNumber)
                .map(order -> {
                    List<OrderItem> items = orderItemRepository.findByOrderId(order.getId());
                    return convertToResponse(order, items);
                });
    }

    /**
     * الحصول على جميع الطلبات مع الصفحات
     * Retrieves all orders with pagination
     * 
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @param sortBy الحقل المطلوب ترتيبه
     * @param sortDir اتجاه الترتيب
     * @return Page<OrderResponse> صفحة من الطلبات
     */
    @Transactional(readOnly = true)
    public Page<OrderResponse> getAllOrders(int page, int size, String sortBy, String sortDir) {
        Sort sort = sortDir.equalsIgnoreCase("desc") ? 
                   Sort.by(sortBy).descending() : 
                   Sort.by(sortBy).ascending();
        
        Pageable pageable = PageRequest.of(page, size, sort);
        
        return orderRepository.findAll(pageable)
                .map(order -> {
                    List<OrderItem> items = orderItemRepository.findByOrderId(order.getId());
                    return convertToResponse(order, items);
                });
    }

    /**
     * الحصول على طلبات المستخدم
     * Get user orders
     * 
     * @param userId معرف المستخدم
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return Page<OrderResponse> صفحة من طلبات المستخدم
     */
    @Transactional(readOnly = true)
    public Page<OrderResponse> getUserOrders(UUID userId, int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        return orderRepository.findByUserId(userId, pageable)
                .map(order -> {
                    List<OrderItem> items = orderItemRepository.findByOrderId(order.getId());
                    return convertToResponse(order, items);
                });
    }

    /**
     * البحث بواسطة الحالة
     * Find orders by status
     * 
     * @param status حالة الطلب
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return Page<OrderResponse> صفحة من الطلبات
     */
    @Transactional(readOnly = true)
    public Page<OrderResponse> getOrdersByStatus(OrderStatus status, int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        return orderRepository.findByStatus(status, pageable)
                .map(order -> {
                    List<OrderItem> items = orderItemRepository.findByOrderId(order.getId());
                    return convertToResponse(order, items);
                });
    }

    /**
     * تحديث حالة الطلب
     * Update order status
     * 
     * @param orderId معرف الطلب
     * @param newStatus الحالة الجديدة
     * @return OrderResponse الطلب المحدث
     * @throws IllegalArgumentException إذا لم يوجد الطلب
     */
    public OrderResponse updateOrderStatus(UUID orderId, OrderStatus newStatus) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Order not found with ID: " + orderId));

        order.setStatus(newStatus);
        order.setUpdatedAt(LocalDateTime.now());

        Order updatedOrder = orderRepository.save(order);
        List<OrderItem> items = orderItemRepository.findByOrderId(order.getId());
        
        return convertToResponse(updatedOrder, items);
    }

    /**
     * تحديث حالة الدفع
     * Update payment status
     * 
     * @param orderId معرف الطلب
     * @param paymentStatus حالة الدفع الجديدة
     * @return OrderResponse الطلب المحدث
     */
    public OrderResponse updatePaymentStatus(UUID orderId, PaymentStatus paymentStatus) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Order not found with ID: " + orderId));

        order.setPaymentStatus(paymentStatus);
        order.setUpdatedAt(LocalDateTime.now());

        // إذا تم الدفع وكانت الحالة pending، قم بتحديثها إلى confirmed
        if (paymentStatus == PaymentStatus.PAID && order.getStatus() == OrderStatus.PENDING) {
            order.setStatus(OrderStatus.CONFIRMED);
        }

        Order updatedOrder = orderRepository.save(order);
        List<OrderItem> items = orderItemRepository.findByOrderId(order.getId());
        
        return convertToResponse(updatedOrder, items);
    }

    /**
     * شحن الطلب
     * Ship order
     * 
     * @param orderId معرف الطلب
     * @param trackingNumber رقم التتبع
     * @return OrderResponse الطلب المحدث
     */
    public OrderResponse shipOrder(UUID orderId, String trackingNumber) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Order not found with ID: " + orderId));

        order.ship(trackingNumber);
        Order updatedOrder = orderRepository.save(order);
        List<OrderItem> items = orderItemRepository.findByOrderId(order.getId());
        
        return convertToResponse(updatedOrder, items);
    }

    /**
     * تسليم الطلب
     * Deliver order
     * 
     * @param orderId معرف الطلب
     * @return OrderResponse الطلب المحدث
     */
    public OrderResponse deliverOrder(UUID orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Order not found with ID: " + orderId));

        order.deliver();
        Order updatedOrder = orderRepository.save(order);
        List<OrderItem> items = orderItemRepository.findByOrderId(order.getId());
        
        return convertToResponse(updatedOrder, items);
    }

    /**
     * إلغاء الطلب
     * Cancel order
     * 
     * @param orderId معرف الطلب
     * @return OrderResponse الطلب المحدث
     */
    public OrderResponse cancelOrder(UUID orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Order not found with ID: " + orderId));

        if (!order.canBeCancelled()) {
            throw new IllegalStateException("Order cannot be cancelled in current state: " + order.getStatus());
        }

        order.setStatus(OrderStatus.CANCELLED);
        order.setUpdatedAt(LocalDateTime.now());

        Order updatedOrder = orderRepository.save(order);
        List<OrderItem> items = orderItemRepository.findByOrderId(order.getId());
        
        return convertToResponse(updatedOrder, items);
    }

    // ===============================
    // Private Helper Methods
    // ===============================

    /**
     * التحقق من صحة طلب الإنشاء
     * Validates create order request
     */
    private void validateOrderRequest(CreateOrderRequest request) {
        if (request.getItems() == null || request.getItems().isEmpty()) {
            throw new IllegalArgumentException("Order must contain at least one item");
        }

        for (OrderItemDto item : request.getItems()) {
            if (item.getQuantity() <= 0) {
                throw new IllegalArgumentException("Item quantity must be greater than 0");
            }
            if (item.getUnitPrice().compareTo(BigDecimal.ZERO) <= 0) {
                throw new IllegalArgumentException("Item price must be greater than 0");
            }
        }
    }

    /**
     * بناء كائن الطلب من الطلب
     * Builds Order entity from request
     */
    private Order buildOrderFromRequest(CreateOrderRequest request) {
        Order order = new Order();
        order.setUserId(request.getUserId());
        order.setCustomerEmail(request.getCustomerEmail());
        order.setCustomerPhone(request.getCustomerPhone());
        order.setCustomerName(request.getCustomerName());
        order.setShippingMethod(request.getShippingMethod());
        order.setCouponCode(request.getCouponCode());
        order.setNotes(request.getNotes());
        
        // تحويل العناوين إلى JSON
        try {
            order.setShippingAddress(objectMapper.writeValueAsString(request.getShippingAddress()));
            if (request.getBillingAddress() != null) {
                order.setBillingAddress(objectMapper.writeValueAsString(request.getBillingAddress()));
            }
        } catch (Exception e) {
            throw new IllegalArgumentException("Invalid address format", e);
        }
        
        return order;
    }

    /**
     * حساب مبالغ الطلب
     * Calculate order amounts
     */
    private void calculateOrderAmounts(Order order, List<OrderItemDto> items) {
        BigDecimal subtotal = items.stream()
                .map(item -> item.getUnitPrice().multiply(BigDecimal.valueOf(item.getQuantity())))
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        order.setSubtotal(subtotal);
        
        // حساب الضريبة (يمكن تحسينه لاحقاً)
        BigDecimal taxAmount = BigDecimal.ZERO;
        order.setTaxAmount(taxAmount);
        
        // حساب الشحن (يمكن تحسينه لاحقاً)
        BigDecimal shippingAmount = BigDecimal.valueOf(5000); // افتراضي 5000 ريال
        order.setShippingAmount(shippingAmount);
        
        // حساب الخصم (يمكن تحسينه لاحقاً)
        BigDecimal discountAmount = BigDecimal.ZERO;
        order.setDiscountAmount(discountAmount);
        
        // المجموع الكلي
        BigDecimal totalAmount = subtotal
                .add(taxAmount)
                .add(shippingAmount)
                .subtract(discountAmount);
        
        order.setTotalAmount(totalAmount);
    }

    /**
     * إنشاء عناصر الطلب
     * Create order items
     */
    private List<OrderItem> createOrderItems(UUID orderId, List<OrderItemDto> itemDtos) {
        return itemDtos.stream()
                .map(dto -> {
                    OrderItem item = new OrderItem();
                    item.setOrderId(orderId);
                    item.setProductId(dto.getProductId());
                    item.setProductName(dto.getProductName());
                    item.setProductNameAr(dto.getProductNameAr());
                    item.setProductSku(dto.getProductSku());
                    item.setQuantity(dto.getQuantity());
                    item.setUnitPrice(dto.getUnitPrice());
                    item.setTotalPrice(dto.getUnitPrice().multiply(BigDecimal.valueOf(dto.getQuantity())));
                    item.setAttributes(dto.getAttributes());
                    return item;
                })
                .collect(Collectors.toList());
    }

    /**
     * تحويل إلى Response
     * Convert to response
     */
    private OrderResponse convertToResponse(Order order, List<OrderItem> items) {
        OrderResponse response = new OrderResponse();
        response.setId(order.getId());
        response.setDisplayId(order.getDisplayId());
        response.setOrderNumber(order.getOrderNumber());
        response.setUserId(order.getUserId());
        response.setStatus(order.getStatus());
        response.setPaymentStatus(order.getPaymentStatus());
        response.setCustomerEmail(order.getCustomerEmail());
        response.setCustomerPhone(order.getCustomerPhone());
        response.setCustomerName(order.getCustomerName());
        response.setShippingAddress(order.getShippingAddress());
        response.setBillingAddress(order.getBillingAddress());
        response.setSubtotal(order.getSubtotal());
        response.setTaxAmount(order.getTaxAmount());
        response.setShippingAmount(order.getShippingAmount());
        response.setDiscountAmount(order.getDiscountAmount());
        response.setTotalAmount(order.getTotalAmount());
        response.setShippingMethod(order.getShippingMethod());
        response.setTrackingNumber(order.getTrackingNumber());
        response.setShippedAt(order.getShippedAt());
        response.setDeliveredAt(order.getDeliveredAt());
        response.setNotes(order.getNotes());
        response.setCouponCode(order.getCouponCode());
        response.setCurrency(order.getCurrency());
        response.setOnexQuoteId(order.getOnexQuoteId());
        response.setOnexInvoiceId(order.getOnexInvoiceId());
        response.setOnexStatus(order.getOnexStatus());
        response.setOnexSyncedAt(order.getOnexSyncedAt());
        response.setCreatedAt(order.getCreatedAt());
        response.setUpdatedAt(order.getUpdatedAt());
        
        // تحويل عناصر الطلب
        List<OrderItemResponse> itemResponses = items.stream()
                .map(this::convertItemToResponse)
                .collect(Collectors.toList());
        response.setItems(itemResponses);
        
        return response;
    }

    /**
     * تحويل عنصر الطلب إلى Response
     * Convert order item to response
     */
    private OrderItemResponse convertItemToResponse(OrderItem item) {
        OrderItemResponse response = new OrderItemResponse();
        response.setId(item.getId());
        response.setDisplayId(item.getDisplayId());
        response.setProductId(item.getProductId());
        response.setProductName(item.getProductName());
        response.setProductNameAr(item.getProductNameAr());
        response.setProductSku(item.getProductSku());
        response.setQuantity(item.getQuantity());
        response.setUnitPrice(item.getUnitPrice());
        response.setTotalPrice(item.getTotalPrice());
        response.setAttributes(item.getAttributes());
        response.setCreatedAt(item.getCreatedAt());
        return response;
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/order/domain/Order.java ---- */

package com.ecommerce.multistore.order.domain;

import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * كيان الطلب - يحتوي على جميع بيانات الطلب
 * Order Entity - Contains all order data
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Entity
@Table(name = "orders")
public class Order {
    
    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private UUID id;
    
    @Column(name = "display_id", unique = true)
    private String displayId;
    
    @Column(name = "order_number", unique = true, nullable = false)
    private String orderNumber;
    
    @Column(name = "user_id")
    private UUID userId;
    
    @Enumerated(EnumType.STRING)
    private OrderStatus status = OrderStatus.PENDING;
    
    @Enumerated(EnumType.STRING)
    @Column(name = "payment_status")
    private PaymentStatus paymentStatus = PaymentStatus.PENDING;
    
    @Column(name = "customer_email", nullable = false)
    private String customerEmail;
    
    @Column(name = "customer_phone")
    private String customerPhone;
    
    @Column(name = "customer_name", nullable = false)
    private String customerName;
    
    @Column(name = "shipping_address", columnDefinition = "jsonb", nullable = false)
    private String shippingAddress;
    
    @Column(name = "billing_address", columnDefinition = "jsonb")
    private String billingAddress;
    
    @Column(nullable = false, precision = 10, scale = 2)
    private BigDecimal subtotal;
    
    @Column(name = "tax_amount", precision = 10, scale = 2)
    private BigDecimal taxAmount = BigDecimal.ZERO;
    
    @Column(name = "shipping_amount", precision = 10, scale = 2)
    private BigDecimal shippingAmount = BigDecimal.ZERO;
    
    @Column(name = "discount_amount", precision = 10, scale = 2)
    private BigDecimal discountAmount = BigDecimal.ZERO;
    
    @Column(name = "total_amount", nullable = false, precision = 10, scale = 2)
    private BigDecimal totalAmount;
    
    @Column(name = "shipping_method")
    private String shippingMethod;
    
    @Column(name = "tracking_number")
    private String trackingNumber;
    
    @Column(name = "shipped_at")
    private LocalDateTime shippedAt;
    
    @Column(name = "delivered_at")
    private LocalDateTime deliveredAt;
    
    @Column(columnDefinition = "TEXT")
    private String notes;
    
    @Column(name = "coupon_code")
    private String couponCode;
    
    @Column(length = 3)
    private String currency = "YER";
    
    @Column(name = "onex_quote_id")
    private String onexQuoteId;
    
    @Column(name = "onex_invoice_id")
    private String onexInvoiceId;
    
    @Column(name = "onex_status")
    private String onexStatus;
    
    @Column(name = "onex_synced_at")
    private LocalDateTime onexSyncedAt;
    
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
    
    // Constructors
    public Order() {
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }
    
    // Business Methods
    public boolean canBeCancelled() {
        return status == OrderStatus.PENDING || status == OrderStatus.CONFIRMED;
    }
    
    public boolean isShippable() {
        return status == OrderStatus.PROCESSING && paymentStatus == PaymentStatus.PAID;
    }
    
    public void ship(String trackingNumber) {
        if (!isShippable()) {
            throw new IllegalStateException("Order cannot be shipped in current state");
        }
        this.status = OrderStatus.SHIPPED;
        this.trackingNumber = trackingNumber;
        this.shippedAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }
    
    public void deliver() {
        if (status != OrderStatus.SHIPPED) {
            throw new IllegalStateException("Order must be shipped before delivery");
        }
        this.status = OrderStatus.DELIVERED;
        this.deliveredAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public String getOrderNumber() { return orderNumber; }
    public void setOrderNumber(String orderNumber) { this.orderNumber = orderNumber; }
    
    public UUID getUserId() { return userId; }
    public void setUserId(UUID userId) { this.userId = userId; }
    
    public OrderStatus getStatus() { return status; }
    public void setStatus(OrderStatus status) { this.status = status; }
    
    public PaymentStatus getPaymentStatus() { return paymentStatus; }
    public void setPaymentStatus(PaymentStatus paymentStatus) { this.paymentStatus = paymentStatus; }
    
    public String getCustomerEmail() { return customerEmail; }
    public void setCustomerEmail(String customerEmail) { this.customerEmail = customerEmail; }
    
    public String getCustomerPhone() { return customerPhone; }
    public void setCustomerPhone(String customerPhone) { this.customerPhone = customerPhone; }
    
    public String getCustomerName() { return customerName; }
    public void setCustomerName(String customerName) { this.customerName = customerName; }
    
    public String getShippingAddress() { return shippingAddress; }
    public void setShippingAddress(String shippingAddress) { this.shippingAddress = shippingAddress; }
    
    public String getBillingAddress() { return billingAddress; }
    public void setBillingAddress(String billingAddress) { this.billingAddress = billingAddress; }
    
    public BigDecimal getSubtotal() { return subtotal; }
    public void setSubtotal(BigDecimal subtotal) { this.subtotal = subtotal; }
    
    public BigDecimal getTaxAmount() { return taxAmount; }
    public void setTaxAmount(BigDecimal taxAmount) { this.taxAmount = taxAmount; }
    
    public BigDecimal getShippingAmount() { return shippingAmount; }
    public void setShippingAmount(BigDecimal shippingAmount) { this.shippingAmount = shippingAmount; }
    
    public BigDecimal getDiscountAmount() { return discountAmount; }
    public void setDiscountAmount(BigDecimal discountAmount) { this.discountAmount = discountAmount; }
    
    public BigDecimal getTotalAmount() { return totalAmount; }
    public void setTotalAmount(BigDecimal totalAmount) { this.totalAmount = totalAmount; }
    
    public String getShippingMethod() { return shippingMethod; }
    public void setShippingMethod(String shippingMethod) { this.shippingMethod = shippingMethod; }
    
    public String getTrackingNumber() { return trackingNumber; }
    public void setTrackingNumber(String trackingNumber) { this.trackingNumber = trackingNumber; }
    
    public LocalDateTime getShippedAt() { return shippedAt; }
    public void setShippedAt(LocalDateTime shippedAt) { this.shippedAt = shippedAt; }
    
    public LocalDateTime getDeliveredAt() { return deliveredAt; }
    public void setDeliveredAt(LocalDateTime deliveredAt) { this.deliveredAt = deliveredAt; }
    
    public String getNotes() { return notes; }
    public void setNotes(String notes) { this.notes = notes; }
    
    public String getCouponCode() { return couponCode; }
    public void setCouponCode(String couponCode) { this.couponCode = couponCode; }
    
    public String getCurrency() { return currency; }
    public void setCurrency(String currency) { this.currency = currency; }
    
    public String getOnexQuoteId() { return onexQuoteId; }
    public void setOnexQuoteId(String onexQuoteId) { this.onexQuoteId = onexQuoteId; }
    
    public String getOnexInvoiceId() { return onexInvoiceId; }
    public void setOnexInvoiceId(String onexInvoiceId) { this.onexInvoiceId = onexInvoiceId; }
    
    public String getOnexStatus() { return onexStatus; }
    public void setOnexStatus(String onexStatus) { this.onexStatus = onexStatus; }
    
    public LocalDateTime getOnexSyncedAt() { return onexSyncedAt; }
    public void setOnexSyncedAt(LocalDateTime onexSyncedAt) { this.onexSyncedAt = onexSyncedAt; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/order/domain/OrderItem.java ---- */

package com.ecommerce.multistore.order.domain;

import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * عنصر الطلب - منتج واحد في الطلب
 * Order Item - Single product in an order
 */
@Entity
@Table(name = "order_items")
public class OrderItem {
    
    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private UUID id;
    
    @Column(name = "display_id", unique = true)
    private String displayId;
    
    @Column(name = "order_id", nullable = false)
    private UUID orderId;
    
    @Column(name = "product_id")
    private UUID productId;
    
    @Column(name = "product_name", nullable = false)
    private String productName;
    
    @Column(name = "product_name_ar")
    private String productNameAr;
    
    @Column(name = "product_sku")
    private String productSku;
    
    @Column(nullable = false)
    private Integer quantity;
    
    @Column(name = "unit_price", nullable = false, precision = 10, scale = 2)
    private BigDecimal unitPrice;
    
    @Column(name = "total_price", nullable = false, precision = 10, scale = 2)
    private BigDecimal totalPrice;
    
    @Column(columnDefinition = "jsonb")
    private String attributes;
    
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    // Constructors
    public OrderItem() {
        this.createdAt = LocalDateTime.now();
    }
    
    public OrderItem(UUID productId, String productName, Integer quantity, BigDecimal unitPrice) {
        this();
        this.productId = productId;
        this.productName = productName;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.totalPrice = unitPrice.multiply(BigDecimal.valueOf(quantity));
    }
    
    // Business Methods
    public void updateQuantity(Integer newQuantity) {
        this.quantity = newQuantity;
        this.totalPrice = this.unitPrice.multiply(BigDecimal.valueOf(newQuantity));
    }
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public UUID getOrderId() { return orderId; }
    public void setOrderId(UUID orderId) { this.orderId = orderId; }
    
    public UUID getProductId() { return productId; }
    public void setProductId(UUID productId) { this.productId = productId; }
    
    public String getProductName() { return productName; }
    public void setProductName(String productName) { this.productName = productName; }
    
    public String getProductNameAr() { return productNameAr; }
    public void setProductNameAr(String productNameAr) { this.productNameAr = productNameAr; }
    
    public String getProductSku() { return productSku; }
    public void setProductSku(String productSku) { this.productSku = productSku; }
    
    public Integer getQuantity() { return quantity; }
    public void setQuantity(Integer quantity) { this.quantity = quantity; }
    
    public BigDecimal getUnitPrice() { return unitPrice; }
    public void setUnitPrice(BigDecimal unitPrice) { this.unitPrice = unitPrice; }
    
    public BigDecimal getTotalPrice() { return totalPrice; }
    public void setTotalPrice(BigDecimal totalPrice) { this.totalPrice = totalPrice; }
    
    public String getAttributes() { return attributes; }
    public void setAttributes(String attributes) { this.attributes = attributes; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/order/domain/OrderStatus.java ---- */

package com.ecommerce.multistore.order.domain;

import com.fasterxml.jackson.annotation.JsonValue;

/**
 * حالات الطلب
 * Order status enum
 */
public enum OrderStatus {
    PENDING("pending"),
    CONFIRMED("confirmed"),
    PROCESSING("processing"),
    SHIPPED("shipped"),
    DELIVERED("delivered"),
    CANCELLED("cancelled"),
    REFUNDED("refunded");

    private final String value;

    OrderStatus(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
        return value;
    }

    public static OrderStatus fromValue(String value) {
        for (OrderStatus status : OrderStatus.values()) {
            if (status.value.equals(value)) {
                return status;
            }
        }
        throw new IllegalArgumentException("Unknown status: " + value);
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/order/domain/PaymentStatus.java ---- */

package com.ecommerce.multistore.order.domain;

import com.fasterxml.jackson.annotation.JsonValue;

/**
 * حالات الدفع
 * Payment status enum
 */
public enum PaymentStatus {
    PENDING("pending"),
    PAID("paid"),
    FAILED("failed"),
    REFUNDED("refunded"),
    PARTIALLY_REFUNDED("partially_refunded");

    private final String value;

    PaymentStatus(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
        return value;
    }

    public static PaymentStatus fromValue(String value) {
        for (PaymentStatus status : PaymentStatus.values()) {
            if (status.value.equals(value)) {
                return status;
            }
        }
        throw new IllegalArgumentException("Unknown payment status: " + value);
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/order/infrastructure/OrderItemRepository.java ---- */

package com.ecommerce.multistore.order.infrastructure;

import com.ecommerce.multistore.order.domain.OrderItem;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.UUID;

/**
 * مستودع عناصر الطلب
 * Order Item Repository
 */
@Repository
public interface OrderItemRepository extends JpaRepository<OrderItem, UUID> {
    
    List<OrderItem> findByOrderId(UUID orderId);
    void deleteByOrderId(UUID orderId);
}



/* ---- File: src/main/java/com/ecommerce/multistore/order/infrastructure/OrderRepository.java ---- */

package com.ecommerce.multistore.order.infrastructure;

import com.ecommerce.multistore.order.domain.Order;
import com.ecommerce.multistore.order.domain.OrderStatus;
import com.ecommerce.multistore.order.domain.PaymentStatus;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * مستودع الطلبات
 * Order Repository
 */
@Repository
public interface OrderRepository extends JpaRepository<Order, UUID> {
    
    Optional<Order> findByDisplayId(String displayId);
    Optional<Order> findByOrderNumber(String orderNumber);
    Page<Order> findByUserId(UUID userId, Pageable pageable);
    Page<Order> findByStatus(OrderStatus status, Pageable pageable);
    Page<Order> findByPaymentStatus(PaymentStatus paymentStatus, Pageable pageable);
    Page<Order> findByUserIdAndStatus(UUID userId, OrderStatus status, Pageable pageable);
    
    @Query("SELECT o FROM Order o WHERE o.customerEmail = :email ORDER BY o.createdAt DESC")
    Page<Order> findByCustomerEmail(@Param("email") String email, Pageable pageable);
    
    @Query("SELECT o FROM Order o WHERE o.createdAt BETWEEN :startDate AND :endDate")
    Page<Order> findByDateRange(@Param("startDate") LocalDateTime startDate, 
                               @Param("endDate") LocalDateTime endDate, Pageable pageable);
    
    List<Order> findByStatusAndShippedAtIsNull(OrderStatus status);
    
    @Query("SELECT COUNT(o) FROM Order o WHERE o.status = :status")
    long countByStatus(@Param("status") OrderStatus status);
    
    @Query("SELECT COUNT(o) FROM Order o WHERE o.paymentStatus = :paymentStatus")
    long countByPaymentStatus(@Param("paymentStatus") PaymentStatus paymentStatus);
}



/* ---- File: src/main/java/com/ecommerce/multistore/order/infrastructure/web/OrderController.java ---- */

package com.ecommerce.multistore.order.infrastructure.web;

import com.ecommerce.multistore.order.application.dto.CreateOrderRequest;
import com.ecommerce.multistore.order.application.dto.OrderResponse;
import com.ecommerce.multistore.order.application.service.OrderService;
import com.ecommerce.multistore.order.domain.OrderStatus;
import com.ecommerce.multistore.order.domain.PaymentStatus;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;
import java.util.UUID;

/**
 * وحدة التحكم في الطلبات - REST API
 * Order Controller - REST API for order management
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@RestController
@RequestMapping("/api/v1/orders")
@CrossOrigin(origins = "*")
public class OrderController {

    private final OrderService orderService;

    @Autowired
    public OrderController(OrderService orderService) {
        this.orderService = orderService;
    }

    /**
     * إنشاء طلب جديد
     * Create a new order
     * 
     * @param request بيانات الطلب الجديد
     * @return ResponseEntity<OrderResponse> الطلب المُنشأ أو رسالة خطأ
     * 
     * @apiNote POST /api/v1/orders
     * @since 1.0
     */
    @PostMapping
    public ResponseEntity<OrderResponse> createOrder(@Valid @RequestBody CreateOrderRequest request) {
        try {
            OrderResponse order = orderService.createOrder(request);
            return new ResponseEntity<>(order, HttpStatus.CREATED);
        } catch (IllegalArgumentException | IllegalStateException e) {
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * الحصول على جميع الطلبات مع الصفحات
     * Get all orders with pagination
     * 
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @param sortBy الحقل المطلوب ترتيبه
     * @param sortDir اتجاه الترتيب
     * @return ResponseEntity<Page<OrderResponse>> صفحة من الطلبات
     * 
     * @apiNote GET /api/v1/orders?page=0&size=10&sortBy=createdAt&sortDir=desc
     * @since 1.0
     */
    @GetMapping
    public ResponseEntity<Page<OrderResponse>> getAllOrders(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "createdAt") String sortBy,
            @RequestParam(defaultValue = "desc") String sortDir) {
        
        Page<OrderResponse> orders = orderService.getAllOrders(page, size, sortBy, sortDir);
        return new ResponseEntity<>(orders, HttpStatus.OK);
    }

    /**
     * البحث عن طلب بواسطة UUID
     * Find order by UUID
     * 
     * @param id المعرف الفريد للطلب
     * @return ResponseEntity<OrderResponse> الطلب أو 404
     * 
     * @apiNote GET /api/v1/orders/{id}
     * @since 1.0
     */
    @GetMapping("/{id}")
    public ResponseEntity<OrderResponse> getOrderById(@PathVariable UUID id) {
        Optional<OrderResponse> order = orderService.findById(id);
        return order.map(orderResponse -> new ResponseEntity<>(orderResponse, HttpStatus.OK))
                   .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * البحث عن طلب بواسطة Display ID
     * Find order by display ID
     * 
     * @param displayId المعرف المعروض
     * @return ResponseEntity<OrderResponse> الطلب أو 404
     * 
     * @apiNote GET /api/v1/orders/display/{displayId}
     * @since 1.0
     */
    @GetMapping("/display/{displayId}")
    public ResponseEntity<OrderResponse> getOrderByDisplayId(@PathVariable String displayId) {
        Optional<OrderResponse> order = orderService.findByDisplayId(displayId);
        return order.map(orderResponse -> new ResponseEntity<>(orderResponse, HttpStatus.OK))
                   .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * البحث عن طلب بواسطة رقم الطلب
     * Find order by order number
     * 
     * @param orderNumber رقم الطلب
     * @return ResponseEntity<OrderResponse> الطلب أو 404
     * 
     * @apiNote GET /api/v1/orders/number/{orderNumber}
     * @since 1.0
     */
    @GetMapping("/number/{orderNumber}")
    public ResponseEntity<OrderResponse> getOrderByNumber(@PathVariable String orderNumber) {
        Optional<OrderResponse> order = orderService.findByOrderNumber(orderNumber);
        return order.map(orderResponse -> new ResponseEntity<>(orderResponse, HttpStatus.OK))
                   .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * الحصول على طلبات المستخدم
     * Get user orders
     * 
     * @param userId معرف المستخدم
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return ResponseEntity<Page<OrderResponse>> صفحة من طلبات المستخدم
     * 
     * @apiNote GET /api/v1/orders/user/{userId}?page=0&size=10
     * @since 1.0
     */
    @GetMapping("/user/{userId}")
    public ResponseEntity<Page<OrderResponse>> getUserOrders(
            @PathVariable UUID userId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        
        Page<OrderResponse> orders = orderService.getUserOrders(userId, page, size);
        return new ResponseEntity<>(orders, HttpStatus.OK);
    }

    /**
     * البحث بواسطة الحالة
     * Find orders by status
     * 
     * @param status حالة الطلب
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return ResponseEntity     * @return ResponseEntity<Page<OrderResponse>> صفحة من الطلبات
     * 
     * @apiNote GET /api/v1/orders/status/{status}?page=0&size=10
     * @since 1.0
     */
    @GetMapping("/status/{status}")
    public ResponseEntity<Page<OrderResponse>> getOrdersByStatus(
            @PathVariable OrderStatus status,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        
        Page<OrderResponse> orders = orderService.getOrdersByStatus(status, page, size);
        return new ResponseEntity<>(orders, HttpStatus.OK);
    }

    /**
     * تحديث حالة الطلب
     * Update order status
     * 
     * @param id معرف الطلب
     * @param status الحالة الجديدة
     * @return ResponseEntity<OrderResponse> الطلب المحدث أو رسالة خطأ
     * 
     * @apiNote PUT /api/v1/orders/{id}/status?status=confirmed
     * @since 1.0
     */
    @PutMapping("/{id}/status")
    public ResponseEntity<OrderResponse> updateOrderStatus(
            @PathVariable UUID id,
            @RequestParam OrderStatus status) {
        try {
            OrderResponse order = orderService.updateOrderStatus(id, status);
            return new ResponseEntity<>(order, HttpStatus.OK);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        } catch (IllegalStateException e) {
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * تحديث حالة الدفع
     * Update payment status
     * 
     * @param id معرف الطلب
     * @param paymentStatus حالة الدفع الجديدة
     * @return ResponseEntity<OrderResponse> الطلب المحدث أو رسالة خطأ
     * 
     * @apiNote PUT /api/v1/orders/{id}/payment-status?paymentStatus=paid
     * @since 1.0
     */
    @PutMapping("/{id}/payment-status")
    public ResponseEntity<OrderResponse> updatePaymentStatus(
            @PathVariable UUID id,
            @RequestParam PaymentStatus paymentStatus) {
        try {
            OrderResponse order = orderService.updatePaymentStatus(id, paymentStatus);
            return new ResponseEntity<>(order, HttpStatus.OK);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        }
    }

    /**
     * شحن الطلب
     * Ship order
     * 
     * @param id معرف الطلب
     * @param trackingNumber رقم التتبع
     * @return ResponseEntity<OrderResponse> الطلب المحدث أو رسالة خطأ
     * 
     * @apiNote PUT /api/v1/orders/{id}/ship?trackingNumber=TRK123456
     * @since 1.0
     */
    @PutMapping("/{id}/ship")
    public ResponseEntity<OrderResponse> shipOrder(
            @PathVariable UUID id,
            @RequestParam String trackingNumber) {
        try {
            OrderResponse order = orderService.shipOrder(id, trackingNumber);
            return new ResponseEntity<>(order, HttpStatus.OK);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        } catch (IllegalStateException e) {
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * تسليم الطلب
     * Deliver order
     * 
     * @param id معرف الطلب
     * @return ResponseEntity<OrderResponse> الطلب المحدث أو رسالة خطأ
     * 
     * @apiNote PUT /api/v1/orders/{id}/deliver
     * @since 1.0
     */
    @PutMapping("/{id}/deliver")
    public ResponseEntity<OrderResponse> deliverOrder(@PathVariable UUID id) {
        try {
            OrderResponse order = orderService.deliverOrder(id);
            return new ResponseEntity<>(order, HttpStatus.OK);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        } catch (IllegalStateException e) {
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * إلغاء الطلب
     * Cancel order
     * 
     * @param id معرف الطلب
     * @return ResponseEntity<OrderResponse> الطلب المحدث أو رسالة خطأ
     * 
     * @apiNote PUT /api/v1/orders/{id}/cancel
     * @since 1.0
     */
    @PutMapping("/{id}/cancel")
    public ResponseEntity<OrderResponse> cancelOrder(@PathVariable UUID id) {
        try {
            OrderResponse order = orderService.cancelOrder(id);
            return new ResponseEntity<>(order, HttpStatus.OK);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        } catch (IllegalStateException e) {
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * فحص صحة نظام الطلبات
     * Order system health check
     * 
     * @return ResponseEntity<String> حالة النظام
     * 
     * @apiNote GET /api/v1/orders/health
     * @since 1.0
     */
    @GetMapping("/health")
    public ResponseEntity<String> health() {
        return new ResponseEntity<>("Order Service is running", HttpStatus.OK);
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/application/dto/CreatePaymentRequest.java ---- */

package com.ecommerce.multistore.payment.application.dto;

import com.ecommerce.multistore.payment.domain.PaymentMethod;
import jakarta.validation.constraints.*;
import java.math.BigDecimal;
import java.util.UUID;

/**
 * طلب إنشاء دفع جديد
 * Create payment request DTO
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
public class CreatePaymentRequest {
    
    @NotNull(message = "Order ID is required")
    private UUID orderId;
    
    @NotNull(message = "Payment method is required")
    private PaymentMethod paymentMethod;
    
    @NotNull(message = "Amount is required")
    @DecimalMin(value = "0.0", inclusive = false, message = "Amount must be greater than 0")
    @Digits(integer = 8, fraction = 2, message = "Amount format is invalid")
    private BigDecimal amount;
    
    @Size(max = 3, message = "Currency code cannot exceed 3 characters")
    private String currency = "YER";
    
    // للمحافظ الإلكترونية
    private String walletPhone;
    
    // للدفع النقدي عند التسليم
    private String deliveryAddress;
    
    // للتحويل البنكي
    private String bankReference;
    
    // معلومات إضافية
    private String notes;
    
    // Constructors
    public CreatePaymentRequest() {}
    
    public CreatePaymentRequest(UUID orderId, PaymentMethod paymentMethod, BigDecimal amount) {
        this.orderId = orderId;
        this.paymentMethod = paymentMethod;
        this.amount = amount;
    }
    
    // Getters and Setters
    public UUID getOrderId() { return orderId; }
    public void setOrderId(UUID orderId) { this.orderId = orderId; }
    
    public PaymentMethod getPaymentMethod() { return paymentMethod; }
    public void setPaymentMethod(PaymentMethod paymentMethod) { this.paymentMethod = paymentMethod; }
    
    public BigDecimal getAmount() { return amount; }
    public void setAmount(BigDecimal amount) { this.amount = amount; }
    
    public String getCurrency() { return currency; }
    public void setCurrency(String currency) { this.currency = currency; }
    
    public String getWalletPhone() { return walletPhone; }
    public void setWalletPhone(String walletPhone) { this.walletPhone = walletPhone; }
    
    public String getDeliveryAddress() { return deliveryAddress; }
    public void setDeliveryAddress(String deliveryAddress) { this.deliveryAddress = deliveryAddress; }
    
    public String getBankReference() { return bankReference; }
    public void setBankReference(String bankReference) { this.bankReference = bankReference; }
    
    public String getNotes() { return notes; }
    public void setNotes(String notes) { this.notes = notes; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/application/dto/PaymentResponse.java ---- */

package com.ecommerce.multistore.payment.application.dto;

import com.ecommerce.multistore.payment.domain.PaymentMethod;
import com.ecommerce.multistore.payment.domain.PaymentStatus;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * استجابة الدفع
 * Payment response DTO
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
public class PaymentResponse {
    
    private UUID id;
    private String displayId;
    private UUID orderId;
    private PaymentMethod paymentMethod;
    private String paymentGateway;
    private String transactionId;
    private String gatewayTransactionId;
    private BigDecimal amount;
    private String currency;
    private PaymentStatus status;
    private String gatewayResponse;
    private String failureReason;
    private LocalDateTime processedAt;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    
    // معلومات إضافية للواجهة
    private String paymentMethodDisplayName;
    private String statusDisplayName;
    private WalletTransactionResponse walletTransaction;
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id;    }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public UUID getOrderId() { return orderId; }
    public void setOrderId(UUID orderId) { this.orderId = orderId; }
    
    public PaymentMethod getPaymentMethod() { return paymentMethod; }
    public void setPaymentMethod(PaymentMethod paymentMethod) { this.paymentMethod = paymentMethod; }
    
    public String getPaymentGateway() { return paymentGateway; }
    public void setPaymentGateway(String paymentGateway) { this.paymentGateway = paymentGateway; }
    
    public String getTransactionId() { return transactionId; }
    public void setTransactionId(String transactionId) { this.transactionId = transactionId; }
    
    public String getGatewayTransactionId() { return gatewayTransactionId; }
    public void setGatewayTransactionId(String gatewayTransactionId) { this.gatewayTransactionId = gatewayTransactionId; }
    
    public BigDecimal getAmount() { return amount; }
    public void setAmount(BigDecimal amount) { this.amount = amount; }
    
    public String getCurrency() { return currency; }
    public void setCurrency(String currency) { this.currency = currency; }
    
    public PaymentStatus getStatus() { return status; }
    public void setStatus(PaymentStatus status) { this.status = status; }
    
    public String getGatewayResponse() { return gatewayResponse; }
    public void setGatewayResponse(String gatewayResponse) { this.gatewayResponse = gatewayResponse; }
    
    public String getFailureReason() { return failureReason; }
    public void setFailureReason(String failureReason) { this.failureReason = failureReason; }
    
    public LocalDateTime getProcessedAt() { return processedAt; }
    public void setProcessedAt(LocalDateTime processedAt) { this.processedAt = processedAt; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
    
    public String getPaymentMethodDisplayName() { return paymentMethodDisplayName; }
    public void setPaymentMethodDisplayName(String paymentMethodDisplayName) { this.paymentMethodDisplayName = paymentMethodDisplayName; }
    
    public String getStatusDisplayName() { return statusDisplayName; }
    public void setStatusDisplayName(String statusDisplayName) { this.statusDisplayName = statusDisplayName; }
    
    public WalletTransactionResponse getWalletTransaction() { return walletTransaction; }
    public void setWalletTransaction(WalletTransactionResponse walletTransaction) { this.walletTransaction = walletTransaction; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/application/dto/PaymentStatisticsResponse.java ---- */

package com.ecommerce.multistore.payment.application.dto;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

/**
 * إحصائيات المدفوعات
 * Payment statistics response DTO
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
public class PaymentStatisticsResponse {
    
    private long totalPayments;
    private long successfulPayments;
    private long failedPayments;
    private long pendingPayments;
    private BigDecimal totalAmount;
    private BigDecimal todayAmount;
    private Map<String, Long> methodStatistics;
    
    public PaymentStatisticsResponse() {
        this.methodStatistics = new HashMap<>();
        this.totalAmount = BigDecimal.ZERO;
        this.todayAmount = BigDecimal.ZERO;
    }
    
    // Helper method
    public void addMethodStatistic(String method, Long count) {
        this.methodStatistics.put(method, count);
    }
    
    // Getters and Setters
    public long getTotalPayments() { return totalPayments; }
    public void setTotalPayments(long totalPayments) { this.totalPayments = totalPayments; }
    
    public long getSuccessfulPayments() { return successfulPayments; }
    public void setSuccessfulPayments(long successfulPayments) { this.successfulPayments = successfulPayments; }
    
    public long getFailedPayments() { return failedPayments; }
    public void setFailedPayments(long failedPayments) { this.failedPayments = failedPayments; }
    
    public long getPendingPayments() { return pendingPayments; }
    public void setPendingPayments(long pendingPayments) { this.pendingPayments = pendingPayments; }
    
    public BigDecimal getTotalAmount() { return totalAmount; }
    public void setTotalAmount(BigDecimal totalAmount) { this.totalAmount = totalAmount; }
    
    public BigDecimal getTodayAmount() { return todayAmount; }
    public void setTodayAmount(BigDecimal todayAmount) { this.todayAmount = todayAmount; }
    
    public Map<String, Long> getMethodStatistics() { return methodStatistics; }
    public void setMethodStatistics(Map<String, Long> methodStatistics) { this.methodStatistics = methodStatistics; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/application/dto/WalletTransactionResponse.java ---- */

package com.ecommerce.multistore.payment.application.dto;

import com.ecommerce.multistore.payment.domain.WalletType;
import com.ecommerce.multistore.payment.domain.PaymentStatus;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * استجابة معاملة المحفظة الإلكترونية
 * Wallet transaction response DTO
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
public class WalletTransactionResponse {
    
    private UUID id;
    private String displayId;
    private UUID paymentId;
    private WalletType walletType;
    private String walletPhone;
    private String transactionReference;
    private String walletTransactionId;
    private BigDecimal amount;
    private BigDecimal fees;
    private PaymentStatus status;
    private String errorMessage;
    private LocalDateTime processedAt;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    
    // معلومات إضافية للواجهة
    private String walletTypeDisplayName;
    private String statusDisplayName;
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public UUID getPaymentId() { return paymentId; }
    public void setPaymentId(UUID paymentId) { this.paymentId = paymentId; }
    
    public WalletType getWalletType() { return walletType; }
    public void setWalletType(WalletType walletType) { this.walletType = walletType; }
    
    public String getWalletPhone() { return walletPhone; }
    public void setWalletPhone(String walletPhone) { this.walletPhone = walletPhone; }
    
    public String getTransactionReference() { return transactionReference; }
    public void setTransactionReference(String transactionReference) { this.transactionReference = transactionReference; }
    
    public String getWalletTransactionId() { return walletTransactionId; }
    public void setWalletTransactionId(String walletTransactionId) { this.walletTransactionId = walletTransactionId; }
    
    public BigDecimal getAmount() { return amount; }
    public void setAmount(BigDecimal amount) { this.amount = amount; }
    
    public BigDecimal getFees() { return fees; }
    public void setFees(BigDecimal fees) { this.fees = fees; }
    
    public PaymentStatus getStatus() { return status; }
    public void setStatus(PaymentStatus status) { this.status = status; }
    
    public String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(String errorMessage) { this.errorMessage = errorMessage; }
    
    public LocalDateTime getProcessedAt() { return processedAt; }
    public void setProcessedAt(LocalDateTime processedAt) { this.processedAt = processedAt; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
    
    public String getWalletTypeDisplayName() { return walletTypeDisplayName; }
    public void setWalletTypeDisplayName(String walletTypeDisplayName) { this.walletTypeDisplayName = walletTypeDisplayName; }
    
    public String getStatusDisplayName() { return statusDisplayName; }
    public void setStatusDisplayName(String statusDisplayName) { this.statusDisplayName = statusDisplayName; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/application/service/PaymentService.java ---- */

package com.ecommerce.multistore.payment.application.service;

import com.ecommerce.multistore.payment.application.dto.*;
import com.ecommerce.multistore.payment.domain.*;
import com.ecommerce.multistore.payment.infrastructure.PaymentRepository;
import com.ecommerce.multistore.payment.infrastructure.WalletTransactionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * خدمة إدارة المدفوعات
 * تحتوي على جميع العمليات المتعلقة بالمدفوعات والمحافظ الإلكترونية
 * 
 * Payment Management Service
 * Contains all payment and e-wallet related operations
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Service
@Transactional
public class PaymentService {

    private final PaymentRepository paymentRepository;
    private final WalletTransactionRepository walletTransactionRepository;
    private final WalletPaymentService walletPaymentService;

    /**
     * Constructor لحقن Dependencies
     * Constructor for dependency injection
     * 
     * @param paymentRepository مستودع المدفوعات
     * @param walletTransactionRepository مستودع معاملات المحافظ
     * @param walletPaymentService خدمة المحافظ الإلكترونية
     */
    @Autowired
    public PaymentService(PaymentRepository paymentRepository,
                         WalletTransactionRepository walletTransactionRepository,
                         WalletPaymentService walletPaymentService) {
        this.paymentRepository = paymentRepository;
        this.walletTransactionRepository = walletTransactionRepository;
        this.walletPaymentService = walletPaymentService;
    }

    /**
     * إنشاء دفع جديد
     * Creates a new payment
     * 
     * @param request بيانات الدفع الجديد
     * @return PaymentResponse الدفع المُنشأ
     * @throws IllegalArgumentException إذا كانت البيانات غير صحيحة
     */
    public PaymentResponse createPayment(CreatePaymentRequest request) {
        // التحقق من صحة البيانات
        validatePaymentRequest(request);

        // إنشاء كائن الدفع
        Payment payment = buildPaymentFromRequest(request);
        payment.setTransactionId(generateTransactionId());
        
        // حفظ الدفع
        Payment savedPayment = paymentRepository.save(payment);
        
        // معالجة الدفع حسب النوع
        PaymentResponse response = processPaymentByMethod(savedPayment, request);
        
        return response;
    }

    /**
     * البحث عن دفع بواسطة UUID
     * Finds a payment by UUID
     * 
     * @param id المعرف الفريد للدفع
     * @return Optional<PaymentResponse> الدفع إذا وُجد
     */
    @Transactional(readOnly = true)
    public Optional<PaymentResponse> findById(UUID id) {
        return paymentRepository.findById(id)
                .map(this::convertToResponse);
    }

    /**
     * البحث عن دفع بواسطة Display ID
     * Finds a payment by display ID
     * 
     * @param displayId المعرف المعروض
     * @return Optional<PaymentResponse> الدفع إذا وُجد
     */
    @Transactional(readOnly = true)
    public Optional<PaymentResponse> findByDisplayId(String displayId) {
        return paymentRepository.findByDisplayId(displayId)
                .map(this::convertToResponse);
    }

    /**
     * البحث عن دفع بواسطة رقم المعاملة
     * Finds a payment by transaction ID
     * 
     * @param transactionId رقم المعاملة
     * @return Optional<PaymentResponse> الدفع إذا وُجد
     */
    @Transactional(readOnly = true)
    public Optional<PaymentResponse> findByTransactionId(String transactionId) {
        return paymentRepository.findByTransactionId(transactionId)
                .map(this::convertToResponse);
    }

    /**
     * الحصول على مدفوعات الطلب
     * Get order payments
     * 
     * @param orderId معرف الطلب
     * @return List<PaymentResponse> قائمة بمدفوعات الطلب
     */
    @Transactional(readOnly = true)
    public List<PaymentResponse> getOrderPayments(UUID orderId) {
        return paymentRepository.findByOrderId(orderId)
                .stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    /**
     * الحصول على جميع المدفوعات مع الصفحات
     * Retrieves all payments with pagination
     * 
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @param sortBy الحقل المطلوب ترتيبه
     * @param sortDir اتجاه الترتيب
     * @return Page<PaymentResponse> صفحة من المدفوعات
     */
    @Transactional(readOnly = true)
    public Page<PaymentResponse> getAllPayments(int page, int size, String sortBy, String sortDir) {
        Sort sort = sortDir.equalsIgnoreCase("desc") ? 
                   Sort.by(sortBy).descending() : 
                   Sort.by(sortBy).ascending();
        
        Pageable pageable = PageRequest.of(page, size, sort);
        
        return paymentRepository.findAll(pageable)
                .map(this::convertToResponse);
    }

    /**
     * البحث بواسطة الحالة
     * Find payments by status
     * 
     * @param status حالة الدفع
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return Page<PaymentResponse> صفحة من المدفوعات
     */
    @Transactional(readOnly = true)
    public Page<PaymentResponse> getPaymentsByStatus(PaymentStatus status, int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        return paymentRepository.findByStatus(status, pageable)
                .map(this::convertToResponse);
    }

    /**
     * البحث بواسطة طريقة الدفع
     * Find payments by method
     * 
     * @param paymentMethod طريقة الدفع
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return Page<PaymentResponse> صفحة من المدفوعات
     */
    @Transactional(readOnly = true)
    public Page<PaymentResponse> getPaymentsByMethod(PaymentMethod paymentMethod, int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        return paymentRepository.findByPaymentMethod(paymentMethod, pageable)
                .map(this::convertToResponse);
    }

    /**
     * تأكيد الدفع
     * Confirm payment
     * 
     * @param paymentId معرف الدفع
     * @param gatewayTransactionId رقم معاملة البوابة
     * @return PaymentResponse الدفع المحدث
     */
    public PaymentResponse confirmPayment(UUID paymentId, String gatewayTransactionId) {
        Payment payment = paymentRepository.findById(paymentId)
                .orElseThrow(() -> new IllegalArgumentException("Payment not found with ID: " + paymentId));

        if (!payment.canBeProcessed()) {
            throw new IllegalStateException("Payment cannot be processed in current state: " + payment.getStatus());
        }

        payment.markAsCompleted(gatewayTransactionId);
        Payment updatedPayment = paymentRepository.save(payment);
        
        return convertToResponse(updatedPayment);
    }

    /**
     * رفض الدفع
     * Reject payment
     * 
     * @param paymentId معرف الدفع
     * @param reason سبب الرفض
     * @return PaymentResponse الدفع المحدث
     */
    public PaymentResponse rejectPayment(UUID paymentId, String reason) {
        Payment payment = paymentRepository.findById(paymentId)
                .orElseThrow(() -> new IllegalArgumentException("Payment not found with ID: " + paymentId));

        payment.markAsFailed(reason);
        Payment updatedPayment = paymentRepository.save(payment);
        
        return convertToResponse(updatedPayment);
    }

    /**
     * استرداد الدفع
     * Refund payment
     * 
     * @param paymentId معرف الدفع
     * @return PaymentResponse الدفع المحدث
     */
    public PaymentResponse refundPayment(UUID paymentId) {
        Payment payment = paymentRepository.findById(paymentId)
                .orElseThrow(() -> new IllegalArgumentException("Payment not found with ID: " + paymentId));

        if (!payment.isSuccessful()) {
            throw new IllegalStateException("Only successful payments can be refunded");
        }

        payment.markAsRefunded();
        Payment updatedPayment = paymentRepository.save(payment);
        
        return convertToResponse(updatedPayment);
    }

    /**
     * الحصول على إحصائيات المدفوعات
     * Get payment statistics
     * 
     * @return PaymentStatisticsResponse إحصائيات المدفوعات
     */
    @Transactional(readOnly = true)
    public PaymentStatisticsResponse getPaymentStatistics() {
        PaymentStatisticsResponse stats = new PaymentStatisticsResponse();
        
        // إحصائيات عامة
        stats.setTotalPayments(paymentRepository.count());
        stats.setSuccessfulPayments(paymentRepository.countByStatus(PaymentStatus.COMPLETED));
        stats.setFailedPayments(paymentRepository.countByStatus(PaymentStatus.FAILED));
        stats.setPendingPayments(paymentRepository.countByStatus(PaymentStatus.PENDING));
        
        // المبالغ
        stats.setTotalAmount(paymentRepository.sumSuccessfulPayments());
        
        // اليوم
        LocalDateTime startOfDay = LocalDateTime.now().withHour(0).withMinute(0).withSecond(0);
        LocalDateTime endOfDay = LocalDateTime.now().withHour(23).withMinute(59).withSecond(59);
        stats.setTodayAmount(paymentRepository.sumPaymentsByDateRange(startOfDay, endOfDay));
        
        // إحصائيات طرق الدفع
        for (PaymentMethod method : PaymentMethod.values()) {
            long count = paymentRepository.countByPaymentMethod(method);
            stats.addMethodStatistic(method.getValue(), count);
        }
        
        return stats;
    }

    // ===============================
    // Private Helper Methods
    // ===============================

    /**
     * التحقق من صحة طلب الدفع
     * Validates payment request
     */
    private void validatePaymentRequest(CreatePaymentRequest request) {
        if (request.getAmount().compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Payment amount must be greater than 0");
        }

        // التحقق من طريقة الدفع
        if (request.getPaymentMethod().isEWallet() && 
            (request.getWalletPhone() == null || request.getWalletPhone().trim().isEmpty())) {
            throw new IllegalArgumentException("Wallet phone is required for e-wallet payments");
        }

        // التحقق من رقم الهاتف للمحافظ الإلكترونية
        if (request.getPaymentMethod().isEWallet()) {
            WalletType walletType = WalletType.valueOf(request.getPaymentMethod().name());
            if (!walletType.supportsPhoneNumber(request.getWalletPhone())) {
                throw new IllegalArgumentException("Invalid phone number for " + walletType.getArabicName());
            }
        }
    }

    /**
     * بناء كائن الدفع من الطلب
     * Builds Payment entity from request
     */
    private Payment buildPaymentFromRequest(CreatePaymentRequest request) {
        Payment payment = new Payment();
        payment.setOrderId(request.getOrderId());
        payment.setPaymentMethod(request.getPaymentMethod());
        payment.setAmount(request.getAmount());
        payment.setCurrency(request.getCurrency());
        
        // تحديد البوابة حسب طريقة الدفع
        if (request.getPaymentMethod().isEWallet()) {
            payment.setPaymentGateway(request.getPaymentMethod().getValue() + "_gateway");
        }
        
        return payment;
    }

    /**
     * معالجة الدفع حسب النوع
     * Process payment by method
     */
    private PaymentResponse processPaymentByMethod(Payment payment, CreatePaymentRequest request) {
        switch (request.getPaymentMethod()) {
            case JEEB:
            case FLOUSI:
            case MOBILE_MONEY:
                return processWalletPayment(payment, request);
            case CASH_ON_DELIVERY:
                return processCashOnDeliveryPayment(payment);
            case BANK_TRANSFER:
                return processBankTransferPayment(payment, request);
            default:
                throw new IllegalArgumentException("Unsupported payment method: " + request.getPaymentMethod());
        }
    }

    /**
     * معالجة الدفع بالمحفظة الإلكترونية
     * Process wallet payment
     */
    private PaymentResponse processWalletPayment(Payment payment, CreatePaymentRequest request) {
        try {
            // إنشاء معاملة المحفظة
            WalletType walletType = WalletType.valueOf(request.getPaymentMethod().name());
            WalletTransaction walletTransaction = new WalletTransaction(
                payment.getId(), 
                walletType, 
                request.getWalletPhone(), 
                payment.getAmount()
            );
            
            walletTransaction.setTransactionReference(generateWalletTransactionReference());
            WalletTransaction savedWalletTransaction = walletTransactionRepository.save(walletTransaction);
            
            // معالجة الدفع مع الخدمة الخارجية
            walletPaymentService.processWalletPayment(savedWalletTransaction);
            
            // تحديث حالة الدفع
            payment.setStatus(PaymentStatus.PROCESSING);
            paymentRepository.save(payment);
            
            return convertToResponse(payment);
            
        } catch (Exception e) {
            payment.markAsFailed("Wallet payment processing failed: " + e.getMessage());
            paymentRepository.save(payment);
            throw new RuntimeException("Failed to process wallet payment", e);
        }
    }

    /**
     * معالجة الدفع النقدي عند التسليم
     * Process cash on delivery payment
     */
    private PaymentResponse processCashOnDeliveryPayment(Payment payment) {
        // الدفع النقدي يبقى في حالة pending حتى التسليم
        payment.setStatus(PaymentStatus.PENDING);
        paymentRepository.save(payment);
        
        return convertToResponse(payment);
    }

    /**
     * معالجة التحويل البنكي
     * Process bank transfer payment
     */
    private PaymentResponse processBankTransferPayment(Payment payment, CreatePaymentRequest request) {
        // التحويل البنكي يحتاج مراجعة يدوية
        payment.setStatus(PaymentStatus.PENDING);
        
        if (request.getBankReference() != null) {
            payment.setGatewayTransactionId(request.getBankReference());
        }
        
        paymentRepository.save(payment);
        return convertToResponse(payment);
    }

    /**
     * توليد رقم معاملة فريد
     * Generate unique transaction ID
     */
    private String generateTransactionId() {
        return "TXN-" + System.currentTimeMillis() + "-" + 
               (int)(Math.random() * 10000);
    }

    /**
     * توليد مرجع معاملة المحفظة
     * Generate wallet transaction reference
     */
    private String generateWalletTransactionReference() {
        return "WLT-" + System.currentTimeMillis() + "-" + 
               (int)(Math.random() * 10000);
    }

    /**
     * تحويل إلى Response
     * Convert to response
     */
    private PaymentResponse convertToResponse(Payment payment) {
        PaymentResponse response = new PaymentResponse();
        response.setId(payment.getId());
        response.setDisplayId(payment.getDisplayId());
        response.setOrderId(payment.getOrderId());
        response.setPaymentMethod(payment.getPaymentMethod());
        response.setPaymentGateway(payment.getPaymentGateway());
        response.setTransactionId(payment.getTransactionId());
        response.setGatewayTransactionId(payment.getGatewayTransactionId());
        response.setAmount(payment.getAmount());
        response.setCurrency(payment.getCurrency());
        response.setStatus(payment.getStatus());
        response.setGatewayResponse(payment.getGatewayResponse());
        response.setFailureReason(payment.getFailureReason());
        response.setProcessedAt(payment.getProcessedAt());
        response.setCreatedAt(payment.getCreatedAt());
        response.setUpdatedAt(payment.getUpdatedAt());
        
        // أسماء العرض
        response.setPaymentMethodDisplayName(getPaymentMethodDisplayName(payment.getPaymentMethod()));
        response.setStatusDisplayName(getPaymentStatusDisplayName(payment.getStatus()));
        
        // إضافة معاملة المحفظة إن وجدت
        if (payment.getPaymentMethod().isEWallet()) {
            walletTransactionRepository.findByPaymentId(payment.getId())
                    .ifPresent(walletTransaction -> {
                        response.setWalletTransaction(convertWalletTransactionToResponse(walletTransaction));
                    });
        }
        
        return response;
    }

    /**
     * تحويل معاملة المحفظة إلى Response
     * Convert wallet transaction to response
     */
    private WalletTransactionResponse convertWalletTransactionToResponse(WalletTransaction walletTransaction) {
        WalletTransactionResponse response = new WalletTransactionResponse();
        response.setId(walletTransaction.getId());
        response.setDisplayId(walletTransaction.getDisplayId());
        response.setPaymentId(walletTransaction.getPaymentId());
        response.setWalletType(walletTransaction.getWalletType());
        response.setWalletPhone(walletTransaction.getWalletPhone());
        response.setTransactionReference(walletTransaction.getTransactionReference());
        response.setWalletTransactionId(walletTransaction.getWalletTransactionId());
        response.setAmount(walletTransaction.getAmount());
        response.setFees(walletTransaction.getFees());
        response.setStatus(walletTransaction.getStatus());
        response.setErrorMessage(walletTransaction.getErrorMessage());
        response.setProcessedAt(walletTransaction.getProcessedAt());
        response.setCreatedAt(walletTransaction.getCreatedAt());
        response.setUpdatedAt(walletTransaction.getUpdatedAt());
        
        // أسماء العرض
        response.setWalletTypeDisplayName(walletTransaction.getWalletType().getArabicName());
        response.setStatusDisplayName(getPaymentStatusDisplayName(walletTransaction.getStatus()));
        
        return response;
    }

    /**
     * الحصول على اسم طريقة الدفع للعرض
     * Get payment method display name
     */
    private String getPaymentMethodDisplayName(PaymentMethod method) {
        switch (method) {
            case JEEB: return "جيب";
            case FLOUSI: return "فلوسي";
            case MOBILE_MONEY: return "موبايل موني";
            case CASH_ON_DELIVERY: return "الدفع عند التسليم";
            case BANK_TRANSFER: return "تحويل بنكي";
            default: return method.getValue();
        }
    }

    /**
     * الحصول على اسم حالة الدفع للعرض
     * Get payment status display name
     */
    private String getPaymentStatusDisplayName(PaymentStatus status) {
        switch (status) {
            case PENDING: return "في الانتظار";
            case PROCESSING: return "جاري المعالجة";
            case COMPLETED: return "مكتمل";
            case FAILED: return "فشل";
            case CANCELLED: return "ملغي";
            case REFUNDED: return "مسترد";
            default: return status.getValue();
        }
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/application/service/WalletPaymentService.java ---- */

package com.ecommerce.multistore.payment.application.service;

import com.ecommerce.multistore.payment.domain.WalletTransaction;
import com.ecommerce.multistore.payment.domain.PaymentStatus;
import com.ecommerce.multistore.payment.infrastructure.WalletTransactionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * خدمة المحافظ الإلكترونية
 * Wallet Payment Service
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
@Service
@Transactional
public class WalletPaymentService {

    private final WalletTransactionRepository walletTransactionRepository;

    @Autowired
    public WalletPaymentService(WalletTransactionRepository walletTransactionRepository) {
        this.walletTransactionRepository = walletTransactionRepository;
    }

    /**
     * معالجة الدفع بالمحفظة الإلكترونية
     * Process wallet payment
     * 
     * @param walletTransaction معاملة المحفظة
     */
    public void processWalletPayment(WalletTransaction walletTransaction) {
        try {
            // تحديث الحالة إلى "جاري المعالجة"
            walletTransaction.setStatus(PaymentStatus.PROCESSING);
            walletTransactionRepository.save(walletTransaction);

            // محاكاة استدعاء API الخارجي
            boolean success = callExternalWalletAPI(walletTransaction);

            if (success) {
                // نجح الدفع
                String walletTxnId = "WLT-" + System.currentTimeMillis();
                String responsePayload = createSuccessResponse(walletTxnId);                walletTransaction.markAsCompleted(walletTxnId, responsePayload);
            } else {
                // فشل الدفع
                walletTransaction.markAsFailed("Insufficient balance or transaction declined");
            }

            walletTransactionRepository.save(walletTransaction);

        } catch (Exception e) {
            walletTransaction.markAsFailed("Payment processing error: " + e.getMessage());
            walletTransactionRepository.save(walletTransaction);
            throw new RuntimeException("Failed to process wallet payment", e);
        }
    }

    /**
     * محاكاة استدعاء API خارجي للمحفظة
     * Simulate external wallet API call
     * 
     * @param walletTransaction معاملة المحفظة
     * @return boolean نجح أم فشل
     */
    private boolean callExternalWalletAPI(WalletTransaction walletTransaction) {
        // محاكاة - في التطبيق الحقيقي، سيتم استدعاء API الفعلي
        try {
            Thread.sleep(2000); // محاكاة وقت المعالجة
            
            // محاكاة نسبة نجاح 85%
            return Math.random() > 0.15;
            
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            return false;
        }
    }

    /**
     * إنشاء استجابة النجاح
     * Create success response
     */
    private String createSuccessResponse(String walletTxnId) {
        return String.format(
            "{\"status\":\"success\",\"transaction_id\":\"%s\",\"timestamp\":\"%s\"}",
            walletTxnId,
            java.time.LocalDateTime.now()
        );
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/domain/Payment.java ---- */

package com.ecommerce.multistore.payment.domain;

import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * كيان الدفع - يحتوي على جميع بيانات المدفوعات
 * Payment Entity - Contains all payment data
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Entity
@Table(name = "payments")
public class Payment {
    
    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private UUID id;
    
    @Column(name = "display_id", unique = true)
    private String displayId;
    
    @Column(name = "order_id", nullable = false)
    private UUID orderId;
    
    @Enumerated(EnumType.STRING)
    @Column(name = "payment_method", nullable = false)
    private PaymentMethod paymentMethod;
    
    @Column(name = "payment_gateway")
    private String paymentGateway;
    
    @Column(name = "transaction_id")
    private String transactionId;
    
    @Column(name = "gateway_transaction_id")
    private String gatewayTransactionId;
    
    @Column(nullable = false, precision = 10, scale = 2)
    private BigDecimal amount;
    
    @Column(length = 3)
    private String currency = "YER";
    
    @Enumerated(EnumType.STRING)
    private PaymentStatus status = PaymentStatus.PENDING;
    
    @Column(name = "gateway_response", columnDefinition = "jsonb")
    private String gatewayResponse;
    
    @Column(name = "failure_reason", columnDefinition = "TEXT")
    private String failureReason;
    
    @Column(name = "processed_at")
    private LocalDateTime processedAt;
    
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
    
    // Constructors
    public Payment() {
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }
    
    public Payment(UUID orderId, PaymentMethod paymentMethod, BigDecimal amount) {
        this();
        this.orderId = orderId;
        this.paymentMethod = paymentMethod;
        this.amount = amount;
    }
    
    // Business Methods
    public boolean canBeProcessed() {
        return status == PaymentStatus.PENDING;
    }
    
    public boolean isSuccessful() {
        return status == PaymentStatus.COMPLETED;
    }
    
    public void markAsCompleted(String gatewayTransactionId) {
        this.status = PaymentStatus.COMPLETED;
        this.gatewayTransactionId = gatewayTransactionId;
        this.processedAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }
    
    public void markAsFailed(String reason) {
        this.status = PaymentStatus.FAILED;
        this.failureReason = reason;
        this.processedAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }
    
    public void markAsRefunded() {
        this.status = PaymentStatus.REFUNDED;
        this.updatedAt = LocalDateTime.now();
    }
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public UUID getOrderId() { return orderId; }
    public void setOrderId(UUID orderId) { this.orderId = orderId; }
    
    public PaymentMethod getPaymentMethod() { return paymentMethod; }
    public void setPaymentMethod(PaymentMethod paymentMethod) { this.paymentMethod = paymentMethod; }
    
    public String getPaymentGateway() { return paymentGateway; }
    public void setPaymentGateway(String paymentGateway) { this.paymentGateway = paymentGateway; }
    
    public String getTransactionId() { return transactionId; }
    public void setTransactionId(String transactionId) { this.transactionId = transactionId; }
    
    public String getGatewayTransactionId() { return gatewayTransactionId; }
    public void setGatewayTransactionId(String gatewayTransactionId) { this.gatewayTransactionId = gatewayTransactionId; }
    
    public BigDecimal getAmount() { return amount; }
    public void setAmount(BigDecimal amount) { this.amount = amount; }
    
    public String getCurrency() { return currency; }
    public void setCurrency(String currency) { this.currency = currency; }
    
    public PaymentStatus getStatus() { return status; }
    public void setStatus(PaymentStatus status) { this.status = status; }
    
    public String getGatewayResponse() { return gatewayResponse; }
    public void setGatewayResponse(String gatewayResponse) { this.gatewayResponse = gatewayResponse; }
    
    public String getFailureReason() { return failureReason; }
    public void setFailureReason(String failureReason) { this.failureReason = failureReason; }
    
    public LocalDateTime getProcessedAt() { return processedAt; }
    public void setProcessedAt(LocalDateTime processedAt) { this.processedAt = processedAt; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/domain/PaymentMethod.java ---- */

package com.ecommerce.multistore.payment.domain;

import com.fasterxml.jackson.annotation.JsonValue;

/**
 * طرق الدفع المتاحة
 * Available payment methods
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
public enum PaymentMethod {
    JEEB("jeeb"),
    FLOUSI("flousi"),
    MOBILE_MONEY("mobile_money"),
    CASH_ON_DELIVERY("cash_on_delivery"),
    BANK_TRANSFER("bank_transfer");

    private final String value;

    PaymentMethod(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
        return value;
    }

    public static PaymentMethod fromValue(String value) {
        for (PaymentMethod method : PaymentMethod.values()) {
            if (method.value.equals(value)) {
                return method;
            }
        }
        throw new IllegalArgumentException("Unknown payment method: " + value);
    }
    
    /**
     * فحص إذا كانت طريقة الدفع إلكترونية
     * Check if payment method is electronic
     */
    public boolean isElectronic() {
        return this == JEEB || this == FLOUSI || this == MOBILE_MONEY || this == BANK_TRANSFER;
    }
    
    /**
     * فحص إذا كانت طريقة الدفع محفظة إلكترونية
     * Check if payment method is e-wallet
     */
    public boolean isEWallet() {
        return this == JEEB || this == FLOUSI || this == MOBILE_MONEY;
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/domain/PaymentStatus.java ---- */

package com.ecommerce.multistore.payment.domain;

import com.fasterxml.jackson.annotation.JsonValue;

/**
 * حالات الدفع
 * Payment status enum
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
public enum PaymentStatus {
    PENDING("pending"),
    PROCESSING("processing"),
    COMPLETED("completed"),
    FAILED("failed"),
    CANCELLED("cancelled"),
    REFUNDED("refunded");

    private final String value;

    PaymentStatus(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
        return value;
    }

    public static PaymentStatus fromValue(String value) {
        for (PaymentStatus status : PaymentStatus.values()) {
            if (status.value.equals(value)) {
                return status;
            }
        }
        throw new IllegalArgumentException("Unknown payment status: " + value);
    }
    
    /**
     * فحص إذا كانت الحالة نهائية
     * Check if status is final
     */
    public boolean isFinal() {
        return this == COMPLETED || this == FAILED || this == CANCELLED || this == REFUNDED;
    }
    
    /**
     * فحص إذا كانت الحالة ناجحة
     * Check if status is successful
     */
    public boolean isSuccessful() {
        return this == COMPLETED;
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/domain/WalletTransaction.java ---- */

package com.ecommerce.multistore.payment.domain;

import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * معاملة المحفظة الإلكترونية
 * Wallet Transaction Entity
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
@Entity
@Table(name = "wallet_transactions")
public class WalletTransaction {
    
    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private UUID id;
    
    @Column(name = "display_id", unique = true)
    private String displayId;
    
    @Column(name = "payment_id", nullable = false)
    private UUID paymentId;
    
    @Enumerated(EnumType.STRING)
    @Column(name = "wallet_type", nullable = false)
    private WalletType walletType;
    
    @Column(name = "wallet_phone", nullable = false)
    private String walletPhone;
    
    @Column(name = "transaction_reference")
    private String transactionReference;
    
    @Column(name = "wallet_transaction_id")
    private String walletTransactionId;
    
    @Column(nullable = false, precision = 10, scale = 2)
    private BigDecimal amount;
    
    @Column(precision = 10, scale = 2)
    private BigDecimal fees = BigDecimal.ZERO;
    
    @Enumerated(EnumType.STRING)
    private PaymentStatus status = PaymentStatus.PENDING;
    
    @Column(name = "request_payload", columnDefinition = "jsonb")
    private String requestPayload;
    
    @Column(name = "response_payload", columnDefinition = "jsonb")
    private String responsePayload;
    
    @Column(name = "error_message", columnDefinition = "TEXT")
    private String errorMessage;
    
    @Column(name = "processed_at")
    private LocalDateTime processedAt;
    
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
    
    // Constructors
    public WalletTransaction() {
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }
    
    public WalletTransaction(UUID paymentId, WalletType walletType, String walletPhone, BigDecimal amount) {
        this();
        this.paymentId = paymentId;
        this.walletType = walletType;
        this.walletPhone = walletPhone;
        this.amount = amount;
    }
    
    // Business Methods
    public void markAsCompleted(String walletTransactionId, String responsePayload) {
        this.status = PaymentStatus.COMPLETED;
        this.walletTransactionId = walletTransactionId;
        this.responsePayload = responsePayload;
        this.processedAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }
    
    public void markAsFailed(String errorMessage) {
        this.status = PaymentStatus.FAILED;
        this.errorMessage = errorMessage;
        this.processedAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public UUID getPaymentId() { return paymentId; }
    public void setPaymentId(UUID paymentId) { this.paymentId = paymentId; }
    
    public WalletType getWalletType() { return walletType; }
    public void setWalletType(WalletType walletType) { this.walletType = walletType; }
    
    public String getWalletPhone() { return walletPhone; }
    public void setWalletPhone(String walletPhone) { this.walletPhone = walletPhone; }
    
    public String getTransactionReference() { return transactionReference; }
    public void setTransactionReference(String transactionReference) { this.transactionReference = transactionReference; }
    
    public String getWalletTransactionId() { return walletTransactionId; }
    public void setWalletTransactionId(String walletTransactionId) { this.walletTransactionId = walletTransactionId; }
    
    public BigDecimal getAmount() { return amount; }
    public void setAmount(BigDecimal amount) { this.amount = amount; }
    
    public BigDecimal getFees() { return fees; }
    public void setFees(BigDecimal fees) { this.fees = fees; }
    
    public PaymentStatus getStatus() { return status; }
    public void setStatus(PaymentStatus status) { this.status = status; }
    
    public String getRequestPayload() { return requestPayload; }
    public void setRequestPayload(String requestPayload) { this.requestPayload = requestPayload; }
    
    public String getResponsePayload() { return responsePayload; }
    public void setResponsePayload(String responsePayload) { this.responsePayload = responsePayload; }
    
    public String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(String errorMessage) { this.errorMessage = errorMessage; }
    
    public LocalDateTime getProcessedAt() { return processedAt; }
    public void setProcessedAt(LocalDateTime processedAt) { this.processedAt = processedAt; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/domain/WalletType.java ---- */

package com.ecommerce.multistore.payment.domain;

import com.fasterxml.jackson.annotation.JsonValue;

/**
 * أنواع المحافظ الإلكترونية اليمنية
 * Yemeni E-Wallet Types
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
public enum WalletType {
    JEEB("jeeb"),
    FLOUSI("flousi"),
    MOBILE_MONEY("mobile_money");

    private final String value;

    WalletType(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
        return value;
    }

    public static WalletType fromValue(String value) {
        for (WalletType type : WalletType.values()) {
            if (type.value.equals(value)) {
                return type;
            }
        }
        throw new IllegalArgumentException("Unknown wallet type: " + value);
    }
    
    /**
     * الحصول على اسم المحفظة باللغة العربية
     * Get wallet name in Arabic
     */
    public String getArabicName() {
        switch (this) {
            case JEEB: return "جيب";
            case FLOUSI: return "فلوسي";
            case MOBILE_MONEY: return "موبايل موني";
            default: return this.value;
        }
    }
    
    /**
     * التحقق من أرقام الهواتف المدعومة
     * Check if phone number is supported
     */
    public boolean supportsPhoneNumber(String phoneNumber) {
        if (phoneNumber == null || phoneNumber.length() < 8) {
            return false;
        }
        
        // إزالة الأرقام غير الرقمية
        String cleanPhone = phoneNumber.replaceAll("[^0-9]", "");
        
        switch (this) {
            case JEEB:
                return cleanPhone.startsWith("77") && cleanPhone.length() == 9;
            case FLOUSI:
                return cleanPhone.startsWith("73") && cleanPhone.length() == 9;
            case MOBILE_MONEY:
                return (cleanPhone.startsWith("70") || cleanPhone.startsWith("71") || cleanPhone.startsWith("78")) 
                       && cleanPhone.length() == 9;
            default:
                return false;
        }
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/infrastructure/PaymentRepository.java ---- */

package com.ecommerce.multistore.payment.infrastructure;

import com.ecommerce.multistore.payment.domain.Payment;
import com.ecommerce.multistore.payment.domain.PaymentMethod;
import com.ecommerce.multistore.payment.domain.PaymentStatus;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * مستودع المدفوعات
 * Payment Repository
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
@Repository
public interface PaymentRepository extends JpaRepository<Payment, UUID> {
    
    /**
     * البحث بواسطة Display ID
     * Find by display ID
     */
    Optional<Payment> findByDisplayId(String displayId);
    
    /**
     * البحث بواسطة رقم المعاملة
     * Find by transaction ID
     */
    Optional<Payment> findByTransactionId(String transactionId);
    
    /**
     * البحث بواسطة رقم معاملة البوابة
     * Find by gateway transaction ID
     */
    Optional<Payment> findByGatewayTransactionId(String gatewayTransactionId);
    
    /**
     * البحث بواسطة معرف الطلب
     * Find by order ID
     */
    List<Payment> findByOrderId(UUID orderId);
    
    /**
     * البحث بواسطة الحالة
     * Find by status
     */
    Page<Payment> findByStatus(PaymentStatus status, Pageable pageable);
    
    /**
     * البحث بواسطة طريقة الدفع
     * Find by payment method
     */
    Page<Payment> findByPaymentMethod(PaymentMethod paymentMethod, Pageable pageable);
    
    /**
     * البحث بواسطة معرف الطلب والحالة
     * Find by order ID and status
     */
    Optional<Payment> findByOrderIdAndStatus(UUID orderId, PaymentStatus status);
    
    /**
     * البحث في نطاق تاريخي
     * Find by date range
     */
    @Query("SELECT p FROM Payment p WHERE p.createdAt BETWEEN :startDate AND :endDate")
    Page<Payment> findByDateRange(@Param("startDate") LocalDateTime startDate, 
                                 @Param("endDate") LocalDateTime endDate, Pageable pageable);
    
    /**
     * البحث في نطاق مبلغ
     * Find by amount range
     */
    @Query("SELECT p FROM Payment p WHERE p.amount BETWEEN :minAmount AND :maxAmount")
    Page<Payment> findByAmountRange(@Param("minAmount") BigDecimal minAmount, 
                                   @Param("maxAmount") BigDecimal maxAmount, Pageable pageable);
    
    /**
     * إحصائيات المدفوعات حسب الحالة
     * Payment statistics by status
     */
    @Query("SELECT COUNT(p) FROM Payment p WHERE p.status = :status")
    long countByStatus(@Param("status") PaymentStatus status);
    
    /**
     * إحصائيات المدفوعات حسب طريقة الدفع
     * Payment statistics by method
     */
    @Query("SELECT COUNT(p) FROM Payment p WHERE p.paymentMethod = :method")
    long countByPaymentMethod(@Param("method") PaymentMethod method);
    
    /**
     * مجموع المدفوعات الناجحة
     * Sum of successful payments
     */
    @Query("SELECT COALESCE(SUM(p.amount), 0) FROM Payment p WHERE p.status = 'COMPLETED'")
    BigDecimal sumSuccessfulPayments();
    
    /**
     * مجموع المدفوعات خلال فترة
     * Sum of payments in date range
     */
    @Query("SELECT COALESCE(SUM(p.amount), 0) FROM Payment p WHERE p.status = 'COMPLETED' AND p.createdAt BETWEEN :startDate AND :endDate")
    BigDecimal sumPaymentsByDateRange(@Param("startDate") LocalDateTime startDate, 
                                     @Param("endDate") LocalDateTime endDate);
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/infrastructure/WalletTransactionRepository.java ---- */

package com.ecommerce.multistore.payment.infrastructure;

import com.ecommerce.multistore.payment.domain.WalletTransaction;
import com.ecommerce.multistore.payment.domain.WalletType;
import com.ecommerce.multistore.payment.domain.PaymentStatus;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * مستودع معاملات المحافظ الإلكترونية
 * Wallet Transaction Repository
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
@Repository
public interface WalletTransactionRepository extends JpaRepository<WalletTransaction, UUID> {
    
    /**
     * البحث بواسطة Display ID
     * Find by display ID
     */
    Optional<WalletTransaction> findByDisplayId(String displayId);
    
    /**
     * البحث بواسطة معرف الدفع
     * Find by payment ID
     */
    Optional<WalletTransaction> findByPaymentId(UUID paymentId);
    
    /**
     * البحث بواسطة مرجع المعاملة
     * Find by transaction reference
     */
    Optional<WalletTransaction> findByTransactionReference(String transactionReference);
    
    /**
     * البحث بواسطة معرف معاملة المحفظة
     * Find by wallet transaction ID
     */
    Optional<WalletTransaction> findByWalletTransactionId(String walletTransactionId);
    
    /**
     * البحث بواسطة نوع المحفظة
     * Find by wallet type
     */
    Page<WalletTransaction> findByWalletType(WalletType walletType, Pageable pageable);
    
    /**
     * البحث بواسطة رقم الهاتف
     * Find by wallet phone
     */
    Page<WalletTransaction> findByWalletPhone(String walletPhone, Pageable pageable);
    
    /**
     * البحث بواسطة الحالة
     * Find by status
     */
    Page<WalletTransaction> findByStatus(PaymentStatus status, Pageable pageable);
    
    /**
     * البحث بواسطة نوع المحفظة والحالة
     * Find by wallet type and status
     */
    List<WalletTransaction> findByWalletTypeAndStatus(WalletType walletType, PaymentStatus status);
    
    /**
     * إحصائيات معاملات المحافظ حسب النوع
     * Wallet transaction statistics by type
     */
    @Query("SELECT COUNT(wt) FROM WalletTransaction wt WHERE wt.walletType = :walletType")
    long countByWalletType(@Param("walletType") WalletType walletType);
    
    /**
     * المعاملات المعلقة أكثر من ساعة
     * Pending transactions older than one hour
     */
    @Query("SELECT wt FROM WalletTransaction wt WHERE wt.status = 'PENDING' AND wt.createdAt < :cutoffTime")
    List<WalletTransaction> findPendingTransactionsOlderThan(@Param("cutoffTime") LocalDateTime cutoffTime);
}



/* ---- File: src/main/java/com/ecommerce/multistore/payment/infrastructure/web/PaymentController.java ---- */

package com.ecommerce.multistore.payment.infrastructure.web;

import com.ecommerce.multistore.payment.application.dto.*;
import com.ecommerce.multistore.payment.application.service.PaymentService;
import com.ecommerce.multistore.payment.domain.PaymentMethod;
import com.ecommerce.multistore.payment.domain.PaymentStatus;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * وحدة التحكم في المدفوعات - REST API
 * Payment Controller - REST API for payment management
 * 
 * يوفر APIs لإدارة المدفوعات والمحافظ الإلكترونية
 * Provides APIs for payment and e-wallet management
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@RestController
@RequestMapping("/api/v1/payments")
@CrossOrigin(origins = "*")
public class PaymentController {

    private final PaymentService paymentService;

    /**
     * Constructor لحقن PaymentService
     * Constructor for PaymentService dependency injection
     * 
     * @param paymentService خدمة المدفوعات
     */
    @Autowired
    public PaymentController(PaymentService paymentService) {
        this.paymentService = paymentService;
    }

    /**
     * إنشاء دفع جديد
     * Create a new payment
     * 
     * @param request بيانات الدفع الجديد
     * @return ResponseEntity<PaymentResponse> الدفع المُنشأ أو رسالة خطأ
     * 
     * @apiNote POST /api/v1/payments
     * @since 1.0
     */
    @PostMapping
    public ResponseEntity<PaymentResponse> createPayment(@Valid @RequestBody CreatePaymentRequest request) {
        try {
            PaymentResponse payment = paymentService.createPayment(request);
            return new ResponseEntity<>(payment, HttpStatus.CREATED);
        } catch (IllegalArgumentException | IllegalStateException e) {
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        } catch (RuntimeException e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * الحصول على جميع المدفوعات مع الصفحات
     * Get all payments with pagination
     * 
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @param sortBy الحقل المطلوب ترتيبه
     * @param sortDir اتجاه الترتيب
     * @return ResponseEntity<Page<PaymentResponse>> صفحة من المدفوعات
     * 
     * @apiNote GET /api/v1/payments?page=0&size=10&sortBy=createdAt&sortDir=desc
     * @since 1.0
     */
    @GetMapping
    public ResponseEntity<Page<PaymentResponse>> getAllPayments(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "createdAt") String sortBy,
            @RequestParam(defaultValue = "desc") String sortDir) {
        
        Page<PaymentResponse> payments = paymentService.getAllPayments(page, size, sortBy, sortDir);
        return new ResponseEntity<>(payments, HttpStatus.OK);
    }

    /**
     * البحث عن دفع بواسطة UUID
     * Find payment by UUID
     * 
     * @param id المعرف الفريد للدفع
     * @return ResponseEntity<PaymentResponse> الدفع أو 404
     * 
     * @apiNote GET /api/v1/payments/{id}
     * @since 1.0
     */
    @GetMapping("/{id}")
    public ResponseEntity<PaymentResponse> getPaymentById(@PathVariable UUID id) {
        Optional<PaymentResponse> payment = paymentService.findById(id);
        return payment.map(paymentResponse -> new ResponseEntity<>(paymentResponse, HttpStatus.OK))
                     .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * البحث عن دفع بواسطة Display ID
     * Find payment by display ID
     * 
     * @param displayId المعرف المعروض
     * @return ResponseEntity<PaymentResponse> الدفع أو 404
     * 
     * @apiNote GET /api/v1/payments/display/{displayId}
     * @since 1.0
     */
    @GetMapping("/display/{displayId}")
    public ResponseEntity<PaymentResponse> getPaymentByDisplayId(@PathVariable String displayId) {
        Optional<PaymentResponse> payment = paymentService.findByDisplayId(displayId);
        return payment.map(paymentResponse -> new ResponseEntity<>(paymentResponse, HttpStatus.OK))
                     .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * البحث عن دفع بواسطة رقم المعاملة
     * Find payment by transaction ID
     * 
     * @param transactionId رقم المعاملة
     * @return ResponseEntity<PaymentResponse> الدفع أو 404
     * 
     * @apiNote GET /api/v1/payments/transaction/{transactionId}
     * @since 1.0
     */
    @GetMapping("/transaction/{transactionId}")
    public ResponseEntity<PaymentResponse> getPaymentByTransactionId(@PathVariable String transactionId) {
        Optional<PaymentResponse> payment = paymentService.findByTransactionId(transactionId);
        return payment.map(paymentResponse -> new ResponseEntity<>(paymentResponse, HttpStatus.OK))
                     .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * الحصول على مدفوعات الطلب
     * Get order payments
     * 
     * @param orderId معرف الطلب
     * @return ResponseEntity<List<PaymentResponse>> قائمة بمدفوعات الطلب
     * 
     * @apiNote GET /api/v1/payments/order/{orderId}
     * @since 1.0
     */
    @GetMapping("/order/{orderId}")
    public ResponseEntity<List<PaymentResponse>> getOrderPayments(@PathVariable UUID orderId) {
        List<PaymentResponse> payments = paymentService.getOrderPayments(orderId);
        return new ResponseEntity<>(payments, HttpStatus.OK);
    }

    /**
     * البحث بواسطة الحالة
     * Find payments by status
     * 
     * @param status حالة الدفع
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return ResponseEntity<Page<PaymentResponse>> صفحة من المدفوعات
     * 
     * @apiNote GET /api/v1/payments/status/{status}?page=0&size=10
     * @since 1.0
     */
    @GetMapping("/status/{status}")
    public ResponseEntity<Page<PaymentResponse>> getPaymentsByStatus(
            @PathVariable PaymentStatus status,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        
        Page<PaymentResponse> payments = paymentService.getPaymentsByStatus(status, page, size);
        return new ResponseEntity<>(payments, HttpStatus.OK);
    }

    /**
     * البحث بواسطة طريقة الدفع
     * Find payments by method
     * 
     * @param paymentMethod طريقة الدفع
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return ResponseEntity<Page<PaymentResponse>> صفحة من المدفوعات
     * 
     * @apiNote GET /api/v1/payments/method/{paymentMethod}?page=0&size=10
     * @since 1.0
     */
    @GetMapping("/method/{paymentMethod}")
    public ResponseEntity<Page<PaymentResponse>> getPaymentsByMethod(
            @PathVariable PaymentMethod paymentMethod,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        
        Page<PaymentResponse> payments = paymentService.getPaymentsByMethod(paymentMethod, page, size);
        return new ResponseEntity<>(payments, HttpStatus.OK);
    }

    /**
     * تأكيد الدفع
     * Confirm payment
     * 
     * @param id معرف الدفع
     * @param gatewayTransactionId رقم معاملة البوابة
     * @return ResponseEntity<PaymentResponse> الدفع المحدث أو رسالة خطأ
     * 
     * @apiNote PUT /api/v1/payments/{id}/confirm?gatewayTransactionId=GTW123456
     * @since 1.0
     */
    @PutMapping("/{id}/confirm")
    public ResponseEntity<PaymentResponse> confirmPayment(
            @PathVariable UUID id,
            @RequestParam String gatewayTransactionId) {
        try {
            PaymentResponse payment = paymentService.confirmPayment(id, gatewayTransactionId);
            return new ResponseEntity<>(payment, HttpStatus.OK);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        } catch (IllegalStateException e) {
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * رفض الدفع
     * Reject payment
     * 
     * @param id معرف الدفع
     * @param reason سبب الرفض
     * @return ResponseEntity<PaymentResponse> الدفع المحدث أو رسالة خطأ
     * 
     * @apiNote PUT /api/v1/payments/{id}/reject?reason=Insufficient+funds
     * @since 1.0
     */
    @PutMapping("/{id}/reject")
    public ResponseEntity<PaymentResponse> rejectPayment(
            @PathVariable UUID id,
            @RequestParam String reason) {
        try {
            PaymentResponse payment = paymentService.rejectPayment(id, reason);
            return new ResponseEntity<>(payment, HttpStatus.OK);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        }
    }

    /**
     * استرداد الدفع
     * Refund payment
     * 
     * @param id معرف الدفع
     * @return ResponseEntity<PaymentResponse> الدفع المحدث أو رسالة خطأ
     * 
     * @apiNote PUT /api/v1/payments/{id}/refund
     * @since 1.0
     */
    @PutMapping("/{id}/refund")
    public ResponseEntity<PaymentResponse> refundPayment(@PathVariable UUID id) {
        try {
            PaymentResponse payment = paymentService.refundPayment(id);
            return new ResponseEntity<>(payment, HttpStatus.OK);
        } catch (IllegalArgumentException e) {
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        } catch (IllegalStateException e) {
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * الحصول على إحصائيات المدفوعات
     * Get payment statistics
     * 
     * @return ResponseEntity<PaymentStatisticsResponse> إحصائيات المدفوعات
     * 
     * @apiNote GET /api/v1/payments/statistics
     * @since 1.0
     */
    @GetMapping("/statistics")
    public ResponseEntity<PaymentStatisticsResponse> getPaymentStatistics() {
        PaymentStatisticsResponse statistics = paymentService.getPaymentStatistics();
        return new ResponseEntity<>(statistics, HttpStatus.OK);
    }

    /**
     * فحص صحة نظام المدفوعات
     * Payment system health check
     * 
     * @return ResponseEntity<String> حالة النظام
     * 
     * @apiNote GET /api/v1/payments/health
     * @since 1.0
     */
    @GetMapping("/health")
    public ResponseEntity<String> health() {
        return new ResponseEntity<>("Payment Service is running", HttpStatus.OK);
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/application/dto/BulkProductRequest.java ---- */

package com.ecommerce.multistore.product.application.dto;

public class BulkProductRequest {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/application/dto/CreateProductRequest.java ---- */

package com.ecommerce.multistore.product.application.dto;

import jakarta.validation.constraints.*;
import java.math.BigDecimal;
import java.util.UUID;

/**
 * طلب إنشاء منتج جديد
 * Create product request DTO
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
public class CreateProductRequest {
    
    /**
     * اسم المنتج (مطلوب)
     * Product name (required)
     */
    @NotBlank(message = "Product name is required")
    @Size(max = 255, message = "Product name cannot exceed 255 characters")
    private String name;
    
    /**
     * اسم المنتج بالعربية
     * Product name in Arabic
     */
    @Size(max = 255, message = "Arabic name cannot exceed 255 characters")
    private String nameAr;
    
    /**
     * رمز المنتج (مطلوب وفريد)
     * Product SKU (required and unique)
     */
    @NotBlank(message = "SKU is required")
    @Size(max = 100, message = "SKU cannot exceed 100 characters")
    private String sku;
    
    /**
     * الرابط الودود (سيتم توليده تلقائياً إذا لم يُحدد)
     * URL slug (auto-generated if not provided)
     */
    private String slug;
    
    /**
     * وصف المنتج
     * Product description
     */
    private String description;
    
    /**
     * وصف المنتج بالعربية
     * Product description in Arabic
     */
    private String descriptionAr;
    
    /**
     * وصف مختصر
     * Short description
     */
    private String shortDescription;
    
    /**
     * وصف مختصر بالعربية
     * Short description in Arabic
     */
    private String shortDescriptionAr;
    
    /**
     * سعر المنتج (مطلوب)
     * Product price (required)
     */
    @NotNull(message = "Price is required")
    @DecimalMin(value = "0.0", inclusive = false, message = "Price must be greater than 0")
    @Digits(integer = 8, fraction = 2, message = "Price format is invalid")
    private BigDecimal price;
    
    /**
     * سعر المقارنة
     * Compare price
     */
    @DecimalMin(value = "0.0", message = "Compare price cannot be negative")
    @Digits(integer = 8, fraction = 2, message = "Compare price format is invalid")
    private BigDecimal comparePrice;
    
    /**
     * سعر التكلفة
     * Cost price
     */
    @DecimalMin(value = "0.0", message = "Cost price cannot be negative")
    @Digits(integer = 8, fraction = 2, message = "Cost price format is invalid")
    private BigDecimal costPrice;
    
    /**
     * الوزن بالكيلوغرام
     * Weight in kilograms
     */
    @DecimalMin(value = "0.0", message = "Weight cannot be negative")
    private BigDecimal weight;
    
    /**
     * كمية المخزون
     * Stock quantity
     */
    @Min(value = 0, message = "Stock quantity cannot be negative")
    private Integer stockQuantity = 0;
    
    /**
     * الحد الأدنى للمخزون
     * Minimum stock level
     */
    @Min(value = 0, message = "Minimum stock level cannot be negative")
    private Integer minStockLevel = 5;
    
    /**
     * معرف الفئة
     * Category ID
     */
    private UUID categoryId;
    
    /**
     * معرف العلامة التجارية
     * Brand ID
     */
    private UUID brandId;
    
    /**
     * الباركود
     * Barcode
     */
    private String barcode;
    
    /**
     * تتبع المخزون
     * Track inventory
     */
    private Boolean trackInventory = true;
    
    /**
     * منتج نشط
     * Is active
     */
    private Boolean isActive = true;
    
    /**
     * منتج مميز
     * Is featured
     */
    private Boolean isFeatured = false;
    
    /**
     * منتج رقمي
     * Is digital
     */
    private Boolean isDigital = false;
    
    /**
     * يتطلب شحن
     * Requires shipping
     */
    private Boolean requiresShipping = true;
    
    /**
     * خصائص إضافية (JSON)
     * Additional attributes (JSON)
     */
    private String attributes;
    
    /**
     * العلامات
     * Tags
     */
    private String tags;
    
    // ===============================
    // Constructors
    // ===============================
    
    public CreateProductRequest() {}
    
    // ===============================
    // Getters and Setters
    // ===============================
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getNameAr() { return nameAr; }
    public void setNameAr(String nameAr) { this.nameAr = nameAr; }
    
    public String getSku() { return sku; }
    public void setSku(String sku) { this.sku = sku; }
    
    public String getSlug() { return slug; }
    public void setSlug(String slug) { this.slug = slug; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public String getDescriptionAr() { return descriptionAr; }
    public void setDescriptionAr(String descriptionAr) { this.descriptionAr = descriptionAr; }
    
    public String getShortDescription() { return shortDescription; }
    public void setShortDescription(String shortDescription) { this.shortDescription = shortDescription; }
    
    public String getShortDescriptionAr() { return shortDescriptionAr; }
    public void setShortDescriptionAr(String shortDescriptionAr) { this.shortDescriptionAr = shortDescriptionAr; }
    
    public BigDecimal getPrice() { return price; }
    public void setPrice(BigDecimal price) { this.price = price; }
    
    public BigDecimal getComparePrice() { return comparePrice; }
    public void setComparePrice(BigDecimal comparePrice) { this.comparePrice = comparePrice; }
    
    public BigDecimal getCostPrice() { return costPrice; }
    public void setCostPrice(BigDecimal costPrice) { this.costPrice = costPrice; }
    
    public BigDecimal getWeight() { return weight; }
    public void setWeight(BigDecimal weight) { this.weight = weight; }
    
    public Integer getStockQuantity() { return stockQuantity; }
    public void setStockQuantity(Integer stockQuantity) { this.stockQuantity = stockQuantity; }
    
    public Integer getMinStockLevel() { return minStockLevel; }
    public void setMinStockLevel(Integer minStockLevel) { this.minStockLevel = minStockLevel; }
    
    public UUID getCategoryId() { return categoryId; }
    public void setCategoryId(UUID categoryId) { this.categoryId = categoryId; }
    
    public UUID getBrandId() { return brandId; }
    public void setBrandId(UUID brandId) { this.brandId = brandId; }
    
    public String getBarcode() { return barcode; }
    public void setBarcode(String barcode) { this.barcode = barcode; }
    
    public Boolean getTrackInventory() { return trackInventory; }
    public void setTrackInventory(Boolean trackInventory) { this.trackInventory = trackInventory; }
    
    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }
    
    public Boolean getIsFeatured() { return isFeatured; }
    public void setIsFeatured(Boolean isFeatured) { this.isFeatured = isFeatured; }
    
    public Boolean getIsDigital() { return isDigital; }
    public void setIsDigital(Boolean isDigital) { this.isDigital = isDigital; }
    
    public Boolean getRequiresShipping() { return requiresShipping; }
    public void setRequiresShipping(Boolean requiresShipping) { this.requiresShipping = requiresShipping; }
    
    public String getAttributes() { return attributes; }
    public void setAttributes(String attributes) { this.attributes = attributes; }
    
    public String getTags() { return tags; }
    public void setTags(String tags) { this.tags = tags; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/application/dto/ProductFilterRequest.java ---- */

package com.ecommerce.multistore.product.application.dto;

public class ProductFilterRequest {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/application/dto/ProductImageRequest.java ---- */

package com.ecommerce.multistore.product.application.dto;

public class ProductImageRequest {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/application/dto/ProductImageResponse.java ---- */

package com.ecommerce.multistore.product.application.dto;

public class ProductImageResponse {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/application/dto/ProductListResponse.java ---- */

package com.ecommerce.multistore.product.application.dto;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import io.swagger.v3.oas.annotations.media.Schema;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

/**
 * استجابة قائمة المنتجات محسنة
 * Enhanced product list response
 * 
 * تحتوي على معلومات مبسطة ومحسنة لعرض المنتجات في القوائم
 * Contains simplified and enhanced information for displaying products in lists
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Schema(description = "استجابة قائمة المنتجات / Product list response")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ProductListResponse {
    
    /**
     * المعرف الفريد
     * Unique identifier
     */
    @Schema(description = "المعرف الفريد / Unique identifier")
    private UUID id;
    
    /**
     * المعرف المعروض
     * Display identifier
     */
    @Schema(description = "المعرف المعروض / Display identifier", example = "PRD-000001")
    private String displayId;
    
    /**
     * اسم المنتج
     * Product name
     */
    @Schema(description = "اسم المنتج / Product name", example = "Smart Watch Pro")
    private String name;
    
    /**
     * اسم المنتج بالعربية
     * Product name in Arabic
     */
    @Schema(description = "اسم المنتج بالعربية / Product name in Arabic", example = "ساعة ذكية برو")
    private String nameAr;
    
    /**
     * الرابط الودود
     * Friendly URL slug
     */
    @Schema(description = "الرابط الودود / Friendly URL slug", example = "smart-watch-pro")
    private String slug;
    
    /**
     * الوصف المختصر
     * Short description
     */
    @Schema(description = "الوصف المختصر / Short description")
    private String shortDescription;
    
    /**
     * الوصف المختصر بالعربية
     * Short description in Arabic
     */
    @Schema(description = "الوصف المختصر بالعربية / Short description in Arabic")
    private String shortDescriptionAr;
    
    /**
     * رمز المنتج
     * Product SKU
     */
    @Schema(description = "رمز المنتج / Product SKU", example = "SW-PRO-001")
    private String sku;
    
    /**
     * السعر الحالي
     * Current price
     */
    @Schema(description = "السعر الحالي / Current price", example = "299.99")
    private BigDecimal price;
    
    /**
     * سعر المقارنة
     * Compare price
     */
    @Schema(description = "سعر المقارنة / Compare price", example = "349.99")
    private BigDecimal comparePrice;
    
    /**
     * نسبة الخصم
     * Discount percentage
     */
    @Schema(description = "نسبة الخصم / Discount percentage", example = "15.5")
    private BigDecimal discountPercentage;
    
    /**
     * كمية المخزون
     * Stock quantity
     */
    @Schema(description = "كمية المخزون / Stock quantity", example = "50")
    private Integer stockQuantity;
    
    /**
     * الحد الأدنى للمخزون
     * Minimum stock level
     */
    @Schema(description = "الحد الأدنى للمخزون / Minimum stock level", example = "5")
    private Integer minStockLevel;
    
    /**
     * معرف الفئة
     * Category ID
     */
    @Schema(description = "معرف الفئة / Category ID")
    private UUID categoryId;
    
    /**
     * اسم الفئة
     * Category name
     */
    @Schema(description = "اسم الفئة / Category name", example = "Electronics")
    private String categoryName;
    
    /**
     * اسم الفئة بالعربية
     * Category name in Arabic
     */
    @Schema(description = "اسم الفئة بالعربية / Category name in Arabic", example = "إلكترونيات")
    private String categoryNameAr;
    
    /**
     * معرف العلامة التجارية
     * Brand ID
     */
    @Schema(description = "معرف العلامة التجارية / Brand ID")
    private UUID brandId;
    
    /**
     * اسم العلامة التجارية
     * Brand name
     */
    @Schema(description = "اسم العلامة التجارية / Brand name", example = "TechBrand")
    private String brandName;
    
    /**
     * اسم العلامة التجارية بالعربية
     * Brand name in Arabic
     */
    @Schema(description = "اسم العلامة التجارية بالعربية / Brand name in Arabic", example = "علامة تقنية")
    private String brandNameAr;
    
    /**
     * الصورة الرئيسية
     * Primary image
     */
    @Schema(description = "الصورة الرئيسية / Primary image")
    private String primaryImageUrl;
    
    /**
     * صور المنتج
     * Product images
     */
    @Schema(description = "صور المنتج / Product images")
    private List<ProductImageInfo> images;
    
    /**
     * العلامات
     * Tags
     */
    @Schema(description = "العلامات / Tags", example = "[\"smartwatch\", \"fitness\", \"health\"]")
    private List<String> tags;
    
    /**
     * الخصائص المعروضة
     * Displayed attributes
     */
    @Schema(description = "الخصائص المعروضة / Displayed attributes")
    private List<AttributeInfo> displayedAttributes;
    
    /**
     * حالة المنتج
     * Product status
     */
    @Schema(description = "حالة المنتج / Product status")
    private ProductStatus status;
    
    /**
     * إحصائيات المنتج
     * Product statistics
     */
    @Schema(description = "إحصائيات المنتج / Product statistics")
    private ProductStats stats;
    
    /**
     * تاريخ الإنشاء
     * Created date
     */
    @Schema(description = "تاريخ الإنشاء / Created date")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime createdAt;
    
    /**
     * تاريخ آخر تحديث
     * Last updated date
     */
    @Schema(description = "تاريخ آخر تحديث / Last updated date")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime updatedAt;
    
    // ===============================
    // Constructors
    // ===============================
    
    /**
     * Constructor افتراضي
     * Default constructor
     */
    public ProductListResponse() {}
    
    // ===============================
    // Builder Pattern
    // ===============================
    
    /**
     * بناء استجابة قائمة المنتجات
     * Build product list response
     * 
     * @return Builder
     */
    public static Builder builder() {
        return new Builder();
    }
    
    /**
     * فئة البناء لاستجابة قائمة المنتجات
     * Builder class for product list response
     */
    public static class Builder {
        private final ProductListResponse response;
        
        public Builder() {
            this.response = new ProductListResponse();
        }
        
        public Builder id(UUID id) {
            response.id = id;
            return this;
        }
        
        public Builder displayId(String displayId) {
            response.displayId = displayId;
            return this;
        }
        
        public Builder name(String name) {
            response.name = name;
            return this;
        }
        
        public Builder nameAr(String nameAr) {
            response.nameAr = nameAr;
            return this;
        }
        
        public Builder slug(String slug) {
            response.slug = slug;
            return this;
        }
        
        public Builder shortDescription(String shortDescription) {
            response.shortDescription = shortDescription;
            return this;
        }
        
        public Builder shortDescriptionAr(String shortDescriptionAr) {
            response.shortDescriptionAr = shortDescriptionAr;
            return this;
        }
        
        public Builder sku(String sku) {
            response.sku = sku;
            return this;
        }
        
        public Builder price(BigDecimal price) {
            response.price = price;
            return this;
        }
        
        public Builder comparePrice(BigDecimal comparePrice) {
            response.comparePrice = comparePrice;
            return this;
        }
        
        public Builder discountPercentage(BigDecimal discountPercentage) {
            response.discountPercentage = discountPercentage;
            return this;
        }
        
        public Builder stockQuantity(Integer stockQuantity) {
            response.stockQuantity = stockQuantity;
            return this;
        }
        
        public Builder minStockLevel(Integer minStockLevel) {
            response.minStockLevel = minStockLevel;
            return this;
        }
        
        public Builder category(UUID categoryId, String categoryName, String categoryNameAr) {
            response.categoryId = categoryId;
            response.categoryName = categoryName;
            response.categoryNameAr = categoryNameAr;
            return this;
        }
        
        public Builder brand(UUID brandId, String brandName, String brandNameAr) {
            response.brandId = brandId;
            response.brandName = brandName;
            response.brandNameAr = brandNameAr;
            return this;
        }
        
        public Builder primaryImageUrl(String primaryImageUrl) {
            response.primaryImageUrl = primaryImageUrl;
            return this;
        }
        
        public Builder images(List<ProductImageInfo> images) {
            response.images = images;
            return this;
        }
        
        public Builder tags(List<String> tags) {
            response.tags = tags;
            return this;
        }
        
        public Builder displayedAttributes(List<AttributeInfo> displayedAttributes) {
            response.displayedAttributes = displayedAttributes;
            return this;
        }
        
        public Builder status(ProductStatus status) {
            response.status = status;
            return this;
        }
        
        public Builder stats(ProductStats stats) {
            response.stats = stats;
            return this;
        }
        
        public Builder timestamps(LocalDateTime createdAt, LocalDateTime updatedAt) {
            response.createdAt = createdAt;
            response.updatedAt = updatedAt;
            return this;
        }
        
        public ProductListResponse build() {
            return response;
        }
    }
    
    // ===============================
    // Inner Classes
    // ===============================
    
    /**
     * معلومات صورة المنتج
     * Product image information
     */
    @Schema(description = "معلومات صورة المنتج / Product image information")
    public static class ProductImageInfo {
        
        /**
         * معرف الصورة
         * Image ID
         */
        @Schema(description = "معرف الصورة / Image ID")
        private UUID id;
        
        /**
         * رابط الصورة
         * Image URL
         */
        @Schema(description = "رابط الصورة / Image URL")
        private String imageUrl;
        
        /**
         * النص البديل
         * Alternative text
         */
        @Schema(description = "النص البديل / Alternative text")
        private String altText;
        
        /**
         * النص البديل بالعربية
         * Alternative text in Arabic
         */
        @Schema(description = "النص البديل بالعربية / Alternative text in Arabic")
        private String altTextAr;
        
        /**
         * ترتيب الصورة
         * Image sort order
         */
        @Schema(description = "ترتيب الصورة / Image sort order")
        private Integer sortOrder;
        
        /**
         * هل الصورة رئيسية
         * Is primary image
         */
        @Schema(description = "هل الصورة رئيسية / Is primary image")
        private Boolean isPrimary;
        
        // Constructors
        public ProductImageInfo() {}
        
        public ProductImageInfo(UUID id, String imageUrl, String altText, String altTextAr, 
                               Integer sortOrder, Boolean isPrimary) {
            this.id = id;
            this.imageUrl = imageUrl;
            this.altText = altText;
            this.altTextAr = altTextAr;
            this.sortOrder = sortOrder;
            this.isPrimary = isPrimary;
        }
        
        // Getters and Setters
        public UUID getId() { return id; }
        public void setId(UUID id) { this.id = id; }
        
        public String getImageUrl() { return imageUrl; }
        public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }
        
        public String getAltText() { return altText; }
        public void setAltText(String altText) { this.altText = altText; }
        
        public String getAltTextAr() { return altTextAr; }
        public void setAltTextAr(String altTextAr) { this.altTextAr = altTextAr; }
        
        public Integer getSortOrder() { return sortOrder; }
        public void setSortOrder(Integer sortOrder) { this.sortOrder = sortOrder; }
        
        public Boolean getIsPrimary() { return isPrimary; }
        public void setIsPrimary(Boolean isPrimary) { this.isPrimary = isPrimary; }
    }
    
    /**
     * معلومات الخاصية
     * Attribute information
     */
    @Schema(description = "معلومات الخاصية / Attribute information")
    public static class AttributeInfo {
        
        /**
         * اسم الخاصية
         * Attribute name
         */
        @Schema(description = "اسم الخاصية / Attribute name", example = "Color")
        private String name;
        
        /**
         * اسم الخاصية بالعربية
         * Attribute name in Arabic
         */
        @Schema(description = "اسم الخاصية بالعربية / Attribute name in Arabic", example = "اللون")
        private String nameAr;
        
        /**
         * قيمة الخاصية
         * Attribute value
         */
        @Schema(description = "قيمة الخاصية / Attribute value", example = "Black")
        private String value;
        
        /**
         * قيمة الخاصية بالعربية
         * Attribute value in Arabic
         */
        @Schema(description = "قيمة الخاصية بالعربية / Attribute value in Arabic", example = "أسود")
        private String valueAr;
        
        /**
         * نوع الخاصية
         * Attribute type
         */
        @Schema(description = "نوع الخاصية / Attribute type", example = "color")
        private String type;
        
        /**
         * هل الخاصية قابلة للبحث
         * Is searchable attribute
         */
        @Schema(description = "هل الخاصية قابلة للبحث / Is searchable attribute")
        private Boolean isSearchable;
        
        /**
         * هل الخاصية مرئية
         * Is visible attribute
         */
        @Schema(description = "هل الخاصية مرئية / Is visible attribute")
        private Boolean isVisible;
        
        // Constructors
        public AttributeInfo() {}
        
        public AttributeInfo(String name, String nameAr, String value, String valueAr, 
                           String type, Boolean isSearchable, Boolean isVisible) {
            this.name = name;
            this.nameAr = nameAr;
            this.value = value;
            this.valueAr = valueAr;
            this.type = type;
            this.isSearchable = isSearchable;
            this.isVisible = isVisible;
        }
        
        // Getters and Setters
        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
        
        public String getNameAr() { return nameAr; }
        public void setNameAr(String nameAr) { this.nameAr = nameAr; }
        
        public String getValue() { return value; }
        public void setValue(String value) { this.value = value; }
        
        public String getValueAr() { return valueAr; }
        public void setValueAr(String valueAr) { this.valueAr = valueAr; }
        
        public String getType() { return type; }
        public void setType(String type) { this.type = type; }
        
        public Boolean getIsSearchable() { return isSearchable; }
        public void setIsSearchable(Boolean isSearchable) { this.isSearchable = isSearchable; }
        
        public Boolean getIsVisible() { return isVisible; }
        public void setIsVisible(Boolean isVisible) { this.isVisible = isVisible; }
    }
    
    /**
     * حالة المنتج
     * Product status
     */
    @Schema(description = "حالة المنتج / Product status")
    public static class ProductStatus {
        
        /**
         * هل المنتج نشط
         * Is product active
         */
        @Schema(description = "هل المنتج نشط / Is product active")
        private Boolean isActive;
        
        /**
         * هل المنتج مميز
         * Is product featured
         */
        @Schema(description = "هل المنتج مميز / Is product featured")
        private Boolean isFeatured;
        
        /**
         * هل المنتج متوفر
         * Is product available
         */
        @Schema(description = "هل المنتج متوفر / Is product available")
        private Boolean isAvailable;
        
        /**
         * هل المخزون منخفض
         * Is stock low
         */
        @Schema(description = "هل المخزون منخفض / Is stock low")
        private Boolean isLowStock;
        
        /**
         * هل المنتج غير متوفر
         * Is product out of stock
         */
        @Schema(description = "هل المنتج غير متوفر / Is product out of stock")
        private Boolean isOutOfStock;
        
        /**
         * هل المنتج رقمي
         * Is digital product
         */
        @Schema(description = "هل المنتج رقمي / Is digital product")
        private Boolean isDigital;
        
        /**
         * هل يتطلب شحن
         * Requires shipping
         */
        @Schema(description = "هل يتطلب شحن / Requires shipping")
        private Boolean requiresShipping;
        
        /**
         * حالة المنتج النصية
         * Product status text
         */
        @Schema(description = "حالة المنتج النصية / Product status text")
        private String statusText;
        
        /**
         * حالة المنتج النصية بالعربية
         * Product status text in Arabic
         */
        @Schema(description = "حالة المنتج النصية بالعربية / Product status text in Arabic")
        private String statusTextAr;
        
        /**
         * لون الحالة
         * Status color
         */
        @Schema(description = "لون الحالة / Status color", example = "green")
        private String statusColor;
        
        // Constructors
        public ProductStatus() {}
        
        // Builder pattern
        public static Builder builder() {
            return new Builder();
        }
        
        public static class Builder {
            private final ProductStatus status;
            
            public Builder() {
                this.status = new ProductStatus();
            }
            
            public Builder isActive(Boolean isActive) {
                status.isActive = isActive;
                return this;
            }
            
            public Builder isFeatured(Boolean isFeatured) {
                status.isFeatured = isFeatured;
                return this;
            }
            
            public Builder isAvailable(Boolean isAvailable) {
                status.isAvailable = isAvailable;
                return this;
            }
            
            public Builder isLowStock(Boolean isLowStock) {
                status.isLowStock = isLowStock;
                return this;
            }
            
            public Builder isOutOfStock(Boolean isOutOfStock) {
                status.isOutOfStock = isOutOfStock;
                return this;
            }
            
            public Builder isDigital(Boolean isDigital) {
                status.isDigital = isDigital;
                return this;
            }
            
            public Builder requiresShipping(Boolean requiresShipping) {
                status.requiresShipping = requiresShipping;
                return this;
            }
            
            public Builder statusText(String statusText, String statusTextAr) {
                status.statusText = statusText;
                status.statusTextAr = statusTextAr;
                return this;
            }
            
            public Builder statusColor(String statusColor) {
                status.statusColor = statusColor;
                return this;
            }
            
            public ProductStatus build() {
                return status;
            }
        }
        
        // Getters and Setters
        public Boolean getIsActive() { return isActive; }
        public void setIsActive(Boolean isActive) { this.isActive = isActive; }
        
        public Boolean getIsFeatured() { return isFeatured; }
        public void setIsFeatured(Boolean isFeatured) { this.isFeatured = isFeatured; }
        
        public Boolean getIsAvailable() { return isAvailable; }
        public void setIsAvailable(Boolean isAvailable) { this.isAvailable = isAvailable; }
        
        public Boolean getIsLowStock() { return isLowStock; }
        public void setIsLowStock(Boolean isLowStock) { this.isLowStock = isLowStock; }
        
        public Boolean getIsOutOfStock() { return isOutOfStock; }
        public void setIsOutOfStock(Boolean isOutOfStock) { this.isOutOfStock = isOutOfStock; }
        
        public Boolean getIsDigital() { return isDigital; }
        public void setIsDigital(Boolean isDigital) { this.isDigital = isDigital; }
        
        public Boolean getRequiresShipping() { return requiresShipping; }
        public void setRequiresShipping(Boolean requiresShipping) { this.requiresShipping = requiresShipping; }
        
        public String getStatusText() { return statusText; }
        public void setStatusText(String statusText) { this.statusText = statusText; }
        
        public String getStatusTextAr() { return statusTextAr; }
        public void setStatusTextAr(String statusTextAr) { this.statusTextAr = statusTextAr; }
        
        public String getStatusColor() { return statusColor; }
        public void setStatusColor(String statusColor) { this.statusColor = statusColor; }
    }
    
    /**
     * إحصائيات المنتج
     * Product statistics
     */
    @Schema(description = "إحصائيات المنتج / Product statistics")
    public static class ProductStats {
        
        /**
         * عدد المشاهدات
         * View count
         */
        @Schema(description = "عدد المشاهدات / View count")
        private Long viewCount;
        
        /**
         * عدد مرات الشراء
         * Purchase count
         */
        @Schema(description = "عدد مرات الشراء / Purchase count")
        private Long purchaseCount;
        
        /**
         * عدد مرات الإضافة للسلة
         * Add to cart count
         */
        @Schema(description = "عدد مرات الإضافة للسلة / Add to cart count")
        private Long addToCartCount;
        
        /**
         * عدد مرات الإعجاب
         * Like count
         */
        @Schema(description = "عدد مرات الإعجاب / Like count")
        private Long likeCount;
        
        /**
         * التقييم المتوسط
         * Average rating
         */
        @Schema(description = "التقييم المتوسط / Average rating")
        private BigDecimal averageRating;
        
        /**
         * عدد التقييمات
         * Rating count
         */
        @Schema(description = "عدد التقييمات / Rating count")
        private Long ratingCount;
        
        /**
         * معدل التحويل
         * Conversion rate
         */
        @Schema(description = "معدل التحويل / Conversion rate")
        private BigDecimal conversionRate;
        
        /**
         * آخر مشاهدة
         * Last viewed
         */
        @Schema(description = "آخر مشاهدة / Last viewed")
        @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
        private LocalDateTime lastViewed;
        
        /**
         * آخر شراء
         * Last purchased
         */
        @Schema(description = "آخر شراء / Last purchased")
        @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
        private LocalDateTime lastPurchased;
        
        // Constructors
        public ProductStats() {}
        
        // Builder pattern
        public static Builder builder() {
            return new Builder();
        }
        
        public static class Builder {
            private final ProductStats stats;
            
            public Builder() {
                this.stats = new ProductStats();
            }
            
            public Builder viewCount(Long viewCount) {
                stats.viewCount = viewCount;
                return this;
            }
            
            public Builder purchaseCount(Long purchaseCount) {
                stats.purchaseCount = purchaseCount;
                return this;
            }
            
            public Builder addToCartCount(Long addToCartCount) {
                stats.addToCartCount = addToCartCount;
                return this;
            }
            
            public Builder likeCount(Long likeCount) {
                stats.likeCount = likeCount;
                return this;
            }
            
            public Builder averageRating(BigDecimal averageRating) {
                stats.averageRating = averageRating;
                return this;
            }
            
            public Builder ratingCount(Long ratingCount) {
                stats.ratingCount = ratingCount;
                return this;
            }
            
            public Builder conversionRate(BigDecimal conversionRate) {
                stats.conversionRate = conversionRate;
                return this;
            }
            
            public Builder lastViewed(LocalDateTime lastViewed) {
                stats.lastViewed = lastViewed;
                return this;
            }
            
            public Builder lastPurchased(LocalDateTime lastPurchased) {
                stats.lastPurchased = lastPurchased;
                return this;
            }
            
            public ProductStats build() {
                return stats;
            }
        }
        
        // Getters and Setters
        public Long getViewCount() { return viewCount; }
        public void setViewCount(Long viewCount) { this.viewCount = viewCount; }
        
        public Long getPurchaseCount() { return purchaseCount; }
        public void setPurchaseCount(Long purchaseCount) { this.purchaseCount = purchaseCount; }
        
        public Long getAddToCartCount() { return addToCartCount; }
        public void setAddToCartCount(Long addToCartCount) { this.addToCartCount = addToCartCount; }
        
        public Long getLikeCount() { return likeCount; }
        public void setLikeCount(Long likeCount) { this.likeCount = likeCount; }
        
        public BigDecimal getAverageRating() { return averageRating; }
        public void setAverageRating(BigDecimal averageRating) { this.averageRating = averageRating; }
        
        public Long getRatingCount() { return ratingCount; }
        public void setRatingCount(Long ratingCount) { this.ratingCount = ratingCount; }
        
        public BigDecimal getConversionRate() { return conversionRate; }
        public void setConversionRate(BigDecimal conversionRate) { this.conversionRate = conversionRate; }
        
        public LocalDateTime getLastViewed() { return lastViewed; }
        public void setLastViewed(LocalDateTime lastViewed) { this.lastViewed = lastViewed; }
        
        public LocalDateTime getLastPurchased() { return lastPurchased; }
        public void setLastPurchased(LocalDateTime lastPurchased) { this.lastPurchased = lastPurchased; }
    }
    
    // ===============================
    // Utility Methods
    // ===============================
    
    /**
     * التحقق من وجود خصم
     * Check if has discount
     * 
     * @return boolean
     */
    public boolean hasDiscount() {
        return comparePrice != null && comparePrice.compareTo(price) > 0;
    }
    
    /**
     * التحقق من وجود صور
     * Check if has images
     * 
     * @return boolean
     */
    public boolean hasImages() {
        return images != null && !images.isEmpty();
    }
    
    /**
     * التحقق من وجود صورة رئيسية
     * Check if has primary image
     * 
     * @return boolean
     */
    public boolean hasPrimaryImage() {
        return primaryImageUrl != null && !primaryImageUrl.trim().isEmpty();
    }
    
    /**
     * التحقق من وجود علامات
     * Check if has tags
     * 
     * @return boolean
     */
    public boolean hasTags() {
        return tags != null && !tags.isEmpty();
    }
    
    /**
     * التحقق من وجود خصائص معروضة
     * Check if has displayed attributes
     * 
     * @return boolean
     */
    public boolean hasDisplayedAttributes() {
        return displayedAttributes != null && !displayedAttributes.isEmpty();
    }
    
    /**
     * الحصول على النص الودود للحالة
     * Get friendly status text
     * 
     * @return String
     */
    public String getFriendlyStatusText() {
        if (status == null) return "Unknown";
        
        if (Boolean.TRUE.equals(status.isOutOfStock)) {
            return "Out of Stock";
        }
        if (Boolean.TRUE.equals(status.isLowStock)) {
            return "Low Stock";
        }
        if (Boolean.TRUE.equals(status.isAvailable)) {
            return "Available";
        }
        if (Boolean.FALSE.equals(status.isActive)) {
            return "Inactive";
        }
        
        return "Available";
    }
    
    /**
     * الحصول على النص الودود للحالة بالعربية
     * Get friendly status text in Arabic
     * 
     * @return String
     */
    public String getFriendlyStatusTextAr() {
        if (status == null) return "غير معروف";
        
        if (Boolean.TRUE.equals(status.isOutOfStock)) {
            return "غير متوفر";
        }
        if (Boolean.TRUE.equals(status.isLowStock)) {
            return "كمية قليلة";
        }
        if (Boolean.TRUE.equals(status.isAvailable)) {
            return "متوفر";
        }
        if (Boolean.FALSE.equals(status.isActive)) {
            return "غير نشط";
        }
        
        return "متوفر";
    }
    
    // ===============================
    // Getters and Setters
    // ===============================
    
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getNameAr() { return nameAr; }
    public void setNameAr(String nameAr) { this.nameAr = nameAr; }
    
    public String getSlug() { return slug; }
    public void setSlug(String slug) { this.slug = slug; }
    
    public String getShortDescription() { return shortDescription; }
    public void setShortDescription(String shortDescription) { this.shortDescription = shortDescription; }
    
    public String getShortDescriptionAr() { return shortDescriptionAr; }
    public void setShortDescriptionAr(String shortDescriptionAr) { this.shortDescriptionAr = shortDescriptionAr; }
    
    public String getSku() { return sku; }
    public void setSku(String sku) { this.sku = sku; }
    
    public BigDecimal getPrice() { return price; }
    public void setPrice(BigDecimal price) { this.price = price; }
    
    public BigDecimal getComparePrice() { return comparePrice; }
    public void setComparePrice(BigDecimal comparePrice) { this.comparePrice = comparePrice; }
    
    public BigDecimal getDiscountPercentage() { return discountPercentage; }
    public void setDiscountPercentage(BigDecimal discountPercentage) { this.discountPercentage = discountPercentage; }
    
    public Integer getStockQuantity() { return stockQuantity; }
    public void setStockQuantity(Integer stockQuantity) { this.stockQuantity = stockQuantity; }
    
    public Integer getMinStockLevel() { return minStockLevel; }
    public void setMinStockLevel(Integer minStockLevel) { this.minStockLevel = minStockLevel; }
    
    public UUID getCategoryId() { return categoryId; }
    public void setCategoryId(UUID categoryId) { this.categoryId = categoryId; }
    
    public String getCategoryName() { return categoryName; }
    public void setCategoryName(String categoryName) { this.categoryName = categoryName; }
    
    public String getCategoryNameAr() { return categoryNameAr; }
    public void setCategoryNameAr(String categoryNameAr) { this.categoryNameAr = categoryNameAr; }
    
    public UUID getBrandId() { return brandId; }
    public void setBrandId(UUID brandId) { this.brandId = brandId; }
    
    public String getBrandName() { return brandName; }
    public void setBrandName(String brandName) { this.brandName = brandName; }
    
    public String getBrandNameAr() { return brandNameAr; }
    public void setBrandNameAr(String brandNameAr) { this.brandNameAr = brandNameAr; }
    
    public String getPrimaryImageUrl() { return primaryImageUrl; }
    public void setPrimaryImageUrl(String primaryImageUrl) { this.primaryImageUrl = primaryImageUrl; }
    
    public List<ProductImageInfo> getImages() { return images; }
    public void setImages(List<ProductImageInfo> images) { this.images = images; }
    
    public List<String> getTags() { return tags; }
    public void setTags(List<String> tags) { this.tags = tags; }
    
    public List<AttributeInfo> getDisplayedAttributes() { return displayedAttributes; }
    public void setDisplayedAttributes(List<AttributeInfo> displayedAttributes) { this.displayedAttributes = displayedAttributes; }
    
    public ProductStatus getStatus() { return status; }
    public void setStatus(ProductStatus status) { this.status = status; }
    
    public ProductStats getStats() { return stats; }
    public void setStats(ProductStats stats) { this.stats = stats; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
    
    // ===============================
    // toString Method
    // ===============================
    
    @Override
    public String toString() {
        return "ProductListResponse{" +
                "id=" + id +
                ", displayId='" + displayId + '\'' +
                ", name='" + name + '\'' +
                ", nameAr='" + nameAr + '\'' +
                ", slug='" + slug + '\'' +
                ", sku='" + sku + '\'' +
                ", price=" + price +
                ", comparePrice=" + comparePrice +
                ", discountPercentage=" + discountPercentage +
                ", stockQuantity=" + stockQuantity +
                ", categoryName='" + categoryName + '\'' +
                ", brandName='" + brandName + '\'' +
                ", status=" + status +
                ", createdAt=" + createdAt +
                ", updatedAt=" + updatedAt +
                '}';
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/application/dto/ProductResponse.java ---- */

package com.ecommerce.multistore.product.application.dto;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * استجابة بيانات المنتج
 * Product response DTO
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
public class ProductResponse {
    
    private UUID id;
    private String displayId;
    private String name;
    private String nameAr;
    private String slug;
    private String description;
    private String descriptionAr;
    private String shortDescription;
    private String shortDescriptionAr;
    private String sku;
    private String barcode;
    private UUID categoryId;
    private UUID brandId;
    private BigDecimal price;
    private BigDecimal comparePrice;
    private BigDecimal costPrice;
    private BigDecimal weight;
    private Integer stockQuantity;
    private Integer minStockLevel;
    private Boolean trackInventory;
    private Boolean isActive;
    private Boolean isFeatured;
    private Boolean isDigital;
    private Boolean requiresShipping;
    private String attributes;
    private String tags;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    
    // Business Logic Fields
    private Boolean isAvailable;
    private Boolean isLowStock;
    private BigDecimal discountPercentage;
    
    // ===============================
    // Constructors
    // ===============================
    
    public ProductResponse() {}
    
    // ===============================
    // Getters and Setters
    // ===============================
    
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getNameAr() { return nameAr; }
    public void setNameAr(String nameAr) { this.nameAr = nameAr; }
    
    public String getSlug() { return slug; }
    public void setSlug(String slug) { this.slug = slug; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public String getDescriptionAr() { return descriptionAr; }
    public void setDescriptionAr(String descriptionAr) { this.descriptionAr = descriptionAr; }
    
    public String getShortDescription() { return shortDescription; }
    public void setShortDescription(String shortDescription) { this.shortDescription = shortDescription; }
    
    public String getShortDescriptionAr() { return shortDescriptionAr; }
    public void setShortDescriptionAr(String shortDescriptionAr) { this.shortDescriptionAr = shortDescriptionAr; }
    
    public String getSku() { return sku; }
    public void setSku(String sku) { this.sku = sku; }
    
    public String getBarcode() { return barcode; }
    public void setBarcode(String barcode) { this.barcode = barcode; }
    
    public UUID getCategoryId() { return categoryId; }
    public void setCategoryId(UUID categoryId) { this.categoryId = categoryId; }
    
    public UUID getBrandId() { return brandId; }
    public void setBrandId(UUID brandId) { this.brandId = brandId; }
    
    public BigDecimal getPrice() { return price; }
    public void setPrice(BigDecimal price) { this.price = price; }
    
    public BigDecimal getComparePrice() { return comparePrice; }
    public void setComparePrice(BigDecimal comparePrice) { this.comparePrice = comparePrice; }
    
    public BigDecimal getCostPrice() { return costPrice; }
    public void setCostPrice(BigDecimal costPrice) { this.costPrice = costPrice; }
    
    public BigDecimal getWeight() { return weight; }
    public void setWeight(BigDecimal weight) { this.weight = weight; }
    
    public Integer getStockQuantity() { return stockQuantity; }
    public void setStockQuantity(Integer stockQuantity) { this.stockQuantity = stockQuantity; }
    
    public Integer getMinStockLevel() { return minStockLevel; }
    public void setMinStockLevel(Integer minStockLevel) { this.minStockLevel = minStockLevel; }
    
    public Boolean getTrackInventory() { return trackInventory; }
    public void setTrackInventory(Boolean trackInventory) { this.trackInventory = trackInventory; }
    
    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }
    
    public Boolean getIsFeatured() { return isFeatured; }
    public void setIsFeatured(Boolean isFeatured) { this.isFeatured = isFeatured; }
    
    public Boolean getIsDigital() { return isDigital; }
    public void setIsDigital(Boolean isDigital) { this.isDigital = isDigital; }
    
    public Boolean getRequiresShipping() { return requiresShipping; }
    public void setRequiresShipping(Boolean requiresShipping) { this.requiresShipping = requiresShipping; }
    
    public String getAttributes() { return attributes; }
    public void setAttributes(String attributes) { this.attributes = attributes; }
    
    public String getTags() { return tags; }
    public void setTags(String tags) { this.tags = tags; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
    
    public Boolean getIsAvailable() { return isAvailable; }
    public void setIsAvailable(Boolean isAvailable) { this.isAvailable = isAvailable; }
    
    public Boolean getIsLowStock() { return isLowStock; }
    public void setIsLowStock(Boolean isLowStock) { this.isLowStock = isLowStock; }
    
    public BigDecimal getDiscountPercentage() { return discountPercentage; }
    public void setDiscountPercentage(BigDecimal discountPercentage) { this.discountPercentage = discountPercentage; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/application/dto/ProductSearchRequest.java ---- */

package com.ecommerce.multistore.product.application.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.DecimalMin;

import java.math.BigDecimal;
import java.util.List;
import java.util.UUID;

/**
 * طلب البحث المتقدم في المنتجات
 * Advanced product search request
 * 
 * يحتوي على جميع معايير البحث والفلترة المتقدمة للمنتجات
 * Contains all advanced search and filtering criteria for products
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Schema(description = "طلب البحث المتقدم في المنتجات / Advanced product search request")
public class ProductSearchRequest {
    
    /**
     * كلمة البحث العامة
     * General search term
     */
    @Schema(description = "كلمة البحث العامة / General search term", example = "ساعة ذكية")
    private String searchTerm;
    
    /**
     * البحث في الاسم تحديداً
     * Search in name specifically
     */
    @Schema(description = "البحث في الاسم تحديداً / Search in name specifically", example = "Smart Watch")
    private String name;
    
    /**
     * البحث في الاسم العربي
     * Search in Arabic name
     */
    @Schema(description = "البحث في الاسم العربي / Search in Arabic name", example = "ساعة ذكية")
    private String nameAr;
    
    /**
     * البحث في الوصف
     * Search in description
     */
    @Schema(description = "البحث في الوصف / Search in description")
    private String description;
    
    /**
     * البحث في رمز المنتج
     * Search in product SKU
     */
    @Schema(description = "البحث في رمز المنتج / Search in product SKU", example = "SW-PRO-001")
    private String sku;
    
    /**
     * البحث في الباركود
     * Search in barcode
     */
    @Schema(description = "البحث في الباركود / Search in barcode")
    private String barcode;
    
    /**
     * فئات المنتجات المطلوبة
     * Required product categories
     */
    @Schema(description = "فئات المنتجات المطلوبة / Required product categories")
    private List<UUID> categoryIds;
    
    /**
     * العلامات التجارية المطلوبة
     * Required brands
     */
    @Schema(description = "العلامات التجارية المطلوبة / Required brands")
    private List<UUID> brandIds;
    
    /**
     * أقل سعر
     * Minimum price
     */
    @Schema(description = "أقل سعر / Minimum price", example = "100.00")
    @DecimalMin(value = "0.0", message = "Minimum price cannot be negative")
    private BigDecimal minPrice;
    
    /**
     * أعلى سعر
     * Maximum price
     */
    @Schema(description = "أعلى سعر / Maximum price", example = "1000.00")
    @DecimalMin(value = "0.0", message = "Maximum price cannot be negative")
    private BigDecimal maxPrice;
    
    /**
     * أقل كمية في المخزون
     * Minimum stock quantity
     */
    @Schema(description = "أقل كمية في المخزون / Minimum stock quantity", example = "1")
    @Min(value = 0, message = "Minimum stock quantity cannot be negative")
    private Integer minStockQuantity;
    
    /**
     * أعلى كمية في المخزون
     * Maximum stock quantity
     */
    @Schema(description = "أعلى كمية في المخزون / Maximum stock quantity", example = "100")
    @Min(value = 0, message = "Maximum stock quantity cannot be negative")
    private Integer maxStockQuantity;
    
    /**
     * المنتجات النشطة فقط
     * Active products only
     */
    @Schema(description = "المنتجات النشطة فقط / Active products only", example = "true")
    private Boolean isActive;
    
    /**
     * المنتجات المميزة فقط
     * Featured products only
     */
    @Schema(description = "المنتجات المميزة فقط / Featured products only", example = "false")
    private Boolean isFeatured;
    
    /**
     * المنتجات الرقمية فقط
     * Digital products only
     */
    @Schema(description = "المنتجات الرقمية فقط / Digital products only", example = "false")
    private Boolean isDigital;
    
    /**
     * المنتجات التي تحتاج شحن
     * Products that require shipping
     */
    @Schema(description = "المنتجات التي تحتاج شحن / Products that require shipping", example = "true")
    private Boolean requiresShipping;
    
    /**
     * المنتجات ذات المخزون المنخفض
     * Products with low stock
     */
    @Schema(description = "المنتجات ذات المخزون المنخفض / Products with low stock", example = "false")
    private Boolean isLowStock;
    
    /**
     * المنتجات غير المتوفرة
     * Out of stock products
     */
    @Schema(description = "المنتجات غير المتوفرة / Out of stock products", example = "false")
    private Boolean isOutOfStock;
    
    /**
     * العلامات المطلوبة
     * Required tags
     */
    @Schema(description = "العلامات المطلوبة / Required tags", example = "[\"smartwatch\", \"fitness\"]")
    private List<String> tags;
    
    /**
     * خصائص المنتج
     * Product attributes
     */
    @Schema(description = "خصائص المنتج / Product attributes")
    private String attributes;
    
    /**
     * تاريخ الإنشاء من
     * Created from date
     */
    @Schema(description = "تاريخ الإنشاء من / Created from date", example = "2024-01-01")
    private String createdFrom;
    
    /**
     * تاريخ الإنشاء إلى
     * Created to date
     */
    @Schema(description = "تاريخ الإنشاء إلى / Created to date", example = "2024-12-31")
    private String createdTo;
    
    /**
     * حقل الترتيب
     * Sort field
     */
    @Schema(description = "حقل الترتيب / Sort field", example = "createdAt", 
            allowableValues = {"name", "price", "createdAt", "updatedAt", "stockQuantity"})
    private String sortBy = "createdAt";
    
    /**
     * اتجاه الترتيب
     * Sort direction
     */
    @Schema(description = "اتجاه الترتيب / Sort direction", example = "desc", 
            allowableValues = {"asc", "desc"})
    private String sortDirection = "desc";
    
    /**
     * رقم الصفحة
     * Page number
     */
    @Schema(description = "رقم الصفحة / Page number", example = "0")
    @Min(value = 0, message = "Page number cannot be negative")
    private Integer page = 0;
    
    /**
     * حجم الصفحة
     * Page size
     */
    @Schema(description = "حجم الصفحة / Page size", example = "20")
    @Min(value = 1, message = "Page size must be at least 1")
    @Max(value = 100, message = "Page size cannot exceed 100")
    private Integer size = 20;
    
    /**
     * تضمين المنتجات المحذوفة
     * Include deleted products
     */
    @Schema(description = "تضمين المنتجات المحذوفة / Include deleted products", example = "false")
    private Boolean includeDeleted = false;
    
    /**
     * البحث الضبابي
     * Fuzzy search
     */
    @Schema(description = "البحث الضبابي / Fuzzy search", example = "false")
    private Boolean fuzzySearch = false;
    
    /**
     * البحث في جميع الحقول
     * Search in all fields
     */
    @Schema(description = "البحث في جميع الحقول / Search in all fields", example = "true")
    private Boolean searchInAllFields = true;
    
    /**
     * حساسية الأحرف
     * Case sensitive
     */
    @Schema(description = "حساسية الأحرف / Case sensitive", example = "false")
    private Boolean caseSensitive = false;
    
    /**
     * البحث الدقيق
     * Exact match
     */
    @Schema(description = "البحث الدقيق / Exact match", example = "false")
    private Boolean exactMatch = false;
    
    // ===============================
    // Constructors
    // ===============================
    
    /**
     * Constructor افتراضي
     * Default constructor
     */
    public ProductSearchRequest() {}
    
    /**
     * Constructor مع كلمة البحث
     * Constructor with search term
     * 
     * @param searchTerm كلمة البحث
     */
    public ProductSearchRequest(String searchTerm) {
        this.searchTerm = searchTerm;
    }
    
    // ===============================
    // Builder Pattern
    // ===============================
    
    /**
     * بناء طلب البحث
     * Build search request
     * 
     * @return Builder
     */
    public static Builder builder() {
        return new Builder();
    }
    
    /**
     * فئة البناء لطلب البحث
     * Builder class for search request
     */
    public static class Builder {
        private final ProductSearchRequest request;
        
        public Builder() {
            this.request = new ProductSearchRequest();
        }
        
        public Builder searchTerm(String searchTerm) {
            request.searchTerm = searchTerm;
            return this;
        }
        
        public Builder name(String name) {
            request.name = name;
            return this;
        }
        
        public Builder nameAr(String nameAr) {
            request.nameAr = nameAr;
            return this;
        }
        
        public Builder description(String description) {
            request.description = description;
            return this;
        }
        
        public Builder sku(String sku) {
            request.sku = sku;
            return this;
        }
        
        public Builder barcode(String barcode) {
            request.barcode = barcode;
            return this;
        }
        
        public Builder categoryIds(List<UUID> categoryIds) {
            request.categoryIds = categoryIds;
            return this;
        }
        
        public Builder brandIds(List<UUID> brandIds) {
            request.brandIds = brandIds;
            return this;
        }
        
        public Builder priceRange(BigDecimal minPrice, BigDecimal maxPrice) {
            request.minPrice = minPrice;
            request.maxPrice = maxPrice;
            return this;
        }
        
        public Builder stockRange(Integer minStock, Integer maxStock) {
            request.minStockQuantity = minStock;
            request.maxStockQuantity = maxStock;
            return this;
        }
        
        public Builder isActive(Boolean isActive) {
            request.isActive = isActive;
            return this;
        }
        
        public Builder isFeatured(Boolean isFeatured) {
            request.isFeatured = isFeatured;
            return this;
        }
        
        public Builder isDigital(Boolean isDigital) {
            request.isDigital = isDigital;
            return this;
        }
        
        public Builder requiresShipping(Boolean requiresShipping) {
            request.requiresShipping = requiresShipping;
            return this;
        }
        
        public Builder isLowStock(Boolean isLowStock) {
            request.isLowStock = isLowStock;
            return this;
        }
        
        public Builder isOutOfStock(Boolean isOutOfStock) {
            request.isOutOfStock = isOutOfStock;
            return this;
        }
        
        public Builder tags(List<String> tags) {
            request.tags = tags;
            return this;
        }
        
        public Builder attributes(String attributes) {
            request.attributes = attributes;
            return this;
        }
        
        public Builder createdDateRange(String createdFrom, String createdTo) {
            request.createdFrom = createdFrom;
            request.createdTo = createdTo;
            return this;
        }
        
        public Builder sort(String sortBy, String sortDirection) {
            request.sortBy = sortBy;
            request.sortDirection = sortDirection;
            return this;
        }
        
        public Builder pagination(Integer page, Integer size) {
            request.page = page;
            request.size = size;
            return this;
        }
        
        public Builder includeDeleted(Boolean includeDeleted) {
            request.includeDeleted = includeDeleted;
            return this;
        }
        
        public Builder fuzzySearch(Boolean fuzzySearch) {
            request.fuzzySearch = fuzzySearch;
            return this;
        }
        
        public Builder searchInAllFields(Boolean searchInAllFields) {
            request.searchInAllFields = searchInAllFields;
            return this;
        }
        
        public Builder caseSensitive(Boolean caseSensitive) {
            request.caseSensitive = caseSensitive;
            return this;
        }
        
        public Builder exactMatch(Boolean exactMatch) {
            request.exactMatch = exactMatch;
            return this;
        }
        
        public ProductSearchRequest build() {
            return request;
        }
    }
    
    // ===============================
    // Utility Methods
    // ===============================
    
    /**
     * التحقق من وجود معايير بحث
     * Check if has search criteria
     * 
     * @return boolean
     */
    public boolean hasSearchCriteria() {
        return (searchTerm != null && !searchTerm.trim().isEmpty()) ||
               (name != null && !name.trim().isEmpty()) ||
               (nameAr != null && !nameAr.trim().isEmpty()) ||
               (description != null && !description.trim().isEmpty()) ||
               (sku != null && !sku.trim().isEmpty()) ||
               (barcode != null && !barcode.trim().isEmpty());
    }
    
    /**
     * التحقق من وجود فلاتر
     * Check if has filters
     * 
     * @return boolean
     */
    public boolean hasFilters() {
        return (categoryIds != null && !categoryIds.isEmpty()) ||
               (brandIds != null && !brandIds.isEmpty()) ||
               minPrice != null || maxPrice != null ||
               minStockQuantity != null || maxStockQuantity != null ||
               isActive != null || isFeatured != null ||
               isDigital != null || requiresShipping != null ||
               isLowStock != null || isOutOfStock != null ||
               (tags != null && !tags.isEmpty()) ||
               (attributes != null && !attributes.trim().isEmpty());
    }
    
    /**
     * التحقق من وجود فلتر تاريخ
     * Check if has date filter
     * 
     * @return boolean
     */
    public boolean hasDateFilter() {
        return (createdFrom != null && !createdFrom.trim().isEmpty()) ||
               (createdTo != null && !createdTo.trim().isEmpty());
    }
    
    /**
     * التحقق من وجود فلتر سعر
     * Check if has price filter
     * 
     * @return boolean
     */
    public boolean hasPriceFilter() {
        return minPrice != null || maxPrice != null;
    }
    
    /**
     * التحقق من وجود فلتر مخزون
     * Check if has stock filter
     * 
     * @return boolean
     */
    public boolean hasStockFilter() {
        return minStockQuantity != null || maxStockQuantity != null ||
               Boolean.TRUE.equals(isLowStock) || Boolean.TRUE.equals(isOutOfStock);
    }
    
    /**
     * التحقق من صحة نطاق السعر
     * Validate price range
     * 
     * @return boolean
     */
    public boolean isValidPriceRange() {
        if (minPrice == null || maxPrice == null) {
            return true;
        }
        return minPrice.compareTo(maxPrice) <= 0;
    }
    
    /**
     * التحقق من صحة نطاق المخزون
     * Validate stock range
     * 
     * @return boolean
     */
    public boolean isValidStockRange() {
        if (minStockQuantity == null || maxStockQuantity == null) {
            return true;
        }
        return minStockQuantity <= maxStockQuantity;
    }
    
    /**
     * الحصول على عدد الفلاتر النشطة
     * Get active filters count
     * 
     * @return int
     */
    public int getActiveFiltersCount() {
        int count = 0;
        if (categoryIds != null && !categoryIds.isEmpty()) count++;
        if (brandIds != null && !brandIds.isEmpty()) count++;
        if (hasPriceFilter()) count++;
        if (hasStockFilter()) count++;
        if (isActive != null) count++;
        if (isFeatured != null) count++;
        if (isDigital != null) count++;
        if (requiresShipping != null) count++;
        if (tags != null && !tags.isEmpty()) count++;
        if (attributes != null && !attributes.trim().isEmpty()) count++;
        if (hasDateFilter()) count++;
        return count;
    }
    
    // ===============================
    // Getters and Setters
    // ===============================
    
    public String getSearchTerm() { return searchTerm; }
    public void setSearchTerm(String searchTerm) { this.searchTerm = searchTerm; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getNameAr() { return nameAr; }
    public void setNameAr(String nameAr) { this.nameAr = nameAr; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public String getSku() { return sku; }
    public void setSku(String sku) { this.sku = sku; }
    
    public String getBarcode() { return barcode; }
    public void setBarcode(String barcode) { this.barcode = barcode; }
    
    public List<UUID> getCategoryIds() { return categoryIds; }
    public void setCategoryIds(List<UUID> categoryIds) { this.categoryIds = categoryIds; }
    
    public List<UUID> getBrandIds() { return brandIds; }
    public void setBrandIds(List<UUID> brandIds) { this.brandIds = brandIds; }
    
    public BigDecimal getMinPrice() { return minPrice; }
    public void setMinPrice(BigDecimal minPrice) { this.minPrice = minPrice; }
    
    public BigDecimal getMaxPrice() { return maxPrice; }
    public void setMaxPrice(BigDecimal maxPrice) { this.maxPrice = maxPrice; }
    
    public Integer getMinStockQuantity() { return minStockQuantity; }
    public void setMinStockQuantity(Integer minStockQuantity) { this.minStockQuantity = minStockQuantity; }
    
    public Integer getMaxStockQuantity() { return maxStockQuantity; }
    public void setMaxStockQuantity(Integer maxStockQuantity) { this.maxStockQuantity = maxStockQuantity; }
    
    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }
    
    public Boolean getIsFeatured() { return isFeatured; }
    public void setIsFeatured(Boolean isFeatured) { this.isFeatured = isFeatured; }
    
    public Boolean getIsDigital() { return isDigital; }
    public void setIsDigital(Boolean isDigital) { this.isDigital = isDigital; }
    
    public Boolean getRequiresShipping() { return requiresShipping; }
    public void setRequiresShipping(Boolean requiresShipping) { this.requiresShipping = requiresShipping; }
    
    public Boolean getIsLowStock() { return isLowStock; }
    public void setIsLowStock(Boolean isLowStock) { this.isLowStock = isLowStock; }
    
    public Boolean getIsOutOfStock() { return isOutOfStock; }
    public void setIsOutOfStock(Boolean isOutOfStock) { this.isOutOfStock = isOutOfStock; }
    
    public List<String> getTags() { return tags; }
    public void setTags(List<String> tags) { this.tags = tags; }
    
    public String getAttributes() { return attributes; }
    public void setAttributes(String attributes) { this.attributes = attributes; }
    
    public String getCreatedFrom() { return createdFrom; }
    public void setCreatedFrom(String createdFrom) { this.createdFrom = createdFrom; }
    
    public String getCreatedTo() { return createdTo; }
    public void setCreatedTo(String createdTo) { this.createdTo = createdTo; }
    
    public String getSortBy() { return sortBy; }
    public void setSortBy(String sortBy) { this.sortBy = sortBy; }
    
    public String getSortDirection() { return sortDirection; }
    public void setSortDirection(String sortDirection) { this.sortDirection = sortDirection; }
    
    public Integer getPage() { return page; }
    public void setPage(Integer page) { this.page = page; }
    
    public Integer getSize() { return size; }
    public void setSize(Integer size) { this.size = size; }
    
    public Boolean getIncludeDeleted() { return includeDeleted; }
    public void setIncludeDeleted(Boolean includeDeleted) { this.includeDeleted = includeDeleted; }
    
    public Boolean getFuzzySearch() { return fuzzySearch; }
    public void setFuzzySearch(Boolean fuzzySearch) { this.fuzzySearch = fuzzySearch; }
    
    public Boolean getSearchInAllFields() { return searchInAllFields; }
    public void setSearchInAllFields(Boolean searchInAllFields) { this.searchInAllFields = searchInAllFields; }
    
    public Boolean getCaseSensitive() { return caseSensitive; }
    public void setCaseSensitive(Boolean caseSensitive) { this.caseSensitive = caseSensitive; }
    
    public Boolean getExactMatch() { return exactMatch; }
    public void setExactMatch(Boolean exactMatch) { this.exactMatch = exactMatch; }
    
    // ===============================
    // toString Method
    // ===============================
    
    @Override
    public String toString() {
        return "ProductSearchRequest{" +
                "searchTerm='" + searchTerm + '\'' +
                ", name='" + name + '\'' +
                ", nameAr='" + nameAr + '\'' +
                ", description='" + description + '\'' +
                ", sku='" + sku + '\'' +
                ", barcode='" + barcode + '\'' +
                ", categoryIds=" + categoryIds +
                ", brandIds=" + brandIds +
                ", minPrice=" + minPrice +
                ", maxPrice=" + maxPrice +
                ", minStockQuantity=" + minStockQuantity +
                ", maxStockQuantity=" + maxStockQuantity +
                ", isActive=" + isActive +
                ", isFeatured=" + isFeatured +
                ", isDigital=" + isDigital +
                ", requiresShipping=" + requiresShipping +
                ", isLowStock=" + isLowStock +
                ", isOutOfStock=" + isOutOfStock +
                ", tags=" + tags +
                ", attributes='" + attributes + '\'' +
                ", createdFrom='" + createdFrom + '\'' +
                ", createdTo='" + createdTo + '\'' +
                ", sortBy='" + sortBy + '\'' +
                ", sortDirection='" + sortDirection + '\'' +
                ", page=" + page +
                ", size=" + size +
                ", includeDeleted=" + includeDeleted +
                ", fuzzySearch=" + fuzzySearch +
                ", searchInAllFields=" + searchInAllFields +
                ", caseSensitive=" + caseSensitive +
                ", exactMatch=" + exactMatch +
                '}';
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/application/dto/ProductSummaryResponse.java ---- */

package com.ecommerce.multistore.product.application.dto;

public class ProductSummaryResponse {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/application/dto/UpdateProductRequest.java ---- */

package com.ecommerce.multistore.product.application.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * طلب تحديث بيانات المنتج
 * Product update request DTO
 * 
 * يسمح بتحديث مرن للمنتجات مع إمكانية تحديث حقول محددة فقط
 * Allows flexible product updates with the ability to update specific fields only
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Schema(description = "طلب تحديث بيانات المنتج / Product update request")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class UpdateProductRequest {
    
    /**
     * اسم المنتج الجديد
     * New product name
     */
    @Schema(description = "اسم المنتج الجديد / New product name", example = "Smart Watch Pro Updated")
    @Size(max = 255, message = "Product name cannot exceed 255 characters")
    private String name;
    
    /**
     * اسم المنتج الجديد بالعربية
     * New product name in Arabic
     */
    @Schema(description = "اسم المنتج الجديد بالعربية / New product name in Arabic", example = "ساعة ذكية برو محدثة")
    @Size(max = 255, message = "Arabic name cannot exceed 255 characters")
    private String nameAr;
    
    /**
     * رمز المنتج الجديد
     * New product SKU
     */
    @Schema(description = "رمز المنتج الجديد / New product SKU", example = "SW-PRO-001-V2")
    @Size(max = 100, message = "SKU cannot exceed 100 characters")
    private String sku;
    
    /**
     * الرابط الودود الجديد
     * New URL slug
     */
    @Schema(description = "الرابط الودود الجديد / New URL slug", example = "smart-watch-pro-updated")
    @Size(max = 255, message = "Slug cannot exceed 255 characters")
    private String slug;
    
    /**
     * الوصف الجديد
     * New description
     */
    @Schema(description = "الوصف الجديد / New description")
    private String description;
    
    /**
     * الوصف الجديد بالعربية
     * New description in Arabic
     */
    @Schema(description = "الوصف الجديد بالعربية / New description in Arabic")
    private String descriptionAr;
    
    /**
     * الوصف المختصر الجديد
     * New short description
     */
    @Schema(description = "الوصف المختصر الجديد / New short description")
    private String shortDescription;
    
    /**
     * الوصف المختصر الجديد بالعربية
     * New short description in Arabic
     */
    @Schema(description = "الوصف المختصر الجديد بالعربية / New short description in Arabic")
    private String shortDescriptionAr;
    
    /**
     * السعر الجديد
     * New price
     */
    @Schema(description = "السعر الجديد / New price", example = "249.99")
    @DecimalMin(value = "0.0", inclusive = false, message = "Price must be greater than 0")
    @Digits(integer = 8, fraction = 2, message = "Price format is invalid")
    private BigDecimal price;
    
    /**
     * سعر المقارنة الجديد
     * New compare price
     */
    @Schema(description = "سعر المقارنة الجديد / New compare price", example = "299.99")
    @DecimalMin(value = "0.0", message = "Compare price cannot be negative")
    @Digits(integer = 8, fraction = 2, message = "Compare price format is invalid")
    private BigDecimal comparePrice;
    
    /**
     * سعر التكلفة الجديد
     * New cost price
     */
    @Schema(description = "سعر التكلفة الجديد / New cost price", example = "199.99")
    @DecimalMin(value = "0.0", message = "Cost price cannot be negative")
    @Digits(integer = 8, fraction = 2, message = "Cost price format is invalid")
    private BigDecimal costPrice;
    
    /**
     * الوزن الجديد
     * New weight
     */
    @Schema(description = "الوزن الجديد / New weight", example = "0.250")
    @DecimalMin(value = "0.0", message = "Weight cannot be negative")
    private BigDecimal weight;
    
    /**
     * كمية المخزون الجديدة
     * New stock quantity
     */
    @Schema(description = "كمية المخزون الجديدة / New stock quantity", example = "100")
    @Min(value = 0, message = "Stock quantity cannot be negative")
    private Integer stockQuantity;
    
    /**
     * الحد الأدنى للمخزون الجديد
     * New minimum stock level
     */
    @Schema(description = "الحد الأدنى للمخزون الجديد / New minimum stock level", example = "10")
    @Min(value = 0, message = "Minimum stock level cannot be negative")
    private Integer minStockLevel;
    
    /**
     * معرف الفئة الجديد
     * New category ID
     */
    @Schema(description = "معرف الفئة الجديد / New category ID")
    private UUID categoryId;
    
    /**
     * معرف العلامة التجارية الجديد
     * New brand ID
     */
    @Schema(description = "معرف العلامة التجارية الجديد / New brand ID")
    private UUID brandId;
    
    /**
     * الباركود الجديد
     * New barcode
     */
    @Schema(description = "الباركود الجديد / New barcode")
    private String barcode;
    
    /**
     * تتبع المخزون
     * Track inventory
     */
    @Schema(description = "تتبع المخزون / Track inventory", example = "true")
    private Boolean trackInventory;
    
    /**
     * المنتج نشط
     * Is product active
     */
    @Schema(description = "المنتج نشط / Is product active", example = "true")
    private Boolean isActive;
    
    /**
     * المنتج مميز
     * Is product featured
     */
    @Schema(description = "المنتج مميز / Is product featured", example = "false")
    private Boolean isFeatured;
    
    /**
     * المنتج رقمي
     * Is product digital
     */
    @Schema(description = "المنتج رقمي / Is product digital", example = "false")
    private Boolean isDigital;
    
    /**
     * يتطلب شحن
     * Requires shipping
     */
    @Schema(description = "يتطلب شحن / Requires shipping", example = "true")
    private Boolean requiresShipping;
    
    /**
     * الخصائص الجديدة
     * New attributes
     */
    @Schema(description = "الخصائص الجديدة / New attributes")
    private String attributes;
    
    /**
     * العلامات الجديدة
     * New tags
     */
    @Schema(description = "العلامات الجديدة / New tags", example = "[\"smartwatch\", \"fitness\", \"updated\"]")
    private List<String> tags;
    
    /**
     * الحقول المطلوب تحديثها
     * Fields to update
     */
    @Schema(description = "الحقول المطلوب تحديثها / Fields to update", 
            example = "[\"name\", \"price\", \"stockQuantity\"]")
    private List<String> fieldsToUpdate;
    
    /**
     * خيارات التحديث
     * Update options
     */
    @Schema(description = "خيارات التحديث / Update options")
    private UpdateOptions updateOptions;
    
    /**
     * تحديثات الخصائص المرنة
     * Flexible attribute updates
     */
    @Schema(description = "تحديثات الخصائص المرنة / Flexible attribute updates")
    private Map<String, Object> attributeUpdates;
    
    /**
     * تحديثات الأسعار المجمعة
     * Bulk price updates
     */
    @Schema(description = "تحديثات الأسعار المجمعة / Bulk price updates")
    private PriceUpdateInfo priceUpdateInfo;
    
    /**
     * تحديثات المخزون المجمعة
     * Bulk inventory updates
     */
    @Schema(description = "تحديثات المخزون المجمعة / Bulk inventory updates")
    private InventoryUpdateInfo inventoryUpdateInfo;
    
    /**
     * إعدادات SEO
     * SEO settings
     */
    @Schema(description = "إعدادات SEO / SEO settings")
    private SeoSettings seoSettings;
    
    /**
     * معلومات التدقيق
     * Audit information
     */
    @Schema(description = "معلومات التدقيق / Audit information")
    private AuditInfo auditInfo;
    
    // ===============================
    // Constructors
    // ===============================
    
    /**
     * Constructor افتراضي
     * Default constructor
     */
    public UpdateProductRequest() {}
    
    /**
     * Constructor مع الحقول الأساسية
     * Constructor with basic fields
     * 
     * @param name اسم المنتج
     * @param price السعر
     * @param stockQuantity كمية المخزون
     */
    public UpdateProductRequest(String name, BigDecimal price, Integer stockQuantity) {
        this.name = name;
        this.price = price;
        this.stockQuantity = stockQuantity;
    }
    
    // ===============================
    // Builder Pattern
    // ===============================
    
    /**
     * بناء طلب تحديث المنتج
     * Build product update request
     * 
     * @return Builder
     */
    public static Builder builder() {
        return new Builder();
    }
    
    /**
     * فئة البناء لطلب تحديث المنتج
     * Builder class for product update request
     */
    public static class Builder {
        private final UpdateProductRequest request;
        
        public Builder() {
            this.request = new UpdateProductRequest();
        }
        
        public Builder name(String name) {
            request.name = name;
            return this;
        }
        
        public Builder nameAr(String nameAr) {
            request.nameAr = nameAr;
            return this;
        }
        
        public Builder sku(String sku) {
            request.sku = sku;
            return this;
        }
        
        public Builder slug(String slug) {
            request.slug = slug;
            return this;
        }
        
        public Builder description(String description) {
            request.description = description;
            return this;
        }
        
        public Builder descriptionAr(String descriptionAr) {
            request.descriptionAr = descriptionAr;
            return this;
        }
        
        public Builder shortDescription(String shortDescription) {
            request.shortDescription = shortDescription;
            return this;
        }
        
        public Builder shortDescriptionAr(String shortDescriptionAr) {
            request.shortDescriptionAr = shortDescriptionAr;
            return this;
        }
        
        public Builder price(BigDecimal price) {
            request.price = price;
            return this;
        }
        
        public Builder comparePrice(BigDecimal comparePrice) {
            request.comparePrice = comparePrice;
            return this;
        }
        
        public Builder costPrice(BigDecimal costPrice) {
            request.costPrice = costPrice;
            return this;
        }
        
        public Builder weight(BigDecimal weight) {
            request.weight = weight;
            return this;
        }
        
        public Builder stockQuantity(Integer stockQuantity) {
            request.stockQuantity = stockQuantity;
            return this;
        }
        
        public Builder minStockLevel(Integer minStockLevel) {
            request.minStockLevel = minStockLevel;
            return this;
        }
        
        public Builder categoryId(UUID categoryId) {
            request.categoryId = categoryId;
            return this;
        }
        
        public Builder brandId(UUID brandId) {
            request.brandId = brandId;
            return this;
        }
        
        public Builder barcode(String barcode) {
            request.barcode = barcode;
            return this;
        }
        
        public Builder trackInventory(Boolean trackInventory) {
            request.trackInventory = trackInventory;
            return this;
        }
        
        public Builder isActive(Boolean isActive) {
            request.isActive = isActive;
            return this;
        }
        
        public Builder isFeatured(Boolean isFeatured) {
            request.isFeatured = isFeatured;
            return this;
        }
        
        public Builder isDigital(Boolean isDigital) {
            request.isDigital = isDigital;
            return this;
        }
        
        public Builder requiresShipping(Boolean requiresShipping) {
            request.requiresShipping = requiresShipping;
            return this;
        }
        
        public Builder attributes(String attributes) {
            request.attributes = attributes;
            return this;
        }
        
        public Builder tags(List<String> tags) {
            request.tags = tags;
            return this;
        }
        
        public Builder fieldsToUpdate(List<String> fieldsToUpdate) {
            request.fieldsToUpdate = fieldsToUpdate;
            return this;
        }
        
        public Builder updateOptions(UpdateOptions updateOptions) {
            request.updateOptions = updateOptions;
            return this;
        }
        
        public Builder attributeUpdates(Map<String, Object> attributeUpdates) {
            request.attributeUpdates = attributeUpdates;
            return this;
        }
        
        public Builder priceUpdateInfo(PriceUpdateInfo priceUpdateInfo) {
            request.priceUpdateInfo = priceUpdateInfo;
            return this;
        }
        
        public Builder inventoryUpdateInfo(InventoryUpdateInfo inventoryUpdateInfo) {
            request.inventoryUpdateInfo = inventoryUpdateInfo;
            return this;
        }
        
        public Builder seoSettings(SeoSettings seoSettings) {
            request.seoSettings = seoSettings;
            return this;
        }
        
        public Builder auditInfo(AuditInfo auditInfo) {
            request.auditInfo = auditInfo;
            return this;
        }
        
        public UpdateProductRequest build() {
            return request;
        }
    }
    
    // ===============================
    // Inner Classes
    // ===============================
    
    /**
     * خيارات التحديث
     * Update options
     */
    @Schema(description = "خيارات التحديث / Update options")
    public static class UpdateOptions {
        
        /**
         * تحديث جزئي فقط
         * Partial update only
         */
        @Schema(description = "تحديث جزئي فقط / Partial update only", example = "true")
        private Boolean partialUpdate = true;
        
        /**
         * تحديث الطوابع الزمنية
         * Update timestamps
         */
        @Schema(description = "تحديث الطوابع الزمنية / Update timestamps", example = "true")
        private Boolean updateTimestamps = true;
        
        /**
         * التحقق من التكرار
         * Check for duplicates
         */
        @Schema(description = "التحقق من التكرار / Check for duplicates", example = "true")
        private Boolean checkForDuplicates = true;
        
        /**
         * التحقق من صحة البيانات
         * Validate data
         */
        @Schema(description = "التحقق من صحة البيانات / Validate data", example = "true")
        private Boolean validateData = true;
        
        /**
         * إشعار بالتحديث
         * Send update notification
         */
        @Schema(description = "إشعار بالتحديث / Send update notification", example = "false")
        private Boolean sendNotification = false;
        
        /**
         * تحديث المؤشرات
         * Update indexes
         */
        @Schema(description = "تحديث المؤشرات / Update indexes", example = "true")
        private Boolean updateIndexes = true;
        
        /**
         * تحديث الذاكرة المؤقتة
         * Update cache
         */
        @Schema(description = "تحديث الذاكرة المؤقتة / Update cache", example = "true")
        private Boolean updateCache = true;
        
        /**
         * تسجيل التغييرات
         * Log changes
         */
        @Schema(description = "تسجيل التغييرات / Log changes", example = "true")
        private Boolean logChanges = true;
        
        // Constructors
        public UpdateOptions() {}
        
        // Builder pattern
        public static Builder builder() {
            return new Builder();
        }
        
        public static class Builder {
            private final UpdateOptions options;
            
            public Builder() {
                this.options = new UpdateOptions();
            }
            
            public Builder partialUpdate(Boolean partialUpdate) {
                options.partialUpdate = partialUpdate;
                return this;
            }
            
            public Builder updateTimestamps(Boolean updateTimestamps) {
                options.updateTimestamps = updateTimestamps;
                return this;
            }
            
            public Builder checkForDuplicates(Boolean checkForDuplicates) {
                options.checkForDuplicates = checkForDuplicates;
                return this;
            }
            
            public Builder validateData(Boolean validateData) {
                options.validateData = validateData;
                return this;
            }
            
            public Builder sendNotification(Boolean sendNotification) {
                options.sendNotification = sendNotification;
                return this;
            }
            
            public Builder updateIndexes(Boolean updateIndexes) {
                options.updateIndexes = updateIndexes;
                return this;
            }
            
            public Builder updateCache(Boolean updateCache) {
                options.updateCache = updateCache;
                return this;
            }
            
            public Builder logChanges(Boolean logChanges) {
                options.logChanges = logChanges;
                return this;
            }
            
            public UpdateOptions build() {
                return options;
            }
        }
        
        // Getters and Setters
        public Boolean getPartialUpdate() { return partialUpdate; }
        public void setPartialUpdate(Boolean partialUpdate) { this.partialUpdate = partialUpdate; }
        
        public Boolean getUpdateTimestamps() { return updateTimestamps; }
        public void setUpdateTimestamps(Boolean updateTimestamps) { this.updateTimestamps = updateTimestamps; }
        
        public Boolean getCheckForDuplicates() { return checkForDuplicates; }
        public void setCheckForDuplicates(Boolean checkForDuplicates) { this.checkForDuplicates = checkForDuplicates; }
        
        public Boolean getValidateData() { return validateData; }
        public void setValidateData(Boolean validateData) { this.validateData = validateData; }
        
        public Boolean getSendNotification() { return sendNotification; }
        public void setSendNotification(Boolean sendNotification) { this.sendNotification = sendNotification; }
        
        public Boolean getUpdateIndexes() { return updateIndexes; }
        public void setUpdateIndexes(Boolean updateIndexes) { this.updateIndexes = updateIndexes; }
        
        public Boolean getUpdateCache() { return updateCache; }
        public void setUpdateCache(Boolean updateCache) { this.updateCache = updateCache; }
        
        public Boolean getLogChanges() { return logChanges; }
        public void setLogChanges(Boolean logChanges) { this.logChanges = logChanges; }
    }
    
    /**
     * معلومات تحديث الأسعار
     * Price update information
     */
    @Schema(description = "معلومات تحديث الأسعار / Price update information")
    public static class PriceUpdateInfo {
        
        /**
         * نوع تحديث السعر
         * Price update type
         */
        @Schema(description = "نوع تحديث السعر / Price update type", 
                allowableValues = {"FIXED", "PERCENTAGE", "INCREASE", "DECREASE"})
        private String updateType;
        
        /**
         * القيمة أو النسبة
         * Value or percentage
         */
        @Schema(description = "القيمة أو النسبة / Value or percentage", example = "10.5")
        private BigDecimal updateValue;
        
        /**
         * تحديث سعر المقارنة أيضاً
         * Update compare price as well
         */
        @Schema(description = "تحديث سعر المقارنة أيضاً / Update compare price as well", example = "true")
        private Boolean updateComparePrice = false;
        
        /**
         * الحد الأدنى للسعر
         * Minimum price limit
         */
        @Schema(description = "الحد الأدنى للسعر / Minimum price limit", example = "1.0")
        private BigDecimal minPriceLimit;
        
        /**
         * الحد الأقصى للسعر
         * Maximum price limit
         */
        @Schema(description = "الحد الأقصى للسعر / Maximum price limit", example = "1000.0")
        private BigDecimal maxPriceLimit;
        
        /**
         * تقريب السعر
         * Round price
         */
        @Schema(description = "تقريب السعر / Round price", example = "true")
        private Boolean roundPrice = true;
        
        /**
         * عدد الأرقام العشرية
         * Decimal places
         */
        @Schema(description = "عدد الأرقام العشرية / Decimal places", example = "2")
        private Integer decimalPlaces = 2;
        
        // Constructors
        public PriceUpdateInfo() {}
        
        public PriceUpdateInfo(String updateType, BigDecimal updateValue) {
            this.updateType = updateType;
            this.updateValue = updateValue;
        }
        
        // Builder pattern
        public static Builder builder() {
            return new Builder();
        }
        
        public static class Builder {
            private final PriceUpdateInfo info;
            
            public Builder() {
                this.info = new PriceUpdateInfo();
            }
            
            public Builder updateType(String updateType) {
                info.updateType = updateType;
                return this;
            }
            
            public Builder updateValue(BigDecimal updateValue) {
                info.updateValue = updateValue;
                return this;
            }
            
            public Builder updateComparePrice(Boolean updateComparePrice) {
                info.updateComparePrice = updateComparePrice;
                return this;
            }
            
            public Builder minPriceLimit(BigDecimal minPriceLimit) {
                info.minPriceLimit = minPriceLimit;
                return this;
            }
            
            public Builder maxPriceLimit(BigDecimal maxPriceLimit) {
                info.maxPriceLimit = maxPriceLimit;
                return this;
            }
            
            public Builder roundPrice(Boolean roundPrice) {
                info.roundPrice = roundPrice;
                return this;
            }
            
            public Builder decimalPlaces(Integer decimalPlaces) {
                info.decimalPlaces = decimalPlaces;
                return this;
            }
            
            public PriceUpdateInfo build() {
                return info;
            }
        }
        
        // Getters and Setters
        public String getUpdateType() { return updateType; }
        public void setUpdateType(String updateType) { this.updateType = updateType; }
        
        public BigDecimal getUpdateValue() { return updateValue; }
        public void setUpdateValue(BigDecimal updateValue) { this.updateValue = updateValue; }
        
        public Boolean getUpdateComparePrice() { return updateComparePrice; }
        public void setUpdateComparePrice(Boolean updateComparePrice) { this.updateComparePrice = updateComparePrice; }
        
        public BigDecimal getMinPriceLimit() { return minPriceLimit; }
        public void setMinPriceLimit(BigDecimal minPriceLimit) { this.minPriceLimit = minPriceLimit; }
        
        public BigDecimal getMaxPriceLimit() { return maxPriceLimit; }
        public void setMaxPriceLimit(BigDecimal maxPriceLimit) { this.maxPriceLimit = maxPriceLimit; }
        
        public Boolean getRoundPrice() { return roundPrice; }
        public void setRoundPrice(Boolean roundPrice) { this.roundPrice = roundPrice; }
        
        public Integer getDecimalPlaces() { return decimalPlaces; }
        public void setDecimalPlaces(Integer decimalPlaces) { this.decimalPlaces = decimalPlaces; }
    }
    
    /**
     * معلومات تحديث المخزون
     * Inventory update information
     */
    @Schema(description = "معلومات تحديث المخزون / Inventory update information")
    public static class InventoryUpdateInfo {
        
        /**
         * نوع تحديث المخزون
         * Inventory update type
         */
        @Schema(description = "نوع تحديث المخزون / Inventory update type", 
                allowableValues = {"SET", "INCREASE", "DECREASE", "ADJUSTMENT"})
        private String updateType;
        
        /**
         * الكمية
         * Quantity
         */
        @Schema(description = "الكمية / Quantity", example = "50")
        private Integer quantity;
        
        /**
         * سبب التحديث
         * Update reason
         */
        @Schema(description = "سبب التحديث / Update reason", example = "Stock replenishment")
        private String reason;
        
        /**
         * سبب التحديث بالعربية
         * Update reason in Arabic
         */
        @Schema(description = "سبب التحديث بالعربية / Update reason in Arabic", example = "إعادة تجهيز المخزون")
        private String reasonAr;
        
        /**
         * تحديث الحد الأدنى للمخزون
         * Update minimum stock level
         */
        @Schema(description = "تحديث الحد الأدنى للمخزون / Update minimum stock level", example = "true")
        private Boolean updateMinStockLevel = false;
        
        /**
         * الحد الأدنى الجديد للمخزون
         * New minimum stock level
         */
        @Schema(description = "الحد الأدنى الجديد للمخزون / New minimum stock level", example = "10")
        private Integer newMinStockLevel;
        
        /**
         * تسجيل حركة المخزون
         * Record inventory movement
         */
        @Schema(description = "تسجيل حركة المخزون / Record inventory movement", example = "true")
        private Boolean recordMovement = true;
        
        /**
         * معرف المرجع
         * Reference ID
         */
        @Schema(description = "معرف المرجع / Reference ID")
        private String referenceId;
        
        /**
         * نوع المرجع
         * Reference type
         */
        @Schema(description = "نوع المرجع / Reference type", example = "manual_adjustment")
        private String referenceType;
        
        // Constructors
        public InventoryUpdateInfo() {}
        
        public InventoryUpdateInfo(String updateType, Integer quantity, String reason) {
            this.updateType = updateType;
            this.quantity = quantity;
            this.reason = reason;
        }
        
        // Builder pattern
        public static Builder builder() {
            return new Builder();
        }
        
        public static class Builder {
            private final InventoryUpdateInfo info;
            
            public Builder() {
                this.info = new InventoryUpdateInfo();
            }
            
            public Builder updateType(String updateType) {
                info.updateType = updateType;
                return this;
            }
            
            public Builder quantity(Integer quantity) {
                info.quantity = quantity;
                return this;
            }
            
            public Builder reason(String reason, String reasonAr) {
                info.reason = reason;
                info.reasonAr = reasonAr;
                return this;
            }
            
            public Builder updateMinStockLevel(Boolean updateMinStockLevel) {
                info.updateMinStockLevel = updateMinStockLevel;
                return this;
            }
            
            public Builder newMinStockLevel(Integer newMinStockLevel) {
                info.newMinStockLevel = newMinStockLevel;
                return this;
            }
            
            public Builder recordMovement(Boolean recordMovement) {
                info.recordMovement = recordMovement;
                return this;
            }
            
            public Builder reference(String referenceId, String referenceType) {
                info.referenceId = referenceId;
                info.referenceType = referenceType;
                return this;
            }
            
            public InventoryUpdateInfo build() {
                return info;
            }
        }
        
        // Getters and Setters
        public String getUpdateType() { return updateType; }
        public void setUpdateType(String updateType) { this.updateType = updateType; }
        
        public Integer getQuantity() { return quantity; }
        public void setQuantity(Integer quantity) { this.quantity = quantity; }
        
        public String getReason() { return reason; }
        public void setReason(String reason) { this.reason = reason; }
        
        public String getReasonAr() { return reasonAr; }
        public void setReasonAr(String reasonAr) { this.reasonAr = reasonAr; }
        
        public Boolean getUpdateMinStockLevel() { return updateMinStockLevel; }
        public void setUpdateMinStockLevel(Boolean updateMinStockLevel) { this.updateMinStockLevel = updateMinStockLevel; }
        
        public Integer getNewMinStockLevel() { return newMinStockLevel; }
        public void setNewMinStockLevel(Integer newMinStockLevel) { this.newMinStockLevel = newMinStockLevel; }
        
        public Boolean getRecordMovement() { return recordMovement; }
        public void setRecordMovement(Boolean recordMovement) { this.recordMovement = recordMovement; }
        
        public String getReferenceId() { return referenceId; }
        public void setReferenceId(String referenceId) { this.referenceId = referenceId; }
        
        public String getReferenceType() { return referenceType; }
        public void setReferenceType(String referenceType) { this.referenceType = referenceType; }
    }
    
    /**
     * إعدادات SEO
     * SEO settings
     */
    @Schema(description = "إعدادات SEO / SEO settings")
    public static class SeoSettings {
        
        /**
         * عنوان SEO
         * SEO title
         */
        @Schema(description = "عنوان SEO / SEO title", example = "Smart Watch Pro - Best Fitness Tracker")
        private String seoTitle;
        
        /**
         * عنوان SEO بالعربية
         * SEO title in Arabic
         */
        @Schema(description = "عنوان SEO بالعربية / SEO title in Arabic", example = "ساعة ذكية برو - أفضل متتبع للياقة البدنية")
        private String seoTitleAr;
        
        /**
         * وصف SEO
         * SEO description
         */
        @Schema(description = "وصف SEO / SEO description")
        private String seoDescription;
        
        /**
         * وصف SEO بالعربية
         * SEO description in Arabic
         */
        @Schema(description = "وصف SEO بالعربية / SEO description in Arabic")
        private String seoDescriptionAr;
        
        /**
         * كلمات مفتاحية
         * Keywords
         */
        @Schema(description = "كلمات مفتاحية / Keywords", example = "[\"smartwatch\", \"fitness\", \"health\"]")
        private List<String> keywords;
        
        /**
         * كلمات مفتاحية بالعربية
         * Keywords in Arabic
         */
        @Schema(description = "كلمات مفتاحية بالعربية / Keywords in Arabic", example = "[\"ساعة ذكية\", \"لياقة\", \"صحة\"]")
        private List<String> keywordsAr;
        
        /**
         * تحديث تلقائي للـ SEO
         * Auto update SEO
         */
        @Schema(description = "تحديث تلقائي للـ SEO / Auto update SEO", example = "true")
        private Boolean autoUpdateSeo = true;
        
        // Constructors
        public SeoSettings() {}
        
        // Builder pattern
        public static Builder builder() {
            return new Builder();
        }
        
        public static class Builder {
            private final SeoSettings settings;
            
            public Builder() {
                this.settings = new SeoSettings();
            }
            
            public Builder seoTitle(String seoTitle, String seoTitleAr) {
                settings.seoTitle = seoTitle;
                settings.seoTitleAr = seoTitleAr;
                return this;
            }
            
            public Builder seoDescription(String seoDescription, String seoDescriptionAr) {
                settings.seoDescription = seoDescription;
                settings.seoDescriptionAr = seoDescriptionAr;
                return this;
            }
            
            public Builder keywords(List<String> keywords, List<String> keywordsAr) {
                settings.keywords = keywords;
                settings.keywordsAr = keywordsAr;
                return this;
            }
            
            public Builder autoUpdateSeo(Boolean autoUpdateSeo) {
                settings.autoUpdateSeo = autoUpdateSeo;
                return this;
            }
            
            public SeoSettings build() {
                return settings;
            }
        }
        
        // Getters and Setters
        public String getSeoTitle() { return seoTitle; }
        public void setSeoTitle(String seoTitle) { this.seoTitle = seoTitle; }
        
        public String getSeoTitleAr() { return seoTitleAr; }
        public void setSeoTitleAr(String seoTitleAr) { this.seoTitleAr = seoTitleAr; }
        
        public String getSeoDescription() { return seoDescription; }
        public void setSeoDescription(String seoDescription) { this.seoDescription = seoDescription; }
        
        public String getSeoDescriptionAr() { return seoDescriptionAr; }
        public void setSeoDescriptionAr(String seoDescriptionAr) { this.seoDescriptionAr = seoDescriptionAr; }
        
        public List<String> getKeywords() { return keywords; }
        public void setKeywords(List<String> keywords) { this.keywords = keywords; }
        
        public List<String> getKeywordsAr() { return keywordsAr; }
        public void setKeywordsAr(List<String> keywordsAr) { this.keywordsAr = keywordsAr; }
        
        public Boolean getAutoUpdateSeo() { return autoUpdateSeo; }
        public void setAutoUpdateSeo(Boolean autoUpdateSeo) { this.autoUpdateSeo = autoUpdateSeo; }
    }
    
    /**
     * معلومات التدقيق
     * Audit information
     */
    @Schema(description = "معلومات التدقيق / Audit information")
    public static class AuditInfo {
        
        /**
         * معرف المستخدم المحدث
         * Updated by user ID
         */
        @Schema(description = "معرف المستخدم المحدث / Updated by user ID")
        private UUID updatedBy;
        
        /**
         * سبب التحديث
         * Update reason
         */
        @Schema(description = "سبب التحديث / Update reason", example = "Price adjustment")
        private String updateReason;
        
        /**
         * سبب التحديث بالعربية
         * Update reason in Arabic
         */
        @Schema(description = "سبب التحديث بالعربية / Update reason in Arabic", example = "تعديل السعر")
        private String updateReasonAr;
        
        /**
         * ملاحظات التحديث
         * Update notes
         */
        @Schema(description = "ملاحظات التحديث / Update notes")
        private String updateNotes;
        
        /**
         * ملاحظات التحديث بالعربية
         * Update notes in Arabic
         */
        @Schema(description = "ملاحظات التحديث بالعربية / Update notes in Arabic")
        private String updateNotesAr;
        
        /**
         * نوع التحديث
         * Update type
         */
        @Schema(description = "نوع التحديث / Update type", example = "manual")
        private String updateType = "manual";
        
        /**
         * مصدر التحديث
         * Update source
         */
        @Schema(description = "مصدر التحديث / Update source", example = "admin_dashboard")
        private String updateSource;
        
        /**
         * بيانات إضافية
         * Additional data
         */
        @Schema(description = "بيانات إضافية / Additional data")
        private Map<String, Object> additionalData;
        
        // Constructors
        public AuditInfo() {}
        
        public AuditInfo(UUID updatedBy, String updateReason, String updateReasonAr) {
            this.updatedBy = updatedBy;
            this.updateReason = updateReason;
            this.updateReasonAr = updateReasonAr;
        }
        
        // Builder pattern
        public static Builder builder() {
            return new Builder();
        }
        
        public static class Builder {
            private final AuditInfo info;
            
            public Builder() {
                this.info = new AuditInfo();
            }
            
            public Builder updatedBy(UUID updatedBy) {
                info.updatedBy = updatedBy;
                return this;
            }
            
            public Builder updateReason(String updateReason, String updateReasonAr) {
                info.updateReason = updateReason;
                info.updateReasonAr = updateReasonAr;
                return this;
            }
            
            public Builder updateNotes(String updateNotes, String updateNotesAr) {
                info.updateNotes = updateNotes;
                info.updateNotesAr = updateNotesAr;
                return this;
            }
            
            public Builder updateType(String updateType) {
                info.updateType = updateType;
                return this;
            }
            
            public Builder updateSource(String updateSource) {
                info.updateSource = updateSource;
                return this;
            }
            
            public Builder additionalData(Map<String, Object> additionalData) {
                info.additionalData = additionalData;
                return this;
            }
            
            public AuditInfo build() {
                return info;
            }
        }
        
        // Getters and Setters
        public UUID getUpdatedBy() { return updatedBy; }
        public void setUpdatedBy(UUID updatedBy) { this.updatedBy = updatedBy; }
        
        public String getUpdateReason() { return updateReason; }
        public void setUpdateReason(String updateReason) { this.updateReason = updateReason; }
        
        public String getUpdateReasonAr() { return updateReasonAr; }
        public void setUpdateReasonAr(String updateReasonAr) { this.updateReasonAr = updateReasonAr; }
        
        public String getUpdateNotes() { return updateNotes; }
        public void setUpdateNotes(String updateNotes) { this.updateNotes = updateNotes; }
        
        public String getUpdateNotesAr() { return updateNotesAr; }
        public void setUpdateNotesAr(String updateNotesAr) { this.updateNotesAr = updateNotesAr; }
        
        public String getUpdateType() { return updateType; }
        public void setUpdateType(String updateType) { this.updateType = updateType; }
        
        public String getUpdateSource() { return updateSource; }
        public void setUpdateSource(String updateSource) { this.updateSource = updateSource; }
        
        public Map<String, Object> getAdditionalData() { return additionalData; }
        public void setAdditionalData(Map<String, Object> additionalData) { this.additionalData = additionalData; }
    }
    
    // ===============================
    // Utility Methods
    // ===============================
    
    /**
     * التحقق من وجود تحديثات
     * Check if has updates
     * 
     * @return boolean
     */
    public boolean hasUpdates() {
        return name != null || nameAr != null || sku != null || slug != null ||
               description != null || descriptionAr != null || 
               shortDescription != null || shortDescriptionAr != null ||
               price != null || comparePrice != null || costPrice != null ||
               weight != null || stockQuantity != null || minStockLevel != null ||
               categoryId != null || brandId != null || barcode != null ||
               trackInventory != null || isActive != null || isFeatured != null ||
               isDigital != null || requiresShipping != null ||
               attributes != null || tags != null;
    }
    
    /**
     * التحقق من وجود تحديثات أساسية
     * Check if has basic updates
     * 
     * @return boolean
     */
    public boolean hasBasicUpdates() {
        return name != null || price != null || stockQuantity != null || isActive != null;
    }
    
    /**
     * التحقق من وجود تحديثات متقدمة
     * Check if has advanced updates
     * 
     * @return boolean
     */
    public boolean hasAdvancedUpdates() {
        return priceUpdateInfo != null || inventoryUpdateInfo != null ||
               seoSettings != null || attributeUpdates != null;
    }
    
    /**
     * التحقق من وجود حقول محددة للتحديث
     * Check if has specific fields to update
     * 
     * @return boolean
     */
    public boolean hasSpecificFields() {
        return fieldsToUpdate != null && !fieldsToUpdate.isEmpty();
    }
    
    /**
     * التحقق من تحديث حقل محدد
     * Check if updating specific field
     * 
     * @param fieldName اسم الحقل
     * @return boolean
     */
    public boolean isUpdatingField(String fieldName) {
        return fieldsToUpdate != null && fieldsToUpdate.contains(fieldName);
    }
    
    /**
     * إضافة حقل للتحديث
     * Add field to update
     * 
     * @param fieldName اسم الحقل
     */
    public void addFieldToUpdate(String fieldName) {
        if (fieldsToUpdate == null) {
            fieldsToUpdate = new java.util.ArrayList<>();
        }
        if (!fieldsToUpdate.contains(fieldName)) {
            fieldsToUpdate.add(fieldName);
        }
    }
    
    /**
     * إزالة حقل من التحديث
     * Remove field from update
     * 
     * @param fieldName اسم الحقل
     */
    public void removeFieldFromUpdate(String fieldName) {
        if (fieldsToUpdate != null) {
            fieldsToUpdate.remove(fieldName);
        }
    }
    
    /**
     * الحصول على عدد الحقول المطلوب تحديثها
     * Get number of fields to update
     * 
     * @return int
     */
    public int getUpdateFieldsCount() {
        if (fieldsToUpdate != null) {
            return fieldsToUpdate.size();
        }
        
        int count = 0;
        if (name != null) count++;
        if (nameAr != null) count++;
        if (sku != null) count++;
        if (slug != null) count++;
        if (description != null) count++;
        if (descriptionAr != null) count++;
        if (shortDescription != null) count++;
        if (shortDescriptionAr != null) count++;
        if (price != null) count++;
        if (comparePrice != null) count++;
        if (costPrice != null) count++;
        if (weight != null) count++;
        if (stockQuantity != null) count++;
        if (minStockLevel != null) count++;
        if (categoryId != null) count++;
        if (brandId != null) count++;
        if (barcode != null) count++;
        if (trackInventory != null) count++;
        if (isActive != null) count++;
        if (isFeatured != null) count++;
        if (isDigital != null) count++;
        if (requiresShipping != null) count++;
        if (attributes != null) count++;
        if (tags != null) count++;
        
        return count;
    }
    
    // ===============================
    // Getters and Setters
    // ===============================
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getNameAr() { return nameAr; }
    public void setNameAr(String nameAr) { this.nameAr = nameAr; }
    
    public String getSku() { return sku; }
    public void setSku(String sku) { this.sku = sku; }
    
    public String getSlug() { return slug; }
    public void setSlug(String slug) { this.slug = slug; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public String getDescriptionAr() { return descriptionAr; }
    public void setDescriptionAr(String descriptionAr) { this.descriptionAr = descriptionAr; }
    
    public String getShortDescription() { return shortDescription; }
    public void setShortDescription(String shortDescription) { this.shortDescription = shortDescription; }
    
    public String getShortDescriptionAr() { return shortDescriptionAr; }
    public void setShortDescriptionAr(String shortDescriptionAr) { this.shortDescriptionAr = shortDescriptionAr; }
    
    public BigDecimal getPrice() { return price; }
    public void setPrice(BigDecimal price) { this.price = price; }
    
    public BigDecimal getComparePrice() { return comparePrice; }
    public void setComparePrice(BigDecimal comparePrice) { this.comparePrice = comparePrice; }
    
    public BigDecimal getCostPrice() { return costPrice; }
    public void setCostPrice(BigDecimal costPrice) { this.costPrice = costPrice; }
    
    public BigDecimal getWeight() { return weight; }
    public void setWeight(BigDecimal weight) { this.weight = weight; }
    
    public Integer getStockQuantity() { return stockQuantity; }
    public void setStockQuantity(Integer stockQuantity) { this.stockQuantity = stockQuantity; }
    
    public Integer getMinStockLevel() { return minStockLevel; }
    public void setMinStockLevel(Integer minStockLevel) { this.minStockLevel = minStockLevel; }
    
    public UUID getCategoryId() { return categoryId; }
    public void setCategoryId(UUID categoryId) { this.categoryId = categoryId; }
    
    public UUID getBrandId() { return brandId; }
    public void setBrandId(UUID brandId) { this.brandId = brandId; }
    
    public String getBarcode() { return barcode; }
    public void setBarcode(String barcode) { this.barcode = barcode; }
    
    public Boolean getTrackInventory() { return trackInventory; }
    public void setTrackInventory(Boolean trackInventory) { this.trackInventory = trackInventory; }
    
    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }
    
    public Boolean getIsFeatured() { return isFeatured; }
    public void setIsFeatured(Boolean isFeatured) { this.isFeatured = isFeatured; }
    
    public Boolean getIsDigital() { return isDigital; }
    public void setIsDigital(Boolean isDigital) { this.isDigital = isDigital; }
    
    public Boolean getRequiresShipping() { return requiresShipping; }
    public void setRequiresShipping(Boolean requiresShipping) { this.requiresShipping = requiresShipping; }
    
    public String getAttributes() { return attributes; }
    public void setAttributes(String attributes) { this.attributes = attributes; }
    
    public List<String> getTags() { return tags; }
    public void setTags(List<String> tags) { this.tags = tags; }
    
    public List<String> getFieldsToUpdate() { return fieldsToUpdate; }
    public void setFieldsToUpdate(List<String> fieldsToUpdate) { this.fieldsToUpdate = fieldsToUpdate; }
    
    public UpdateOptions getUpdateOptions() { return updateOptions; }
    public void setUpdateOptions(UpdateOptions updateOptions) { this.updateOptions = updateOptions; }
    
    public Map<String, Object> getAttributeUpdates() { return attributeUpdates; }
    public void setAttributeUpdates(Map<String, Object> attributeUpdates) { this.attributeUpdates = attributeUpdates; }
    
    public PriceUpdateInfo getPriceUpdateInfo() { return priceUpdateInfo; }
    public void setPriceUpdateInfo(PriceUpdateInfo priceUpdateInfo) { this.priceUpdateInfo = priceUpdateInfo; }
    
    public InventoryUpdateInfo getInventoryUpdateInfo() { return inventoryUpdateInfo; }
    public void setInventoryUpdateInfo(InventoryUpdateInfo inventoryUpdateInfo) { this.inventoryUpdateInfo = inventoryUpdateInfo; }
    
    public SeoSettings getSeoSettings() { return seoSettings; }
    public void setSeoSettings(SeoSettings seoSettings) { this.seoSettings = seoSettings; }
    
    public AuditInfo getAuditInfo() { return auditInfo; }
    public void setAuditInfo(AuditInfo auditInfo) { this.auditInfo = auditInfo; }
    
    // ===============================
    // toString Method
    // ===============================
    
    @Override
    public String toString() {
        return "UpdateProductRequest{" +
                "name='" + name + '\'' +
                ", nameAr='" + nameAr + '\'' +
                ", sku='" + sku + '\'' +
                ", slug='" + slug + '\'' +
                ", price=" + price +
                ", comparePrice=" + comparePrice +
                ", stockQuantity=" + stockQuantity +
                ", categoryId=" + categoryId +
                ", brandId=" + brandId +
                ", isActive=" + isActive +
                ", isFeatured=" + isFeatured +
                ", fieldsToUpdate=" + fieldsToUpdate +
                ", updateOptions=" + updateOptions +
                ", hasAdvancedUpdates=" + hasAdvancedUpdates() +
                '}';
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/application/service/ProductImageService.java ---- */

package com.ecommerce.multistore.product.application.service;

public class ProductImageService {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/application/service/ProductService.java ---- */

package com.ecommerce.multistore.product.application.service;

import com.ecommerce.multistore.product.application.dto.CreateProductRequest;
import com.ecommerce.multistore.product.application.dto.ProductResponse;
import com.ecommerce.multistore.product.domain.Product;
import com.ecommerce.multistore.product.infrastructure.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * خدمة إدارة المنتجات
 * تحتوي على جميع العمليات المتعلقة بالمنتجات مثل الإنشاء والتحديث والبحث
 * 
 * Product Management Service
 * Contains all product-related operations such as creation, update, and search
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Service
@Transactional
public class ProductService {

    private final ProductRepository productRepository;

    /**
     * Constructor لحقن Dependencies
     * Constructor for dependency injection
     * 
     * @param productRepository مستودع المنتجات للتعامل مع قاعدة البيانات
     */
    @Autowired
    public ProductService(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    /**
     * إنشاء منتج جديد
     * Creates a new product with validation
     * 
     * @param request بيانات المنتج الجديد
     * @return ProductResponse بيانات المنتج المُنشأ
     * @throws IllegalArgumentException إذا كان SKU أو Slug مُستخدم مسبقاً
     * 
     * @see CreateProductRequest
     * @see ProductResponse
     */
    public ProductResponse createProduct(CreateProductRequest request) {
        // التحقق من عدم تكرار SKU
        validateProductUniqueness(request.getSku(), request.getSlug());

        // إنشاء كائن المنتج
        Product product = buildProductFromRequest(request);
        
        // توليد Slug إذا لم يُحدد
        if (product.getSlug() == null || product.getSlug().trim().isEmpty()) {
            product.setSlug(generateSlug(product.getName()));
        }
        
        // حفظ المنتج
        Product savedProduct = productRepository.save(product);
        
        // تحويل إلى Response وإرجاع النتيجة
        return convertToResponse(savedProduct);
    }

    /**
     * البحث عن منتج بواسطة UUID
     * Finds a product by UUID
     * 
     * @param id المعرف الفريد للمنتج
     * @return Optional<ProductResponse> المنتج إذا وُجد، أو Optional.empty()
     */
    @Transactional(readOnly = true)
    public Optional<ProductResponse> findById(UUID id) {
        return productRepository.findById(id)
                .map(this::convertToResponse);
    }

    /**
     * البحث عن منتج بواسطة Display ID
     * Finds a product by display ID
     * 
     * @param displayId المعرف المعروض للمنتج (مثل PRD-000001)
     * @return Optional<ProductResponse> المنتج إذا وُجد، أو Optional.empty()
     */
    @Transactional(readOnly = true)
    public Optional<ProductResponse> findByDisplayId(String displayId) {
        return productRepository.findByDisplayId(displayId)
                .map(this::convertToResponse);
    }

    /**
     * البحث عن منتج بواسطة SKU
     * Finds a product by SKU
     * 
     * @param sku رمز المنتج
     * @return Optional<ProductResponse> المنتج إذا وُجد، أو Optional.empty()
     */
    @Transactional(readOnly = true)
    public Optional<ProductResponse> findBySku(String sku) {
        return productRepository.findBySku(sku)
                .map(this::convertToResponse);
    }

    /**
     * البحث عن منتج بواسطة Slug
     * Finds a product by slug
     * 
     * @param slug الرابط الودود
     * @return Optional<ProductResponse> المنتج إذا وُجد، أو Optional.empty()
     */
    @Transactional(readOnly = true)
    public Optional<ProductResponse> findBySlug(String slug) {
        return productRepository.findBySlug(slug)
                .map(this::convertToResponse);
    }

    /**
     * الحصول على جميع المنتجات مع الصفحات
     * Retrieves all products with pagination
     * 
     * @param page رقم الصفحة (يبدأ من 0)
     * @param size عدد العناصر في الصفحة
     * @param sortBy الحقل المطلوب ترتيبه
     * @param sortDir اتجاه الترتيب (asc أو desc)
     * @return Page<ProductResponse> صفحة من المنتجات
     */
    @Transactional(readOnly = true)
    public Page<ProductResponse> getAllProducts(int page, int size, String sortBy, String sortDir) {
        Sort sort = sortDir.equalsIgnoreCase("desc") ? 
                   Sort.by(sortBy).descending() : 
                   Sort.by(sortBy).ascending();
        
        Pageable pageable = PageRequest.of(page, size, sort);
        
        return productRepository.findAll(pageable)
                .map(this::convertToResponse);
    }

    /**
     * الحصول على المنتجات النشطة فقط
     * Retrieves active products only
     * 
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return Page<ProductResponse> صفحة من المنتجات النشطة
     */
    @Transactional(readOnly = true)
    public Page<ProductResponse> getActiveProducts(int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        return productRepository.findByIsActiveTrue(pageable)
                .map(this::convertToResponse);
    }

    /**
     * الحصول على المنتجات المميزة
     * Retrieves featured products
     * 
     * @return List<ProductResponse> قائمة بالمنتجات المميزة
     */
    @Transactional(readOnly = true)
    public List<ProductResponse> getFeaturedProducts() {
        return productRepository.findByIsFeaturedTrueAndIsActiveTrue()
                .stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    /**
     * البحث في المنتجات بواسطة النص
     * Search products by text
     * 
     * @param searchTerm مصطلح البحث
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return Page<ProductResponse> صفحة من نتائج البحث
     */
    @Transactional(readOnly = true)
    public Page<ProductResponse> searchProducts(String searchTerm, int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("name").ascending());
        return productRepository.searchProducts(searchTerm, pageable)
                .map(this::convertToResponse);
    }

    /**
     * البحث بواسطة الفئة
     * Find products by category
     * 
     * @param categoryId معرف الفئة
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return Page<ProductResponse> صفحة من المنتجات
     */
    @Transactional(readOnly = true)
    public Page<ProductResponse> getProductsByCategory(UUID categoryId, int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("name").ascending());
        return productRepository.findByCategoryIdAndIsActiveTrue(categoryId, pageable)
                .map(this::convertToResponse);
    }

    /**
     * البحث بواسطة العلامة التجارية
     * Find products by brand
     * 
     * @param brandId معرف العلامة التجارية
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return Page<ProductResponse> صفحة من المنتجات
     */
    @Transactional(readOnly = true)
    public Page<ProductResponse> getProductsByBrand(UUID brandId, int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("name").ascending());
        return productRepository.findByBrandIdAndIsActiveTrue(brandId, pageable)
                .map(this::convertToResponse);
    }

    /**
     * البحث في نطاق سعري
     * Find products by price range
     * 
     * @param minPrice أقل سعر
     * @param maxPrice أعلى سعر
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @return Page<ProductResponse> صفحة من المنتجات
     */
    @Transactional(readOnly = true)
    public Page<ProductResponse> getProductsByPriceRange(
            BigDecimal minPrice, BigDecimal maxPrice, int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("price").ascending());
        return productRepository.findByPriceBetweenAndIsActiveTrue(minPrice, maxPrice, pageable)
                .map(this::convertToResponse);
    }

    /**
     * تحديث بيانات المنتج
     * Update product information
     * 
     * @param productId معرف المنتج
     * @param request البيانات الجديدة
     * @return ProductResponse المنتج المحدث
     * @throws IllegalArgumentException إذا لم يوجد المنتج
     */
    public ProductResponse updateProduct(UUID productId, CreateProductRequest request) {
        Product product = productRepository.findById(productId)
                .orElseThrow(() -> new IllegalArgumentException("Product not found with ID: " + productId));

        // التحقق من تكرار SKU إذا تم تغييره
        if (!product.getSku().equals(request.getSku()) && 
            productRepository.existsBySku(request.getSku())) {
            throw new IllegalArgumentException("SKU already exists: " + request.getSku());
        }

        // تحديث البيانات
        updateProductFromRequest(product, request);
        product.setUpdatedAt(LocalDateTime.now());

        Product updatedProduct = productRepository.save(product);
        return convertToResponse(updatedProduct);
    }

    /**
     * تحديث حالة المنتج (نشط/غير نشط)
     * Update product status (active/inactive)
     * 
     * @param productId معرف المنتج
     * @param isActive الحالة الجديدة
     * @return ProductResponse المنتج المحدث
     * @throws IllegalArgumentException إذا لم يوجد المنتج
     */
    public ProductResponse updateProductStatus(UUID productId, Boolean isActive) {
        Product product = productRepository.findById(productId)
                .orElseThrow(() -> new IllegalArgumentException("Product not found with ID: " + productId));

        product.setIsActive(isActive);
        product.setUpdatedAt(LocalDateTime.now());

        Product updatedProduct = productRepository.save(product);
        return convertToResponse(updatedProduct);
    }

    /**
     * تحديث مخزون المنتج
     * Update product stock
     * 
     * @param productId معرف المنتج
     * @param newQuantity الكمية الجديدة
     * @return ProductResponse المنتج المحدث
     * @throws IllegalArgumentException إذا لم يوجد المنتج أو كانت الكمية سالبة
     */
    public ProductResponse updateProductStock(UUID productId, Integer newQuantity) {
        if (newQuantity < 0) {
            throw new IllegalArgumentException("Stock quantity cannot be negative");
        }

        Product product = productRepository.findById(productId)
                .orElseThrow(() -> new IllegalArgumentException("Product not found with ID: " + productId));

        product.updateStock(newQuantity);
        Product updatedProduct = productRepository.save(product);
        return convertToResponse(updatedProduct);
    }

    /**
     * حذف المنتج
     * Delete product
     * 
     * @param productId معرف المنتج
     * @throws IllegalArgumentException إذا لم يوجد المنتج
     */
    public void deleteProduct(UUID productId) {
        if (!productRepository.existsById(productId)) {
            throw new IllegalArgumentException("Product not found with ID: " + productId);
        }
        productRepository.deleteById(productId);
    }

    /**
     * الحصول على المنتجات ذات المخزون المنخفض
     * Get products with low stock
     * 
     * @return List<ProductResponse> قائمة بالمنتجات ذات المخزون المنخفض
     */
    @Transactional(readOnly = true)
    public List<ProductResponse> getLowStockProducts() {
        return productRepository.findLowStockProducts()
                .stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    /**
     * الحصول على المنتجات غير المتوفرة
     * Get out of stock products
     * 
     * @return List<ProductResponse> قائمة بالمنتجات غير المتوفرة
     */
    @Transactional(readOnly = true)
    public List<ProductResponse> getOutOfStockProducts() {
        return productRepository.findOutOfStockProducts()
                .stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    // ===============================
    // Private Helper Methods
    // ===============================

    /**
     * التحقق من عدم تكرار SKU و Slug
     * Validates that SKU and slug are unique
     * 
     * @param sku رمز المنتج
     * @param slug الرابط الودود
     * @throws IllegalArgumentException إذا كان SKU أو Slug مُستخدم مسبقاً
     */
    private void validateProductUniqueness(String sku, String slug) {
        if (productRepository.existsBySku(sku)) {
            throw new IllegalArgumentException("SKU already exists: " + sku);
        }
        
        if (slug != null && !slug.trim().isEmpty() && productRepository.existsBySlug(slug)) {
            throw new IllegalArgumentException("Slug already exists: " + slug);
        }
    }

    /**
     * بناء كائن المنتج من طلب الإنشاء
     * Builds Product entity from CreateProductRequest
     * 
     * @param request بيانات المنتج الجديد
     * @return Product كائن المنتج الجديد
     */
    private Product buildProductFromRequest(CreateProductRequest request) {
        Product product = new Product();
        updateProductFromRequest(product, request);
        return product;
    }

    /**
     * تحديث كائن المنتج من الطلب
     * Updates Product entity from request
     * 
     * @param product كائن المنتج
     * @param request بيانات التحديث
     */
    private void updateProductFromRequest(Product product, CreateProductRequest request) {
        product.setName(request.getName());
        product.setNameAr(request.getNameAr());
        product.setSku(request.getSku());
        product.setSlug(request.getSlug());
        product.setDescription(request.getDescription());
        product.setDescriptionAr(request.getDescriptionAr());
        product.setShortDescription(request.getShortDescription());
        product.setShortDescriptionAr(request.getShortDescriptionAr());
        product.setPrice(request.getPrice());
        product.setComparePrice(request.getComparePrice());
        product.setCostPrice(request.getCostPrice());
        product.setWeight(request.getWeight());
        product.setStockQuantity(request.getStockQuantity());
        product.setMinStockLevel(request.getMinStockLevel());
        product.setCategoryId(request.getCategoryId());
        product.setBrandId(request.getBrandId());
        product.setBarcode(request.getBarcode());
        product.setTrackInventory(request.getTrackInventory());
        product.setIsActive(request.getIsActive());
        product.setIsFeatured(request.getIsFeatured());
        product.setIsDigital(request.getIsDigital());
        product.setRequiresShipping(request.getRequiresShipping());
        product.setAttributes(request.getAttributes());
        product.setTags(request.getTags());
    }

    /**
     * توليد Slug من اسم المنتج
     * Generates slug from product name
     * 
     * @param name اسم المنتج
     * @return String الرابط الودود
     */
    private String generateSlug(String name) {
        if (name == null || name.trim().isEmpty()) {
            return "product-" + System.currentTimeMillis();
        }
        
        String slug = name.toLowerCase()
                         .replaceAll("[^a-z0-9\\s-]", "")
                         .replaceAll("\\s+", "-")
                         .replaceAll("-+", "-")
                         .replaceAll("^-|-$", "");
        
        // التأكد من عدم تكرار الـ slug
        String originalSlug = slug;
        int counter = 1;
        while (productRepository.existsBySlug(slug)) {
            slug = originalSlug + "-" + counter++;
        }
        
        return slug;
    }

    /**
     * تحويل كائن Product إلى ProductResponse
     * Converts Product entity to ProductResponse DTO
     * 
     * @param product كائن المنتج
     * @return ProductResponse DTO للاستجابة
     */
    private ProductResponse convertToResponse(Product product) {
        ProductResponse response = new ProductResponse();
        response.setId(product.getId());
        response.setDisplayId(product.getDisplayId());
        response.setName(product.getName());
        response.setNameAr(product.getNameAr());
        response.setSlug(product.getSlug());
        response.setDescription(product.getDescription());
        response.setDescriptionAr(product.getDescriptionAr());
        response.setShortDescription(product.getShortDescription());
        response.setShortDescriptionAr(product.getShortDescriptionAr());
        response.setSku(product.getSku());
        response.setBarcode(product.getBarcode());
        response.setCategoryId(product.getCategoryId());
        response.setBrandId(product.getBrandId());
        response.setPrice(product.getPrice());
        response.setComparePrice(product.getComparePrice());
        response.setCostPrice(product.getCostPrice());
        response.setWeight(product.getWeight());
        response.setStockQuantity(product.getStockQuantity());
        response.setMinStockLevel(product.getMinStockLevel());
        response.setTrackInventory(product.getTrackInventory());
        response.setIsActive(product.getIsActive());
        response.setIsFeatured(product.getIsFeatured());
        response.setIsDigital(product.getIsDigital());
        response.setRequiresShipping(product.getRequiresShipping());
        response.setAttributes(product.getAttributes());
        response.setTags(product.getTags());
        response.setCreatedAt(product.getCreatedAt());
        response.setUpdatedAt(product.getUpdatedAt());
        
        // Business Logic Fields
        response.setIsAvailable(product.isAvailable());
        response.setIsLowStock(product.isLowStock());
        response.setDiscountPercentage(product.getDiscountPercentage());
        
        return response;
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/domain/Product.java ---- */

package com.ecommerce.multistore.product.domain;

import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.JdbcTypeCode;
import org.hibernate.type.SqlTypes;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.UUID;

@Entity
@Table(name = "products")
public class Product {
    
    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private UUID id;
    
    @Column(name = "display_id", unique = true)
    private String displayId;
    
    @Column(nullable = false)
    private String name;
    
    @Column(name = "name_ar")
    private String nameAr;
    
    @Column(unique = true, nullable = false)
    private String slug;
    
    @Column(columnDefinition = "TEXT")
    private String description;
    
    @Column(name = "description_ar", columnDefinition = "TEXT")
    private String descriptionAr;
    
    @Column(name = "short_description", columnDefinition = "TEXT")
    private String shortDescription;
    
    @Column(name = "short_description_ar", columnDefinition = "TEXT")
    private String shortDescriptionAr;
    
    @Column(unique = true, nullable = false)
    private String sku;
    
    private String barcode;
    
    @Column(name = "category_id")
    private UUID categoryId;
    
    @Column(name = "brand_id")
    private UUID brandId;
    
    @Column(nullable = false, precision = 10, scale = 2)
    private BigDecimal price;
    
    @Column(name = "compare_price", precision = 10, scale = 2)
    private BigDecimal comparePrice;
    
    @Column(name = "cost_price", precision = 10, scale = 2)
    private BigDecimal costPrice;
    
    @Column(precision = 8, scale = 3)
    private BigDecimal weight;
    
    @Column(name = "stock_quantity")
    private Integer stockQuantity = 0;
    
    @Column(name = "min_stock_level")
    private Integer minStockLevel = 5;
    
    @Column(name = "track_inventory")
    private Boolean trackInventory = true;
    
    @Column(name = "is_active")
    private Boolean isActive = true;
    
    @Column(name = "is_featured")
    private Boolean isFeatured = false;
    
    @Column(name = "is_digital")
    private Boolean isDigital = false;
    
    @Column(name = "requires_shipping")
    private Boolean requiresShipping = true;
    
    @Column(columnDefinition = "JSONB")
    private String attributes;
    
    @Column(name = "tags", columnDefinition = "TEXT")
    private String tags;
    
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
    
    @PrePersist
    protected void onCreate() {
        if (this.createdAt == null) {
            this.createdAt = LocalDateTime.now();
        }
        if (this.updatedAt == null) {
            this.updatedAt = LocalDateTime.now();
        }
    }
    
    @PreUpdate
    protected void onUpdate() {
        this.updatedAt = LocalDateTime.now();
    }
    
    // Constructors
    public Product() {}
    
    // Business Methods
    
    /**
     * تحديث كمية المخزون
     * Updates stock quantity
     */
    public void updateStock(Integer newQuantity) {
        this.stockQuantity = newQuantity;
        this.updatedAt = LocalDateTime.now();
    }
    
    /**
     * التحقق من توفر المنتج
     * Checks if product is available
     */
    public Boolean isAvailable() {
        return this.isActive && this.stockQuantity > 0;
    }
    
    /**
     * التحقق من انخفاض المخزون
     * Checks if stock is low
     */
    public Boolean isLowStock() {
        return this.stockQuantity <= this.minStockLevel;
    }
    
  
 /**
 * حساب نسبة الخصم
 * Calculates discount percentage
 */
public BigDecimal getDiscountPercentage() {
    if (this.comparePrice != null && this.comparePrice.compareTo(BigDecimal.ZERO) > 0) {
        BigDecimal discount = this.comparePrice.subtract(this.price);
        return discount.divide(this.comparePrice, 4, RoundingMode.HALF_UP)
                .multiply(new BigDecimal("100"));
    }
    return BigDecimal.ZERO;
}
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getNameAr() { return nameAr; }
    public void setNameAr(String nameAr) { this.nameAr = nameAr; }
    
    public String getSlug() { return slug; }
    public void setSlug(String slug) { this.slug = slug; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public String getDescriptionAr() { return descriptionAr; }
    public void setDescriptionAr(String descriptionAr) { this.descriptionAr = descriptionAr; }
    
    public String getShortDescription() { return shortDescription; }
    public void setShortDescription(String shortDescription) { this.shortDescription = shortDescription; }
    
    public String getShortDescriptionAr() { return shortDescriptionAr; }
    public void setShortDescriptionAr(String shortDescriptionAr) { this.shortDescriptionAr = shortDescriptionAr; }
    
    public String getSku() { return sku; }
    public void setSku(String sku) { this.sku = sku; }
    
    public String getBarcode() { return barcode; }
    public void setBarcode(String barcode) { this.barcode = barcode; }
    
    public UUID getCategoryId() { return categoryId; }
    public void setCategoryId(UUID categoryId) { this.categoryId = categoryId; }
    
    public UUID getBrandId() { return brandId; }
    public void setBrandId(UUID brandId) { this.brandId = brandId; }
    
    public BigDecimal getPrice() { return price; }
    public void setPrice(BigDecimal price) { this.price = price; }
    
    public BigDecimal getComparePrice() { return comparePrice; }
    public void setComparePrice(BigDecimal comparePrice) { this.comparePrice = comparePrice; }
    
    public BigDecimal getCostPrice() { return costPrice; }
    public void setCostPrice(BigDecimal costPrice) { this.costPrice = costPrice; }
    
    public BigDecimal getWeight() { return weight; }
    public void setWeight(BigDecimal weight) { this.weight = weight; }
    
    public Integer getStockQuantity() { return stockQuantity; }
    public void setStockQuantity(Integer stockQuantity) { this.stockQuantity = stockQuantity; }
    
    public Integer getMinStockLevel() { return minStockLevel; }
    public void setMinStockLevel(Integer minStockLevel) { this.minStockLevel = minStockLevel; }
    
    public Boolean getTrackInventory() { return trackInventory; }
    public void setTrackInventory(Boolean trackInventory) { this.trackInventory = trackInventory; }
    
    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }
    
    public Boolean getIsFeatured() { return isFeatured; }
    public void setIsFeatured(Boolean isFeatured) { this.isFeatured = isFeatured; }
    
    public Boolean getIsDigital() { return isDigital; }
    public void setIsDigital(Boolean isDigital) { this.isDigital = isDigital; }
    
    public Boolean getRequiresShipping() { return requiresShipping; }
    public void setRequiresShipping(Boolean requiresShipping) { this.requiresShipping = requiresShipping; }
    
    public String getAttributes() { return attributes; }
    public void setAttributes(String attributes) { this.attributes = attributes; }
    
    public String getTags() { return tags; }
    public void setTags(String tags) { this.tags = tags; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/domain/ProductImage.java ---- */

package com.ecommerce.multistore.product.domain;

public class ProductImage {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/infrastructure/ProductImageRepository.java ---- */

package com.ecommerce.multistore.product.infrastructure;

public class ProductImageRepository {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/infrastructure/ProductRepository.java ---- */

package com.ecommerce.multistore.product.infrastructure;

import com.ecommerce.multistore.product.domain.Product;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * مستودع المنتجات - للتعامل مع قاعدة البيانات
 * Product Repository - For database operations
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Repository
public interface ProductRepository extends JpaRepository<Product, UUID> {
    
    /**
     * البحث بواسطة Display ID
     * Find by display ID
     * 
     * @param displayId معرف العرض
     * @return Optional<Product>
     */
    Optional<Product> findByDisplayId(String displayId);
    
    /**
     * البحث بواسطة SKU
     * Find by SKU
     * 
     * @param sku رمز المنتج
     * @return Optional<Product>
     */
    Optional<Product> findBySku(String sku);
    
    /**
     * البحث بواسطة Slug
     * Find by slug
     * 
     * @param slug الرابط الودود
     * @return Optional<Product>
     */
    Optional<Product> findBySlug(String slug);
    
    /**
     * التحقق من وجود SKU
     * Check if SKU exists
     * 
     * @param sku رمز المنتج
     * @return boolean
     */
    boolean existsBySku(String sku);
    
    /**
     * التحقق من وجود Slug
     * Check if slug exists
     * 
     * @param slug الرابط الودود
     * @return boolean
     */
    boolean existsBySlug(String slug);
    
    /**
     * البحث في المنتجات النشطة فقط
     * Find active products only
     * 
     * @param pageable الصفحات
     * @return Page<Product>
     */
    Page<Product> findByIsActiveTrue(Pageable pageable);
    
    /**
     * البحث في المنتجات المميزة
     * Find featured products
     * 
     * @return List<Product>
     */
    List<Product> findByIsFeaturedTrueAndIsActiveTrue();
    
    /**
     * البحث بواسطة الفئة
     * Find by category
     * 
     * @param categoryId معرف الفئة
     * @param pageable الصفحات
     * @return Page<Product>
     */
    Page<Product> findByCategoryIdAndIsActiveTrue(UUID categoryId, Pageable pageable);
    
    /**
     * البحث بواسطة العلامة التجارية
     * Find by brand
     * 
     * @param brandId معرف العلامة التجارية
     * @param pageable الصفحات
     * @return Page<Product>
     */
    Page<Product> findByBrandIdAndIsActiveTrue(UUID brandId, Pageable pageable);
    
    /**
     * البحث في نطاق سعري
     * Find by price range
     * 
     * @param minPrice أقل سعر
     * @param maxPrice أعلى سعر
     * @param pageable الصفحات
     * @return Page<Product>
     */
    Page<Product> findByPriceBetweenAndIsActiveTrue(
        BigDecimal minPrice, 
        BigDecimal maxPrice, 
        Pageable pageable
    );
    
    /**
     * البحث النصي في اسم المنتج ووصفه
     * Text search in product name and description
     * 
     * @param searchTerm مصطلح البحث
     * @param pageable الصفحات
     * @return Page<Product>
     */
    @Query("SELECT p FROM Product p WHERE " +
           "(LOWER(p.name) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR " +
           "LOWER(p.nameAr) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR " +
           "LOWER(p.description) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR " +
           "LOWER(p.descriptionAr) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR " +
           "LOWER(p.sku) LIKE LOWER(CONCAT('%', :searchTerm, '%'))) " +
           "AND p.isActive = true")
    Page<Product> searchProducts(@Param("searchTerm") String searchTerm, Pageable pageable);
    
    /**
     * المنتجات ذات المخزون المنخفض
     * Products with low stock
     * 
     * @return List<Product>
     */
    @Query("SELECT p FROM Product p WHERE " +
           "p.trackInventory = true AND " +
           "p.stockQuantity <= p.minStockLevel AND " +
           "p.isActive = true")
    List<Product> findLowStockProducts();
    
    /**
     * المنتجات غير المتوفرة
     * Out of stock products
     * 
     * @return List<Product>
     */
    @Query("SELECT p FROM Product p WHERE " +
           "p.trackInventory = true AND " +
           "p.stockQuantity = 0 AND " +
           "p.isActive = true")
    List<Product> findOutOfStockProducts();
    
    /**
     * عدد المنتجات حسب الفئة
     * Count products by category
     * 
     * @param categoryId معرف الفئة
     * @return Long
     */
    long countByCategoryIdAndIsActiveTrue(UUID categoryId);
    
    /**
     * عدد المنتجات حسب العلامة التجارية
     * Count products by brand
     * 
     * @param brandId معرف العلامة التجارية
     * @return Long
     */
    long countByBrandIdAndIsActiveTrue(UUID brandId);
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/infrastructure/web/ProductController.java ---- */

package com.ecommerce.multistore.product.infrastructure.web;

import com.ecommerce.multistore.product.application.dto.CreateProductRequest;
import com.ecommerce.multistore.product.application.dto.ProductResponse;
import com.ecommerce.multistore.product.application.service.ProductService;
import com.ecommerce.multistore.shared.dto.ApiResponse;
import com.ecommerce.multistore.shared.dto.PaginatedResponse;
import com.ecommerce.multistore.shared.exception.ResourceNotFoundException;
import com.ecommerce.multistore.shared.exception.DuplicateResourceException;
import com.ecommerce.multistore.shared.exception.BusinessException;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/**
 * وحدة التحكم في المنتجات المحسنة - REST API
 * Enhanced Product Controller - REST API for product management
 * 
 * يوفر APIs محسنة لإدارة المنتجات مع استجابات موحدة ومعالجة أخطاء متقدمة
 * Provides enhanced APIs for product management with unified responses and advanced error handling
 * 
 * @author Multi-Store Team
 * @version 2.0
 * @since 2024-01-01
 */
@RestController
@RequestMapping("/api/v1/products")
@CrossOrigin(origins = "*")
@Tag(name = "Products", description = "منتجات المتجر / Store Products")
public class ProductController {

    private final ProductService productService;

    /**
     * Constructor لحقن ProductService
     * Constructor for ProductService dependency injection
     * 
     * @param productService خدمة المنتجات
     */
    @Autowired
    public ProductController(ProductService productService) {
        this.productService = productService;
    }

    /**
     * إنشاء منتج جديد
     * Create a new product
     * 
     * @param request بيانات المنتج الجديد
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<ProductResponse>>
     * 
     * @apiNote POST /api/v1/products
     * @since 2.0
     */
    @PostMapping
    @Operation(
        summary = "إنشاء منتج جديد / Create new product",
        description = "إنشاء منتج جديد في المتجر مع التحقق من صحة البيانات / Create a new product in the store with data validation"
    )
    @ApiResponses(value = {
        @io.swagger.v3.oas.annotations.responses.ApiResponse(
            responseCode = "201",
            description = "تم إنشاء المنتج بنجاح / Product created successfully",
            content = @Content(schema = @Schema(implementation = ApiResponse.class))
        ),
        @io.swagger.v3.oas.annotations.responses.ApiResponse(
            responseCode = "400",
            description = "بيانات غير صحيحة / Invalid data",
            content = @Content(schema = @Schema(implementation = ApiResponse.class))
        ),
        @io.swagger.v3.oas.annotations.responses.ApiResponse(
            responseCode = "409",
            description = "المنتج موجود بالفعل / Product already exists",
            content = @Content(schema = @Schema(implementation = ApiResponse.class))
        )
    })
    public ResponseEntity<ApiResponse<ProductResponse>> createProduct(
            @Valid @RequestBody CreateProductRequest request,
            HttpServletRequest httpRequest) {
        
        try {
            ProductResponse product = productService.createProduct(request);
            
            ApiResponse<ProductResponse> response = ApiResponse.<ProductResponse>builder()
                    .success(true)
                    .message("Product created successfully")
                    .messageAr("تم إنشاء المنتج بنجاح")
                    .data(product)
                    .statusCode(HttpStatus.CREATED.value())
                    .requestId(generateRequestId(httpRequest))
                    .metadata(createSuccessMetadata("product_created", product.getDisplayId()))
                    .build();
            
            return new ResponseEntity<>(response, HttpStatus.CREATED);
            
        } catch (IllegalArgumentException e) {
            // This will be handled by GlobalExceptionHandler
            if (e.getMessage().contains("already exists")) {
                throw new DuplicateResourceException(e.getMessage(), "المنتج موجود بالفعل");
            }
            throw new BusinessException(e.getMessage(), "خطأ في إنشاء المنتج");
        }
    }

    /**
     * الحصول على جميع المنتجات مع الصفحات
     * Get all products with pagination
     * 
     * @param page رقم الصفحة (افتراضي: 0)
     * @param size عدد العناصر في الصفحة (افتراضي: 10)
     * @param sortBy الحقل المطلوب ترتيبه (افتراضي: createdAt)
     * @param sortDir اتجاه الترتيب (افتراضي: desc)
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<PaginatedResponse<ProductResponse>>>
     * 
     * @apiNote GET /api/v1/products?page=0&size=10&sortBy=name&sortDir=asc
     * @since 2.0
     */
    @GetMapping
    @Operation(
        summary = "الحصول على جميع المنتجات / Get all products",
        description = "الحصول على جميع المنتجات مع إمكانية التصفح والترتيب / Get all products with pagination and sorting"
    )
    @ApiResponses(value = {
        @io.swagger.v3.oas.annotations.responses.ApiResponse(
            responseCode = "200",
            description = "تم الحصول على المنتجات بنجاح / Products retrieved successfully",
            content = @Content(schema = @Schema(implementation = ApiResponse.class))
        )
    })
    public ResponseEntity<ApiResponse<PaginatedResponse<ProductResponse>>> getAllProducts(
            @Parameter(description = "رقم الصفحة / Page number") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "حجم الصفحة / Page size") @RequestParam(defaultValue = "10") int size,
            @Parameter(description = "ترتيب حسب / Sort by") @RequestParam(defaultValue = "createdAt") String sortBy,
            @Parameter(description = "اتجاه الترتيب / Sort direction") @RequestParam(defaultValue = "desc") String sortDir,
            HttpServletRequest httpRequest) {
        
        Page<ProductResponse> productsPage = productService.getAllProducts(page, size, sortBy, sortDir);
        PaginatedResponse<ProductResponse> paginatedResponse = PaginatedResponse.from(productsPage);
        
        ApiResponse<PaginatedResponse<ProductResponse>> response = ApiResponse.<PaginatedResponse<ProductResponse>>builder()
                .success(true)
                .message("Products retrieved successfully")
                .messageAr("تم الحصول على المنتجات بنجاح")
                .data(paginatedResponse)
                .statusCode(HttpStatus.OK.value())
                .requestId(generateRequestId(httpRequest))
                .metadata(createPaginationMetadata(page, size, productsPage.getTotalElements()))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    /**
     * الحصول على المنتجات النشطة فقط
     * Get active products only
     * 
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<PaginatedResponse<ProductResponse>>>
     * 
     * @apiNote GET /api/v1/products/active?page=0&size=10
     * @since 2.0
     */
    @GetMapping("/active")
    @Operation(
        summary = "الحصول على المنتجات النشطة / Get active products",
        description = "الحصول على المنتجات النشطة فقط / Get only active products"
    )
    public ResponseEntity<ApiResponse<PaginatedResponse<ProductResponse>>> getActiveProducts(
            @Parameter(description = "رقم الصفحة / Page number") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "حجم الصفحة / Page size") @RequestParam(defaultValue = "10") int size,
            HttpServletRequest httpRequest) {
        
        Page<ProductResponse> productsPage = productService.getActiveProducts(page, size);
        PaginatedResponse<ProductResponse> paginatedResponse = PaginatedResponse.from(productsPage);
        
        ApiResponse<PaginatedResponse<ProductResponse>> response = ApiResponse.<PaginatedResponse<ProductResponse>>builder()
                .success(true)
                .message("Active products retrieved successfully")
                .messageAr("تم الحصول على المنتجات النشطة بنجاح")
                .data(paginatedResponse)
                .statusCode(HttpStatus.OK.value())
                .requestId(generateRequestId(httpRequest))
                .metadata(createPaginationMetadata(page, size, productsPage.getTotalElements()))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    /**
     * الحصول على المنتجات المميزة
     * Get featured products
     * 
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<List<ProductResponse>>>
     * 
     * @apiNote GET /api/v1/products/featured
     * @since 2.0
     */
    @GetMapping("/featured")
    @Operation(
        summary = "الحصول على المنتجات المميزة / Get featured products",
        description = "الحصول على المنتجات المميزة في المتجر / Get featured products in the store"
    )
    public ResponseEntity<ApiResponse<List<ProductResponse>>> getFeaturedProducts(
            HttpServletRequest httpRequest) {
        
        List<ProductResponse> products = productService.getFeaturedProducts();
        
        ApiResponse<List<ProductResponse>> response = ApiResponse.<List<ProductResponse>>builder()
                .success(true)
                .message("Featured products retrieved successfully")
                .messageAr("تم الحصول على المنتجات المميزة بنجاح")
                .data(products)
                .statusCode(HttpStatus.OK.value())
                .requestId(generateRequestId(httpRequest))
                .metadata(createSuccessMetadata("featured_products_count", products.size()))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    /**
     * البحث عن منتج بواسطة UUID
     * Find product by UUID
     * 
     * @param id المعرف الفريد للمنتج
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<ProductResponse>>
     * 
     * @apiNote GET /api/v1/products/{id}
     * @since 2.0
     */
    @GetMapping("/{id}")
    @Operation(
        summary = "البحث عن منتج بالمعرف / Find product by ID",
        description = "البحث عن منتج محدد بواسطة المعرف الفريد / Find a specific product by unique ID"
    )
    @ApiResponses(value = {
        @io.swagger.v3.oas.annotations.responses.ApiResponse(
            responseCode = "200",
            description = "تم العثور على المنتج / Product found",
            content = @Content(schema = @Schema(implementation = ApiResponse.class))
        ),
        @io.swagger.v3.oas.annotations.responses.ApiResponse(
            responseCode = "404",
            description = "المنتج غير موجود / Product not found",
            content = @Content(schema = @Schema(implementation = ApiResponse.class))
        )
    })
    public ResponseEntity<ApiResponse<ProductResponse>> getProductById(
            @Parameter(description = "معرف المنتج / Product ID") @PathVariable UUID id,
            HttpServletRequest httpRequest) {
        
        Optional<ProductResponse> product = productService.findById(id);
        
        if (product.isPresent()) {
            ApiResponse<ProductResponse> response = ApiResponse.<ProductResponse>builder()
                    .success(true)
                    .message("Product found successfully")
                    .messageAr("تم العثور على المنتج بنجاح")
                    .data(product.get())
                    .statusCode(HttpStatus.OK.value())
                    .requestId(generateRequestId(httpRequest))
                    .metadata(createSuccessMetadata("product_found", product.get().getDisplayId()))
                    .build();
            
            return new ResponseEntity<>(response, HttpStatus.OK);
        } else {
            throw ResourceNotFoundException.product(id);
        }
    }

    /**
     * البحث عن منتج بواسطة Display ID
     * Find product by display ID
     * 
     * @param displayId المعرف المعروض (مثل PRD-000001)
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<ProductResponse>>
     * 
     * @apiNote GET /api/v1/products/display/{displayId}
     * @since 2.0
     */
    @GetMapping("/display/{displayId}")
    @Operation(
        summary = "البحث عن منتج بالمعرف المعروض / Find product by display ID",
        description = "البحث عن منتج بواسطة المعرف المعروض مثل PRD-000001 / Find product by display ID like PRD-000001"
    )
    public ResponseEntity<ApiResponse<ProductResponse>> getProductByDisplayId(
            @Parameter(description = "المعرف المعروض / Display ID") @PathVariable String displayId,
            HttpServletRequest httpRequest) {
        
        Optional<ProductResponse> product = productService.findByDisplayId(displayId);
        
        if (product.isPresent()) {
            ApiResponse<ProductResponse> response = ApiResponse.<ProductResponse>builder()
                    .success(true)
                    .message("Product found successfully")
                    .messageAr("تم العثور على المنتج بنجاح")
                    .data(product.get())
                    .statusCode(HttpStatus.OK.value())
                    .requestId(generateRequestId(httpRequest))
                    .metadata(createSuccessMetadata("product_found_by_display_id", displayId))
                    .build();
            
            return new ResponseEntity<>(response, HttpStatus.OK);
        } else {
            throw new ResourceNotFoundException("Product not found with display ID: " + displayId,
                                              "المنتج غير موجود بالمعرف المعروض: " + displayId);
        }
    }

    /**
     * البحث عن منتج بواسطة SKU
     * Find product by SKU
     * 
     * @param sku رمز المنتج
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<ProductResponse>>
     * 
     * @apiNote GET /api/v1/products/sku/{sku}
     * @since 2.0
     */
    @GetMapping("/sku/{sku}")
    @Operation(
        summary = "البحث عن منتج بالرمز / Find product by SKU",
        description = "البحث عن منتج بواسطة رمز المنتج الفريد / Find product by unique SKU code"
    )
    public ResponseEntity<ApiResponse<ProductResponse>> getProductBySku(
            @Parameter(description = "رمز المنتج / Product SKU") @PathVariable String sku,
            HttpServletRequest httpRequest) {
        
        Optional<ProductResponse> product = productService.findBySku(sku);
        
        if (product.isPresent()) {
            ApiResponse<ProductResponse> response = ApiResponse.<ProductResponse>builder()
                    .success(true)
                    .message("Product found successfully")
                    .messageAr("تم العثور على المنتج بنجاح")
                    .data(product.get())
                    .statusCode(HttpStatus.OK.value())
                    .requestId(generateRequestId(httpRequest))
                    .metadata(createSuccessMetadata("product_found_by_sku", sku))
                    .build();
            
            return new ResponseEntity<>(response, HttpStatus.OK);
        } else {
            throw new ResourceNotFoundException("Product not found with SKU: " + sku,
                                              "المنتج غير موجود بالرمز: " + sku);
        }
    }

    /**
     * البحث عن منتج بواسطة Slug
     * Find product by slug
     * 
     * @param slug الرابط الودود
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<ProductResponse>>
     * 
     * @apiNote GET /api/v1/products/slug/{slug}
     * @since 2.0
     */
    @GetMapping("/slug/{slug}")
    @Operation(
        summary = "البحث عن منتج بالرابط الودود / Find product by slug",
        description = "البحث عن منتج بواسطة الرابط الودود / Find product by friendly URL slug"
    )
    public ResponseEntity<ApiResponse<ProductResponse>> getProductBySlug(
            @Parameter(description = "الرابط الودود / URL slug") @PathVariable String slug,
            HttpServletRequest httpRequest) {
        
        Optional<ProductResponse> product = productService.findBySlug(slug);
        
        if (product.isPresent()) {
            ApiResponse<ProductResponse> response = ApiResponse.<ProductResponse>builder()
                    .success(true)
                    .message("Product found successfully")
                    .messageAr("تم العثور على المنتج بنجاح")
                    .data(product.get())
                    .statusCode(HttpStatus.OK.value())
                    .requestId(generateRequestId(httpRequest))
                    .metadata(createSuccessMetadata("product_found_by_slug", slug))
                    .build();
            
            return new ResponseEntity<>(response, HttpStatus.OK);
        } else {
            throw new ResourceNotFoundException("Product not found with slug: " + slug,
                                              "المنتج غير موجود بالرابط الودود: " + slug);
        }
    }

    /**
     * البحث في المنتجات
     * Search products
     * 
     * @param q مصطلح البحث
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<PaginatedResponse<ProductResponse>>>
     * 
     * @apiNote GET /api/v1/products/search?q=smartwatch&page=0&size=10
     * @since 2.0
     */
    @GetMapping("/search")
    @Operation(
        summary = "البحث في المنتجات / Search products",
        description = "البحث في المنتجات بواسطة الاسم أو الوصف / Search products by name or description"
    )
    public ResponseEntity<ApiResponse<PaginatedResponse<ProductResponse>>> searchProducts(
            @Parameter(description = "مصطلح البحث / Search term") @RequestParam("q") String searchTerm,
            @Parameter(description = "رقم الصفحة / Page number") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "حجم الصفحة / Page size") @RequestParam(defaultValue = "10") int size,
            HttpServletRequest httpRequest) {
        
        if (searchTerm == null || searchTerm.trim().isEmpty()) {
            throw new BusinessException("Search term cannot be empty", "مصطلح البحث لا يمكن أن يكون فارغاً");
        }
        
        Page<ProductResponse> productsPage = productService.searchProducts(searchTerm, page, size);
        PaginatedResponse<ProductResponse> paginatedResponse = PaginatedResponse.from(productsPage);
        
        ApiResponse<PaginatedResponse<ProductResponse>> response = ApiResponse.<PaginatedResponse<ProductResponse>>builder()
                .success(true)
                .message("Search completed successfully")
                .messageAr("تم البحث بنجاح")
                .data(paginatedResponse)
                .statusCode(HttpStatus.OK.value())
                .requestId(generateRequestId(httpRequest))
                .metadata(createSearchMetadata(searchTerm, productsPage.getTotalElements()))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    /**
     * البحث بواسطة الفئة
     * Find products by category
     * 
     * @param categoryId معرف الفئة
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<PaginatedResponse<ProductResponse>>>
     * 
     * @apiNote GET /api/v1/products/category/{categoryId}?page=0&size=10
     * @since 2.0
     */
    @GetMapping("/category/{categoryId}")
    @Operation(
        summary = "البحث بواسطة الفئة / Find products by category",
        description = "الحصول على المنتجات حسب الفئة المحددة / Get products by specific category"
    )
    public ResponseEntity<ApiResponse<PaginatedResponse<ProductResponse>>> getProductsByCategory(
            @Parameter(description = "معرف الفئة / Category ID") @PathVariable UUID categoryId,
            @Parameter(description = "رقم الصفحة / Page number") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "حجم الصفحة / Page size") @RequestParam(defaultValue = "10") int size,
            HttpServletRequest httpRequest) {
        
        Page<ProductResponse> productsPage = productService.getProductsByCategory(categoryId, page, size);
        PaginatedResponse<ProductResponse> paginatedResponse = PaginatedResponse.from(productsPage);
        
        ApiResponse<PaginatedResponse<ProductResponse>> response = ApiResponse.<PaginatedResponse<ProductResponse>>builder()
                .success(true)
                .message("Products by category retrieved successfully")
                .messageAr("تم الحصول على المنتجات حسب الفئة بنجاح")
                .data(paginatedResponse)
                .statusCode(HttpStatus.OK.value())
                .requestId(generateRequestId(httpRequest))
                .metadata(createCategoryMetadata(categoryId, productsPage.getTotalElements()))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    /**
     * البحث بواسطة العلامة التجارية
     * Find products by brand
     * 
     * @param brandId معرف العلامة التجارية
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<PaginatedResponse<ProductResponse>>>
     * 
     * @apiNote GET /api/v1/products/brand/{brandId}?page=0&size=10
     * @since 2.0
     */
    @GetMapping("/brand/{brandId}")
    @Operation(
        summary = "البحث بواسطة العلامة التجارية / Find products by brand",
        description = "الحصول على المنتجات حسب العلامة التجارية / Get products by specific brand"
    )
    public ResponseEntity<ApiResponse<PaginatedResponse<ProductResponse>>> getProductsByBrand(
            @Parameter(description = "معرف العلامة التجارية / Brand ID") @PathVariable UUID brandId,
            @Parameter(description = "رقم الصفحة / Page number") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "حجم الصفحة / Page size") @RequestParam(defaultValue = "10") int size,
            HttpServletRequest httpRequest) {
        
        Page<ProductResponse> productsPage = productService.getProductsByBrand(brandId, page, size);
        PaginatedResponse<ProductResponse> paginatedResponse = PaginatedResponse.from(productsPage);
        
        ApiResponse<PaginatedResponse<ProductResponse>> response = ApiResponse.<PaginatedResponse<ProductResponse>>builder()
                .success(true)
                .message("Products by brand retrieved successfully")
                .messageAr("تم الحصول على المنتجات حسب العلامة التجارية بنجاح")
                .data(paginatedResponse)
                .statusCode(HttpStatus.OK.value())
                .requestId(generateRequestId(httpRequest))
                .metadata(createBrandMetadata(brandId, productsPage.getTotalElements()))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    /**
     * البحث في نطاق سعري
     * Find products by price range
     * 
     * @param minPrice أقل سعر
     * @param maxPrice أعلى سعر
     * @param page رقم الصفحة
     * @param size عدد العناصر في الصفحة
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<PaginatedResponse<ProductResponse>>>
     * 
     * @apiNote GET /api/v1/products/price-range?minPrice=100&maxPrice=500&page=0&size=10
     * @since 2.0
     */
    @GetMapping("/price-range")
    @Operation(
        summary = "البحث في نطاق سعري / Find products by price range",
        description = "الحصول على المنتجات ضمن نطاق سعري محدد / Get products within specific price range"
    )
    public ResponseEntity<ApiResponse<PaginatedResponse<ProductResponse>>> getProductsByPriceRange(
            @Parameter(description = "أقل سعر / Minimum price") @RequestParam BigDecimal minPrice,
            @Parameter(description = "أعلى سعر / Maximum price") @RequestParam BigDecimal maxPrice,
            @Parameter(description = "رقم الصفحة / Page number") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "حجم الصفحة / Page size") @RequestParam(defaultValue = "10") int size,
            HttpServletRequest httpRequest) {
        
        if (minPrice.compareTo(maxPrice) > 0) {
            throw new BusinessException("Minimum price cannot be greater than maximum price", 
                                      "أقل سعر لا يمكن أن يكون أكبر من أعلى سعر");
        }
        
        Page<ProductResponse> productsPage = productService.getProductsByPriceRange(minPrice, maxPrice, page, size);
        PaginatedResponse<ProductResponse> paginatedResponse = PaginatedResponse.from(productsPage);
        
        ApiResponse<PaginatedResponse<ProductResponse>> response = ApiResponse.<PaginatedResponse<ProductResponse>>builder()
                .success(true)
                .message("Products by price range retrieved successfully")
                .messageAr("تم الحصول على المنتجات في النطاق السعري بنجاح")
                .data(paginatedResponse)
                .statusCode(HttpStatus.OK.value())
                .requestId(generateRequestId(httpRequest))
                .metadata(createPriceRangeMetadata(minPrice, maxPrice, productsPage.getTotalElements()))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    /**
     * تحديث بيانات المنتج
     * Update product information
     * 
     * @param id معرف المنتج
     * @param request البيانات الجديدة
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<ProductResponse>>
     * 
     * @apiNote PUT /api/v1/products/{id}
     * @since 2.0
     */
    @PutMapping("/{id}")
    @Operation(
        summary = "تحديث بيانات المنتج / Update product information",
        description = "تحديث بيانات منتج موجود / Update existing product information"
    )
    @ApiResponses(value = {
        @io.swagger.v3.oas.annotations.responses.ApiResponse(
            responseCode = "200",
            description = "تم تحديث المنتج بنجاح / Product updated successfully",
            content = @Content(schema = @Schema(implementation = ApiResponse.class))
        ),
        @io.swagger.v3.oas.annotations.responses.ApiResponse(
            responseCode = "404",
            description = "المنتج غير موجود / Product not found",
            content = @Content(schema = @Schema(implementation = ApiResponse.class))
        ),
        @io.swagger.v3.oas.annotations.responses.ApiResponse(
            responseCode = "400",
            description = "بيانات غير صحيحة / Invalid data",
            content = @Content(schema = @Schema(implementation = ApiResponse.class))
        )
    })
    public ResponseEntity<ApiResponse<ProductResponse>> updateProduct(
            @Parameter(description = "معرف المنتج / Product ID") @PathVariable UUID id,
            @Valid @RequestBody CreateProductRequest request,
            HttpServletRequest httpRequest) {
        
        try {
            ProductResponse product = productService.updateProduct(id, request);
            
            ApiResponse<ProductResponse> response = ApiResponse.<ProductResponse>builder()
                    .success(true)
                    .message("Product updated successfully")
                    .messageAr("تم تحديث المنتج بنجاح")
                    .data(product)
                    .statusCode(HttpStatus.OK.value())
                    .requestId(generateRequestId(httpRequest))
                    .metadata(createSuccessMetadata("product_updated", product.getDisplayId()))
                    .build();
            
            return new ResponseEntity<>(response, HttpStatus.OK);
            
        } catch (IllegalArgumentException e) {
            // This will be handled by GlobalExceptionHandler
            if (e.getMessage().contains("not found")) {
                throw ResourceNotFoundException.product(id);
            }
            if (e.getMessage().contains("already exists")) {
                throw new DuplicateResourceException(e.getMessage(), "البيانات مكررة");
            }
            throw new BusinessException(e.getMessage(), "خطأ في تحديث المنتج");
        }
    }

    /**
     * تحديث حالة المنتج
     * Update product status
     * 
     * @param id معرف المنتج
     * @param isActive الحالة الجديدة
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<ProductResponse>>
     * 
     * @apiNote PUT /api/v1/products/{id}/status?isActive=true
     * @since 2.0
     */
    @PutMapping("/{id}/status")
    @Operation(
        summary = "تحديث حالة المنتج / Update product status",
        description = "تفعيل أو إلغاء تفعيل المنتج / Activate or deactivate product"
    )
    public ResponseEntity<ApiResponse<ProductResponse>> updateProductStatus(
            @Parameter(description = "معرف المنتج / Product ID") @PathVariable UUID id,
            @Parameter(description = "الحالة الجديدة / New status") @RequestParam Boolean isActive,
            HttpServletRequest httpRequest) {
        
        try {
            ProductResponse product = productService.updateProductStatus(id, isActive);
            
            String message = isActive ? "Product activated successfully" : "Product deactivated successfully";
            String messageAr = isActive ? "تم تفعيل المنتج بنجاح" : "تم إلغاء تفعيل المنتج بنجاح";
            
            ApiResponse<ProductResponse> response = ApiResponse.<ProductResponse>builder()
                    .success(true)
                    .message(message)
                    .messageAr(messageAr)
                    .data(product)
                    .statusCode(HttpStatus.OK.value())
                    .requestId(generateRequestId(httpRequest))
                    .metadata(createSuccessMetadata("product_status_updated", 
                                                  Map.of("productId", product.getDisplayId(), 
                                                        "isActive", isActive)))
                    .build();
            
            return new ResponseEntity<>(response, HttpStatus.OK);
            
        } catch (IllegalArgumentException e) {
            throw ResourceNotFoundException.product(id);
        }
    }

    /**
     * تحديث مخزون المنتج
     * Update product stock
     * 
     * @param id معرف المنتج
     * @param quantity الكمية الجديدة
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<ProductResponse>>
     * 
     * @apiNote PUT /api/v1/products/{id}/stock?quantity=50
     * @since 2.0
     */
    @PutMapping("/{id}/stock")
    @Operation(
        summary = "تحديث مخزون المنتج / Update product stock",
        description = "تحديث كمية المخزون للمنتج / Update stock quantity for product"
    )
    public ResponseEntity<ApiResponse<ProductResponse>> updateProductStock(
            @Parameter(description = "معرف المنتج / Product ID") @PathVariable UUID id,
            @Parameter(description = "الكمية الجديدة / New quantity") @RequestParam Integer quantity,
            HttpServletRequest httpRequest) {
        
        try {
            ProductResponse product = productService.updateProductStock(id, quantity);
            
            ApiResponse<ProductResponse> response = ApiResponse.<ProductResponse>builder()
                    .success(true)
                    .message("Product stock updated successfully")
                    .messageAr("تم تحديث مخزون المنتج بنجاح")
                    .data(product)
                    .statusCode(HttpStatus.OK.value())
                    .requestId(generateRequestId(httpRequest))
                    .metadata(createSuccessMetadata("product_stock_updated", 
                                                  Map.of("productId", product.getDisplayId(), 
                                                        "newQuantity", quantity)))
                    .build();
            
            return new ResponseEntity<>(response, HttpStatus.OK);
            
        } catch (IllegalArgumentException e) {
            if (e.getMessage().contains("not found")) {
                throw ResourceNotFoundException.product(id);
            }
            throw new BusinessException(e.getMessage(), "خطأ في تحديث المخزون");
        }
    }

    /**
     * حذف المنتج
     * Delete product
     * 
     * @param id معرف المنتج
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<Void>>
     * 
     * @apiNote DELETE /api/v1/products/{id}
     * @since 2.0
     */
    @DeleteMapping("/{id}")
    @Operation(
        summary = "حذف المنتج / Delete product",
        description = "حذف منتج من المتجر نهائياً / Permanently delete product from store"
    )
    @ApiResponses(value = {
        @io.swagger.v3.oas.annotations.responses.ApiResponse(
            responseCode = "200",
            description = "تم حذف المنتج بنجاح / Product deleted successfully",
            content = @Content(schema = @Schema(implementation = ApiResponse.class))
        ),
        @io.swagger.v3.oas.annotations.responses.ApiResponse(
            responseCode = "404",
            description = "المنتج غير موجود / Product not found",
            content = @Content(schema = @Schema(implementation = ApiResponse.class))
        )
    })
    public ResponseEntity<ApiResponse<Void>> deleteProduct(
            @Parameter(description = "معرف المنتج / Product ID") @PathVariable UUID id,
            HttpServletRequest httpRequest) {
        
        try {
            productService.deleteProduct(id);
            
            ApiResponse<Void> response = ApiResponse.<Void>builder()
                    .success(true)
                    .message("Product deleted successfully")
                    .messageAr("تم حذف المنتج بنجاح")
                    .statusCode(HttpStatus.OK.value())
                    .requestId(generateRequestId(httpRequest))
                    .metadata(createSuccessMetadata("product_deleted", id))
                    .build();
            
            return new ResponseEntity<>(response, HttpStatus.OK);
            
        } catch (IllegalArgumentException e) {
            throw ResourceNotFoundException.product(id);
        }
    }

    /**
     * الحصول على المنتجات ذات المخزون المنخفض
     * Get products with low stock
     * 
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<List<ProductResponse>>>
     * 
     * @apiNote GET /api/v1/products/inventory/low-stock
     * @since 2.0
     */
    @GetMapping("/inventory/low-stock")
    @Operation(
        summary = "المنتجات ذات المخزون المنخفض / Products with low stock",
        description = "الحصول على المنتجات التي تحتاج إلى إعادة تجهيز المخزون / Get products that need stock replenishment"
    )
    public ResponseEntity<ApiResponse<List<ProductResponse>>> getLowStockProducts(
            HttpServletRequest httpRequest) {
        
        List<ProductResponse> products = productService.getLowStockProducts();
        
        ApiResponse<List<ProductResponse>> response = ApiResponse.<List<ProductResponse>>builder()
                .success(true)
                .message("Low stock products retrieved successfully")
                .messageAr("تم الحصول على المنتجات ذات المخزون المنخفض بنجاح")
                .data(products)
                .statusCode(HttpStatus.OK.value())
                .requestId(generateRequestId(httpRequest))
                .metadata(createSuccessMetadata("low_stock_products_count", products.size()))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    /**
     * الحصول على المنتجات غير المتوفرة
     * Get out of stock products
     * 
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<List<ProductResponse>>>
     * 
     * @apiNote GET /api/v1/products/inventory/out-of-stock
     * @since 2.0
     */
    @GetMapping("/inventory/out-of-stock")
    @Operation(
        summary = "المنتجات غير المتوفرة / Out of stock products",
        description = "الحصول على المنتجات غير المتوفرة في المخزون / Get products that are out of stock"
    )
    public ResponseEntity<ApiResponse<List<ProductResponse>>> getOutOfStockProducts(
            HttpServletRequest httpRequest) {
        
        List<ProductResponse> products = productService.getOutOfStockProducts();
        
        ApiResponse<List<ProductResponse>> response = ApiResponse.<List<ProductResponse>>builder()
                .success(true)
                .message("Out of stock products retrieved successfully")
                .messageAr("تم الحصول على المنتجات غير المتوفرة بنجاح")
                .data(products)
                .statusCode(HttpStatus.OK.value())
                .requestId(generateRequestId(httpRequest))
                .metadata(createSuccessMetadata("out_of_stock_products_count", products.size()))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    /**
     * فحص صحة نظام المنتجات
     * Product system health check
     * 
     * @param httpRequest معلومات الطلب
     * @return ResponseEntity<ApiResponse<String>>
     * 
     * @apiNote GET /api/v1/products/health
     * @since 2.0
     */
    @GetMapping("/health")
    @Operation(
        summary = "فحص صحة النظام / System health check",
        description = "فحص حالة وصحة نظام المنتجات / Check product system health status"
    )
    public ResponseEntity<ApiResponse<String>> health(HttpServletRequest httpRequest) {
        
        ApiResponse<String> response = ApiResponse.<String>builder()
                .success(true)
                .message("Product service is running")
                .messageAr("خدمة المنتجات تعمل بشكل طبيعي")
                .data("OK")
                .statusCode(HttpStatus.OK.value())
                .requestId(generateRequestId(httpRequest))
                .metadata(createSuccessMetadata("health_check", "OK"))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    // ===============================
    // Helper Methods
    // ===============================

    /**
     * توليد معرف فريد للطلب
     * Generate unique request ID
     * 
     * @param request الطلب
     * @return String معرف الطلب
     */
    private String generateRequestId(HttpServletRequest request) {
        return "REQ-" + System.currentTimeMillis() + "-" + 
               Integer.toHexString(request.hashCode()).toUpperCase();
    }

    /**
     * إنشاء معلومات إضافية للنجاح
     * Create success metadata
     * 
     * @param operation العملية
     * @param data البيانات الإضافية
     * @return Map<String, Object>
     */
    private Map<String, Object> createSuccessMetadata(String operation, Object data) {
        Map<String, Object> metadata = new java.util.HashMap<>();
        metadata.put("operation", operation);
        metadata.put("timestamp", java.time.LocalDateTime.now());
        metadata.put("data", data);
        return metadata;
    }

    /**
     * إنشاء معلومات إضافية للصفحات
     * Create pagination metadata
     * 
     * @param page رقم الصفحة
     * @param size حجم الصفحة
     * @param totalElements إجمالي العناصر
     * @return Map<String, Object>
     */
    private Map<String, Object> createPaginationMetadata(int page, int size, long totalElements) {
        Map<String, Object> metadata = new java.util.HashMap<>();
        metadata.put("operation", "pagination");
        metadata.put("currentPage", page);
        metadata.put("pageSize", size);
        metadata.put("totalElements", totalElements);
        metadata.put("totalPages", (int) Math.ceil((double) totalElements / size));
        metadata.put("timestamp", java.time.LocalDateTime.now());
        return metadata;
    }

    /**
     * إنشاء معلومات إضافية للبحث
     * Create search metadata
     * 
     * @param searchTerm مصطلح البحث
     * @param totalResults إجمالي النتائج
     * @return Map<String, Object>
     */
    private Map<String, Object> createSearchMetadata(String searchTerm, long totalResults) {
        Map<String, Object> metadata = new java.util.HashMap<>();
        metadata.put("operation", "search");
        metadata.put("searchTerm", searchTerm);
        metadata.put("totalResults", totalResults);
        metadata.put("timestamp", java.time.LocalDateTime.now());
        return metadata;
    }

    /**
     * إنشاء معلومات إضافية للفئة
     * Create category metadata
     * 
     * @param categoryId معرف الفئة
     * @param totalProducts إجمالي المنتجات
     * @return Map<String, Object>
     */
    private Map<String, Object> createCategoryMetadata(UUID categoryId, long totalProducts) {
        Map<String, Object> metadata = new java.util.HashMap<>();
        metadata.put("operation", "filter_by_category");
        metadata.put("categoryId", categoryId);
        metadata.put("totalProducts", totalProducts);
        metadata.put("timestamp", java.time.LocalDateTime.now());
        return metadata;
    }

    /**
     * إنشاء معلومات إضافية للعلامة التجارية
     * Create brand metadata
     * 
     * @param brandId معرف العلامة التجارية
     * @param totalProducts إجمالي المنتجات
     * @return Map<String, Object>
     */
    private Map<String, Object> createBrandMetadata(UUID brandId, long totalProducts) {
        Map<String, Object> metadata = new java.util.HashMap<>();
        metadata.put("operation", "filter_by_brand");
        metadata.put("brandId", brandId);
        metadata.put("totalProducts", totalProducts);
        metadata.put("timestamp", java.time.LocalDateTime.now());
        return metadata;
    }

    /**
     * إنشاء معلومات إضافية للنطاق السعري
     * Create price range metadata
     * 
     * @param minPrice أقل سعر
     * @param maxPrice أعلى سعر
     * @param totalProducts إجمالي المنتجات
     * @return Map<String, Object>
     */
    private Map<String, Object> createPriceRangeMetadata(BigDecimal minPrice, BigDecimal maxPrice, long totalProducts) {
        Map<String, Object> metadata = new java.util.HashMap<>();
        metadata.put("operation", "filter_by_price_range");
        metadata.put("minPrice", minPrice);
        metadata.put("maxPrice", maxPrice);
        metadata.put("totalProducts", totalProducts);
        metadata.put("timestamp", java.time.LocalDateTime.now());
        return metadata;
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/product/infrastructure/web/ProductImageRepository.java ---- */

package com.ecommerce.multistore.product.infrastructure.web;

public class ProductImageRepository {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/config/ApiConfig.java ---- */

package com.ecommerce.multistore.shared.config;

public class ApiConfig {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/config/CacheConfig.java ---- */

package com.ecommerce.multistore.shared.config;

public class CacheConfig {
    
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/config/JacksonConfig.java ---- */

package com.ecommerce.multistore.shared.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;

/**
 * إعدادات Jackson لحل مشكلة LocalDateTime
 * Jackson Configuration to fix LocalDateTime serialization issue
 */
@Configuration
public class JacksonConfig {

    @Bean
    @Primary
    public ObjectMapper objectMapper() {
        return Jackson2ObjectMapperBuilder.json()
                .modules(new JavaTimeModule())
                .featuresToDisable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)
                .build();
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/config/SecurityConfig.java ---- */

package com.ecommerce.multistore.shared.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

/**
 * إعدادات الأمان - مُعطلة مؤقتاً للتطوير
 * Security Configuration - Temporarily disabled for development
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
@Configuration
@EnableWebSecurity
public class SecurityConfig {

    /**
     * مشفر كلمات المرور باستخدام BCrypt
     * Password encoder using BCrypt
     * 
     * @return PasswordEncoder
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    /**
     * إعدادات الأمان - تعطيل كامل مؤقتاً
     * Security filter chain - completely disabled temporarily
     * 
     * @param http HttpSecurity
     * @return SecurityFilterChain
     * @throws Exception
     */
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(authz -> authz
                .anyRequest().permitAll()
            )
            .httpBasic(httpBasic -> httpBasic.disable())
            .formLogin(formLogin -> formLogin.disable());
        
        return http.build();
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/config/SwaggerConfig.java ---- */

package com.ecommerce.multistore.shared.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.servers.Server;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.tags.Tag;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

/**
 * إعدادات Swagger/OpenAPI
 * Swagger/OpenAPI Configuration
 * 
 * يوفر واجهة توثيق تفاعلية لجميع APIs
 * Provides interactive documentation interface for all APIs
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Configuration
public class SwaggerConfig {

    @Value("${server.port:8080}")
    private String serverPort;

    @Value("${spring.application.name:multi-store-backend}")
    private String applicationName;

    /**
     * إعداد OpenAPI للتوثيق
     * OpenAPI configuration for documentation
     * 
     * @return OpenAPI instance
     */
    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(createApiInfo())
                .servers(createServers())
                .components(createComponents())
                .security(createSecurityRequirements())
                .tags(createTags());
    }

    /**
     * إنشاء معلومات API
     * Create API information
     */
    private Info createApiInfo() {
        return new Info()
                .title("Multi-Store E-commerce API")
                .description("""
                    **API متكامل للمتجر الإلكتروني متعدد المجالات**
                    
                    A comprehensive RESTful API for multi-domain e-commerce platform built with Spring Boot.
                    
                    ## Features:
                    - 👥 User Management
                    - 🏷️ Brand Management  
                    - 📂 Category Management
                    - 🛍️ Product Management
                    - 📦 Order Management
                    - 💳 Payment Processing
                    - 📊 Analytics & Reporting
                    - 🔐 Security & Authentication
                    - 📱 Mobile-First Design
                    
                    ## Authentication:
                    - Use API Key in header: `X-API-Key`
                    - Or Bearer Token: `Authorization: Bearer <token>`
                    
                    ## Rate Limiting:
                    - 100 requests per minute per IP
                    - Headers: `X-RateLimit-Limit`, `X-RateLimit-Remaining`, `X-RateLimit-Reset`
                    
                    ## Response Format:
                    All responses follow unified `ApiResponse<T>` format with Arabic/English messages.
                    """)
                .version("1.0.0")
                .contact(new Contact()
                        .name("Multi-Store Development Team")
                        .email("dev@multistore.com")
                        .url("https://github.com/multistore/backend"))
                .license(new License()
                        .name("MIT License")
                        .url("https://opensource.org/licenses/MIT"));
    }

    /**
     * إنشاء قائمة الخوادم
     * Create servers list
     */
    private List<Server> createServers() {
        return List.of(
                new Server()
                        .url("http://localhost:" + serverPort)
                        .description("🔧 Development Server - خادم التطوير"),
                new Server()
                        .url("https://api-dev.multistore.com")
                        .description("🧪 Staging Server - خادم الاختبار"),
                new Server()
                        .url("https://api.multistore.com")
                        .description("🚀 Production Server - خادم الإنتاج")
        );
    }

    /**
     * إنشاء مكونات الأمان
     * Create security components
     */
    private Components createComponents() {
        return new Components()
                .addSecuritySchemes("ApiKey", new SecurityScheme()
                        .type(SecurityScheme.Type.APIKEY)
                        .in(SecurityScheme.In.HEADER)
                        .name("X-API-Key")
                        .description("API Key للتحقق من الهوية"))
                .addSecuritySchemes("Bearer", new SecurityScheme()
                        .type(SecurityScheme.Type.HTTP)
                        .scheme("bearer")
                        .bearerFormat("JWT")
                        .description("JWT Bearer Token"))
                .addSecuritySchemes("Basic", new SecurityScheme()
                        .type(SecurityScheme.Type.HTTP)
                        .scheme("basic")
                        .description("Basic Authentication"));
    }

    /**
     * إنشاء متطلبات الأمان
     * Create security requirements
     */
    private List<SecurityRequirement> createSecurityRequirements() {
        return List.of(
                new SecurityRequirement().addList("ApiKey"),
                new SecurityRequirement().addList("Bearer"),
                new SecurityRequirement().addList("Basic")
        );
    }

    /**
     * إنشاء العلامات
     * Create tags
     */
    private List<Tag> createTags() {
        return List.of(
                new Tag()
                        .name("Users")
                        .description("👥 إدارة المستخدمين - User Management"),
                new Tag()
                        .name("Brands")
                        .description("🏷️ إدارة العلامات التجارية - Brand Management"),
                new Tag()
                        .name("Categories")
                        .description("📂 إدارة الفئات - Category Management"),
                new Tag()
                        .name("Products")
                        .description("🛍️ إدارة المنتجات - Product Management"),
                new Tag()
                        .name("Orders")
                        .description("📦 إدارة الطلبات - Order Management"),
                new Tag()
                        .name("Payments")
                        .description("💳 إدارة المدفوعات - Payment Management"),
                new Tag()
                        .name("Analytics")
                        .description("📊 التحليلات والتقارير - Analytics & Reports"),
                new Tag()
                        .name("Inventory")
                        .description("📋 إدارة المخزون - Inventory Management")
        );
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/constants/AppConstants.java ---- */

package com.ecommerce.multistore.shared.constants;

/**
 * ثوابت التطبيق العامة
 * Application Constants
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
public class AppConstants {
  
    // Rate Limiting Constants
    public static final int RATE_LIMIT_REQUESTS = 100;
    public static final int RATE_LIMIT_PERIOD = 60; // seconds
    public static final int RATE_LIMIT_WINDOW_MINUTES = 1; // 1 minute window
    public static final int RATE_LIMIT_WINDOW_SECONDS = RATE_LIMIT_WINDOW_MINUTES * 60;
    public static final int RATE_LIMIT_WINDOW_MILLISECONDS = RATE_LIMIT_WINDOW_SECONDS * 1000;
    
    // Rate Limiting Time Windows
    public static final int RATE_LIMIT_WINDOW_MINUTES_SHORT = 1; // 1 minute
    public static final int RATE_LIMIT_WINDOW_MINUTES_MEDIUM = 5; // 5 minutes
    public static final int RATE_LIMIT_WINDOW_MINUTES_LONG = 15; // 15 minutes
    public static final int RATE_LIMIT_WINDOW_MINUTES_EXTENDED = 60; // 1 hour
    
    // Rate Limiting per different time windows
    public static final int RATE_LIMIT_REQUESTS_PER_MINUTE = 100;
    public static final int RATE_LIMIT_REQUESTS_PER_5_MINUTES = 300;
    public static final int RATE_LIMIT_REQUESTS_PER_15_MINUTES = 500;
    public static final int RATE_LIMIT_REQUESTS_PER_HOUR = 1000;
    public static final int RATE_LIMIT_REQUESTS_PER_DAY = 10000;
    
    // Rate Limiting Burst Settings
    public static final int RATE_LIMIT_BURST_SIZE = 20; // burst requests
    public static final int RATE_LIMIT_BURST_WINDOW_SECONDS = 10; // burst window
    
    // Rate Limiting Cleanup and Maintenance
    public static final int RATE_LIMIT_CLEANUP_INTERVAL = 300; // 5 minutes
    public static final int RATE_LIMIT_CACHE_SIZE = 10000; // max cached entries
    public static final int RATE_LIMIT_CACHE_EXPIRY_MINUTES = 60; // cache expiry
    
    

    // ثوابت عامة - General Constants
    public static final String DEFAULT_LANGUAGE = "ar";
    public static final String DEFAULT_CURRENCY = "YER";
    public static final String DEFAULT_COUNTRY = "Yemen";
    public static final String DEFAULT_TIMEZONE = "Asia/Aden";

     // API Base Path
    public static final String API_BASE_PATH = "/api/v1";
    // Security Constants
    public static final String API_KEY_HEADER = "X-API-Key";
    public static final String AUTHORIZATION_HEADER = "Authorization";
    public static final String BEARER_PREFIX = "Bearer ";
    // ثوابت التصفح - Pagination Constants
    public static final int DEFAULT_PAGE_SIZE = 20;
    public static final int MAX_PAGE_SIZE = 100;
    public static final String DEFAULT_SORT_BY = "createdAt";
    public static final String DEFAULT_SORT_DIR = "desc";
    
    // ثوابت الملفات - File Constants
    public static final long MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
    public static final String[] ALLOWED_IMAGE_TYPES = {"jpg", "jpeg", "png", "gif", "webp"};
    public static final String UPLOAD_DIR = "uploads/";
    public static final String IMAGES_DIR = "images/";
    
    // ثوابت الأمان - Security Constants
    public static final int MIN_PASSWORD_LENGTH = 6;
    public static final int MAX_PASSWORD_LENGTH = 100;
    public static final int TOKEN_EXPIRY_HOURS = 24;
    public static final int REFRESH_TOKEN_EXPIRY_DAYS = 30;
    public static final int MAX_LOGIN_ATTEMPTS = 5;
    public static final int LOCKOUT_DURATION_MINUTES = 15;
    
    // ثوابت التحقق - Validation Constants
    public static final int MIN_PRODUCT_NAME_LENGTH = 3;
    public static final int MAX_PRODUCT_NAME_LENGTH = 255;
    public static final int MIN_DESCRIPTION_LENGTH = 10;
    public static final int MAX_DESCRIPTION_LENGTH = 5000;
    public static final int MAX_SLUG_LENGTH = 255;
    
    // ثوابت الطلبات - Order Constants
    public static final int ORDER_NUMBER_LENGTH = 12;
    public static final int MAX_ORDER_ITEMS = 50;
    public static final double MIN_ORDER_AMOUNT = 0.01;
    public static final double MAX_ORDER_AMOUNT = 999999.99;
    
    // ثوابت الشحن - Shipping Constants
    public static final double DEFAULT_SHIPPING_COST = 5000.0;
    public static final double FREE_SHIPPING_THRESHOLD = 50000.0;
    public static final int DELIVERY_DAYS_MIN = 1;
    public static final int DELIVERY_DAYS_MAX = 7;
    
    // ثوابت المدفوعات - Payment Constants
    public static final double PAYMENT_PROCESSING_FEE = 0.025; // 2.5%
    public static final double MAX_PAYMENT_AMOUNT = 1000000.0;
    public static final int PAYMENT_TIMEOUT_MINUTES = 15;
    
    // ثوابت المخزون - Inventory Constants
    public static final int LOW_STOCK_THRESHOLD = 10;
    public static final int DEFAULT_STOCK_QUANTITY = 0;
    public static final int MAX_STOCK_QUANTITY = 999999;
    
    // ثوابت التحليلات - Analytics Constants
    public static final int ANALYTICS_RETENTION_DAYS = 365;
    public static final int TOP_PRODUCTS_LIMIT = 10;
    public static final int REPORT_CACHE_HOURS = 1;
    
    // رسائل الأخطاء - Error Messages
    public static final String ERROR_INVALID_INPUT = "بيانات غير صحيحة";
    public static final String ERROR_RESOURCE_NOT_FOUND = "المورد غير موجود";
    public static final String ERROR_UNAUTHORIZED = "غير مصرح";
    public static final String ERROR_FORBIDDEN = "ممنوع";
    public static final String ERROR_SERVER_ERROR = "خطأ في الخادم";
    
    // رسائل النجاح - Success Messages
    public static final String SUCCESS_CREATED = "تم الإنشاء بنجاح";
    public static final String SUCCESS_UPDATED = "تم التحديث بنجاح";
    public static final String SUCCESS_DELETED = "تم الحذف بنجاح";
    
    // صفحات الأخطاء - Error Pages
    public static final String ERROR_PAGE_404 = "/error/404";
    public static final String ERROR_PAGE_500 = "/error/500";
    public static final String ERROR_PAGE_403 = "/error/403";
    
    // Headers
    public static final String HEADER_API_KEY = "X-API-Key";
    public static final String HEADER_RATE_LIMIT = "X-Rate-Limit";
    public static final String HEADER_RATE_REMAINING = "X-Rate-Limit-Remaining";
    public static final String HEADER_LANGUAGE = "Accept-Language";
    
    // Cache Names
    public static final String CACHE_PRODUCTS = "products";
    public static final String CACHE_CATEGORIES = "categories";
    public static final String CACHE_BRANDS = "brands";
    public static final String CACHE_SETTINGS = "settings";
    
    // Private constructor to prevent instantiation
    private AppConstants() {
        throw new UnsupportedOperationException("This is a utility class and cannot be instantiated");
    }
}
  


/* ---- File: src/main/java/com/ecommerce/multistore/shared/dto/ApiResponse.java ---- */

package com.ecommerce.multistore.shared.dto;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import io.swagger.v3.oas.annotations.media.Schema;

import java.time.LocalDateTime;

/**
 * استجابة API موحدة لجميع endpoints
 * Unified API response wrapper for all endpoints
 */
@Schema(description = "استجابة API موحدة / Unified API Response")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ApiResponse<T> {
    
    @Schema(description = "حالة نجاح العملية / Operation success status", example = "true")
    private boolean success;
    
    @Schema(description = "رسالة الاستجابة / Response message", example = "تم إنشاء المنتج بنجاح")
    private String message;
    
    @Schema(description = "رسالة الاستجابة بالعربية / Response message in Arabic")
    private String messageAr;
    
    @Schema(description = "البيانات المرجعة / Returned data")
    private T data;
    
    @Schema(description = "تفاصيل الأخطاء / Error details")
    private Object errors;
    
    @Schema(description = "رمز الحالة / Status code", example = "200")
    private int statusCode;
    
    @Schema(description = "وقت الاستجابة / Response timestamp")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime timestamp;
    
    @Schema(description = "معرف الطلب للتتبع / Request ID for tracking")
    private String requestId;
    
    @Schema(description = "معلومات إضافية / Additional metadata")
    private Object metadata;
    
    // ===============================
    // Constructors - مع الحفاظ على التوافق
    // ===============================
    
    /**
     * Constructor افتراضي
     */
    public ApiResponse() {
        this.timestamp = LocalDateTime.now();
    }
    
    /**
     * Constructor الأساسي المُستخدم في الكود الحالي
     * التوقيع: (success, message, messageAr, data)
     */
    public ApiResponse(boolean success, String message, String messageAr, T data) {
        this();
        this.success = success;
        this.message = message;
        this.messageAr = messageAr;
        this.data = data;
        this.statusCode = success ? 200 : 400;
    }
    
    /**
     * Constructor للاستجابة الناجحة مع البيانات
     * التوقيع: (data, message, statusCode)
     */
    public ApiResponse(T data, String message, int statusCode) {
        this();
        this.success = true;
        this.data = data;
        this.message = message;
        this.statusCode = statusCode;
    }
    
    /**
     * Constructor للاستجابة الفاشلة
     * التوقيع: (message, errors, statusCode)
     */
    public ApiResponse(String message, Object errors, int statusCode) {
        this();
        this.success = false;
        this.message = message;
        this.errors = errors;
        this.statusCode = statusCode;
    }
    
    /**
     * Constructor كامل مع جميع المعاملات
     * التوقيع: (success, message, messageAr, data, errors, statusCode)
     */
    public ApiResponse(boolean success, String message, String messageAr, T data, Object errors, int statusCode) {
        this();
        this.success = success;
        this.message = message;
        this.messageAr = messageAr;
        this.data = data;
        this.errors = errors;
        this.statusCode = statusCode;
    }
    
    // ===============================
    // Static Factory Methods
    // ===============================
    
    /**
     * إنشاء استجابة ناجحة
     */
    public static <T> ApiResponse<T> success(T data) {
        return new ApiResponse<>(data, "Operation completed successfully", 200);
    }
    
    /**
     * إنشاء استجابة ناجحة مع رسالة مخصصة
     */
    public static <T> ApiResponse<T> success(T data, String message) {
        return new ApiResponse<>(data, message, 200);
    }
    
    /**
     * إنشاء استجابة ناجحة مع رسالة مخصصة ورمز حالة
     */
    public static <T> ApiResponse<T> success(T data, String message, int statusCode) {
        return new ApiResponse<>(data, message, statusCode);
    }
    
    /**
     * إنشاء استجابة فاشلة
     */
    public static <T> ApiResponse<T> error(String message) {
        return new ApiResponse<>(message, null, 400);
    }
    
    /**
     * إنشاء استجابة فاشلة مع تفاصيل الأخطاء
     */
    public static <T> ApiResponse<T> error(String message, Object errors) {
        return new ApiResponse<>(message, errors, 400);
    }
    
    /**
     * إنشاء استجابة فاشلة مع رمز حالة مخصص
     */
    public static <T> ApiResponse<T> error(String message, Object errors, int statusCode) {
        return new ApiResponse<>(message, errors, statusCode);
    }
    
    /**
     * إنشاء استجابة للمورد غير الموجود
     */
    public static <T> ApiResponse<T> notFound(String message) {
        return new ApiResponse<>(message, null, 404);
    }
    
    /**
     * إنشاء استجابة للوصول المرفوض
     */
    public static <T> ApiResponse<T> forbidden(String message) {
        return new ApiResponse<>(message, null, 403);
    }
    
    /**
     * إنشاء استجابة للطلب غير المصرح به
     */
    public static <T> ApiResponse<T> unauthorized(String message) {
        return new ApiResponse<>(message, null, 401);
    }
    
    // ===============================
    // Builder Pattern
    // ===============================
    
    public static <T> Builder<T> builder() {
        return new Builder<>();
    }
    
    public static class Builder<T> {
        private final ApiResponse<T> response;
        
        public Builder() {
            this.response = new ApiResponse<>();
        }
        
        public Builder<T> success(boolean success) {
            response.success = success;
            return this;
        }
        
        public Builder<T> message(String message) {
            response.message = message;
            return this;
        }
        
        public Builder<T> messageAr(String messageAr) {
            response.messageAr = messageAr;
            return this;
        }
        
        public Builder<T> data(T data) {
            response.data = data;
            return this;
        }
        
        public Builder<T> errors(Object errors) {
            response.errors = errors;
            return this;
        }
        
        public Builder<T> statusCode(int statusCode) {
            response.statusCode = statusCode;
            return this;
        }
        
        public Builder<T> requestId(String requestId) {
            response.requestId = requestId;
            return this;
        }
        
        public Builder<T> metadata(Object metadata) {
            response.metadata = metadata;
            return this;
        }
        
        public ApiResponse<T> build() {
            return response;
        }
    }
    
    // ===============================
    // Utility Methods
    // ===============================
    
    public boolean hasErrors() {
        return errors != null;
    }
    
    public boolean hasData() {
        return data != null;
    }
    
    // ===============================
    // Getters and Setters
    // ===============================
    
    public boolean isSuccess() { return success; }
    public void setSuccess(boolean success) { this.success = success; }
    
    public String getMessage() { return message; }
    public void setMessage(String message) { this.message = message; }
    
    public String getMessageAr() { return messageAr; }
    public void setMessageAr(String messageAr) { this.messageAr = messageAr; }
    
    public T getData() { return data; }
    public void setData(T data) { this.data = data; }
    
    public Object getErrors() { return errors; }
    public void setErrors(Object errors) { this.errors = errors; }
    
    public int getStatusCode() { return statusCode; }
    public void setStatusCode(int statusCode) { this.statusCode = statusCode; }
    
    public LocalDateTime getTimestamp() { return timestamp; }
    public void setTimestamp(LocalDateTime timestamp) { this.timestamp = timestamp; }
    
    public String getRequestId() { return requestId; }
    public void setRequestId(String requestId) { this.requestId = requestId; }
    
    public Object getMetadata() { return metadata; }
    public void setMetadata(Object metadata) { this.metadata = metadata; }
    
    @Override
    public String toString() {
        return "ApiResponse{" +
                "success=" + success +
                ", message='" + message + '\'' +
                ", messageAr='" + messageAr + '\'' +
                ", data=" + data +
                ", errors=" + errors +
                ", statusCode=" + statusCode +
                ", timestamp=" + timestamp +
                ", requestId='" + requestId + '\'' +
                ", metadata=" + metadata +
                '}';
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/dto/ErrorResponse.java ---- */


/* ---- File: src/main/java/com/ecommerce/multistore/shared/dto/ErrorResponse.java ---- */

package com.ecommerce.multistore.shared.dto;

import java.time.LocalDateTime;
import java.util.List;

/**
 * استجابة الأخطاء الموحدة
 * Unified Error Response
 */
public class ErrorResponse {

    private String error;
    private String message;
    private String messageAr;
    private int status;
    private String path;
    private LocalDateTime timestamp;
    private List<String> details;

    public ErrorResponse() {
        this.timestamp = LocalDateTime.now();
    }

    public ErrorResponse(String error, String message, int status, String path) {
        this();
        this.error = error;
        this.message = message;
        this.status = status;
        this.path = path;
    }

    public ErrorResponse(String error, String message, String messageAr, int status, String path) {
        this(error, message, status, path);
        this.messageAr = messageAr;
    }

    // Getters and Setters
    public String getError() { return error; }
    public void setError(String error) { this.error = error; }

    public String getMessage() { return message; }
    public void setMessage(String message) { this.message = message; }

    public String getMessageAr() { return messageAr; }
    public void setMessageAr(String messageAr) { this.messageAr = messageAr; }

    public int getStatus() { return status; }
    public void setStatus(int status) { this.status = status; }

    public String getPath() { return path; }
    public void setPath(String path) { this.path = path; }

    public LocalDateTime getTimestamp() { return timestamp; }
    public void setTimestamp(LocalDateTime timestamp) { this.timestamp = timestamp; }

    public List<String> getDetails() { return details; }
    public void setDetails(List<String> details) { this.details = details; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/dto/PaginatedResponse.java ---- */

package com.ecommerce.multistore.shared.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.data.domain.Page;

import java.util.List;

/**
 * استجابة الصفحات الموحدة
 * Unified paginated response wrapper
 * 
 * يوفر تنسيق موحد للبيانات المقسمة على صفحات مع معلومات التنقل
 * Provides consistent format for paginated data with navigation info
 * 
 * @param <T> نوع البيانات في الصفحة / Type of data in the page
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Schema(description = "استجابة الصفحات الموحدة / Unified paginated response")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class PaginatedResponse<T> {
    
    /**
     * البيانات في الصفحة الحالية
     * Data in current page
     */
    @Schema(description = "البيانات في الصفحة الحالية / Data in current page")
    private List<T> content;
    
    /**
     * معلومات الصفحة
     * Page information
     */
    @Schema(description = "معلومات الصفحة / Page information")
    private PageInfo pageInfo;
    
    /**
     * معلومات الفرز
     * Sort information
     */
    @Schema(description = "معلومات الفرز / Sort information")
    private SortInfo sortInfo;
    
    /**
     * معلومات إضافية للفلترة
     * Additional filter information
     */
    @Schema(description = "معلومات الفلترة / Filter information")
    private FilterInfo filterInfo;
    
    // ===============================
    // Constructors
    // ===============================
    
    /**
     * Constructor افتراضي
     * Default constructor
     */
    public PaginatedResponse() {}
    
    /**
     * Constructor مع البيانات ومعلومات الصفحة
     * Constructor with data and page info
     * 
     * @param content البيانات
     * @param pageInfo معلومات الصفحة
     */
    public PaginatedResponse(List<T> content, PageInfo pageInfo) {
        this.content = content;
        this.pageInfo = pageInfo;
    }
    
    /**
     * Constructor كامل
     * Full constructor
     * 
     * @param content البيانات
     * @param pageInfo معلومات الصفحة
     * @param sortInfo معلومات الفرز
     * @param filterInfo معلومات الفلترة
     */
    public PaginatedResponse(List<T> content, PageInfo pageInfo, SortInfo sortInfo, FilterInfo filterInfo) {
        this.content = content;
        this.pageInfo = pageInfo;
        this.sortInfo = sortInfo;
        this.filterInfo = filterInfo;
    }
    
    // ===============================
    // Static Factory Methods
    // ===============================
    
    /**
     * إنشاء من Spring Data Page
     * Create from Spring Data Page
     * 
     * @param <T> نوع البيانات
     * @param page صفحة Spring Data
     * @return PaginatedResponse<T>
     */
    public static <T> PaginatedResponse<T> from(Page<T> page) {
        PageInfo pageInfo = PageInfo.builder()
                .pageNumber(page.getNumber())
                .pageSize(page.getSize())
                .totalElements(page.getTotalElements())
                .totalPages(page.getTotalPages())
                .hasNext(page.hasNext())
                .hasPrevious(page.hasPrevious())
                .isFirst(page.isFirst())
                .isLast(page.isLast())
                .build();
        
        SortInfo sortInfo = null;
        if (page.getSort().isSorted()) {
            sortInfo = SortInfo.builder()
                    .sorted(true)
                    .sortBy(page.getSort().toString())
                    .build();
        }
        
        return new PaginatedResponse<>(page.getContent(), pageInfo, sortInfo, null);
    }
    
    /**
     * إنشاء من Spring Data Page مع معلومات فلترة
     * Create from Spring Data Page with filter info
     * 
     * @param <T> نوع البيانات
     * @param page صفحة Spring Data
     * @param filterInfo معلومات الفلترة
     * @return PaginatedResponse<T>
     */
    public static <T> PaginatedResponse<T> from(Page<T> page, FilterInfo filterInfo) {
        PaginatedResponse<T> response = from(page);
        response.setFilterInfo(filterInfo);
        return response;
    }
    
    /**
     * إنشاء استجابة فارغة
     * Create empty response
     * 
     * @param <T> نوع البيانات
     * @return PaginatedResponse<T>
     */
    public static <T> PaginatedResponse<T> empty() {
        PageInfo pageInfo = PageInfo.builder()
                .pageNumber(0)
                .pageSize(0)
                .totalElements(0L)
                .totalPages(0)
                .hasNext(false)
                .hasPrevious(false)
                .isFirst(true)
                .isLast(true)
                .build();
        
        return new PaginatedResponse<>(List.of(), pageInfo);
    }
    
    // ===============================
    // Utility Methods
    // ===============================
    
    /**
     * التحقق من وجود بيانات
     * Check if has data
     * 
     * @return boolean
     */
    public boolean hasContent() {
        return content != null && !content.isEmpty();
    }
    
    /**
     * التحقق من وجود صفحة تالية
     * Check if has next page
     * 
     * @return boolean
     */
    public boolean hasNext() {
        return pageInfo != null && pageInfo.hasNext;
    }
    
    /**
     * التحقق من وجود صفحة سابقة
     * Check if has previous page
     * 
     * @return boolean
     */
    public boolean hasPrevious() {
        return pageInfo != null && pageInfo.hasPrevious;
    }
    
    /**
     * الحصول على عدد العناصر في الصفحة الحالية
     * Get current page element count
     * 
     * @return int
     */
    public int getCurrentPageElementCount() {
        return content != null ? content.size() : 0;
    }
    
    // ===============================
    // Getters and Setters
    // ===============================
    
    public List<T> getContent() { return content; }
    public void setContent(List<T> content) { this.content = content; }
    
    public PageInfo getPageInfo() { return pageInfo; }
    public void setPageInfo(PageInfo pageInfo) { this.pageInfo = pageInfo; }
    
    public SortInfo getSortInfo() { return sortInfo; }
    public void setSortInfo(SortInfo sortInfo) { this.sortInfo = sortInfo; }
    
    public FilterInfo getFilterInfo() { return filterInfo; }
    public void setFilterInfo(FilterInfo filterInfo) { this.filterInfo = filterInfo; }
    
    // ===============================
    // Inner Classes
    // ===============================
    
    /**
     * معلومات الصفحة
     * Page information
     */
    @Schema(description = "معلومات الصفحة / Page information")
    public static class PageInfo {
        
        /**
         * رقم الصفحة الحالية (يبدأ من 0)
         * Current page number (starts from 0)
         */
        @Schema(description = "رقم الصفحة الحالية / Current page number", example = "0")
        private int pageNumber;
        
        /**
         * حجم الصفحة
         * Page size
         */
        @Schema(description = "حجم الصفحة / Page size", example = "10")
        private int pageSize;
        
        /**
         * إجمالي عدد العناصر
         * Total number of elements
         */
        @Schema(description = "إجمالي عدد العناصر / Total number of elements", example = "100")
        private long totalElements;
        
        /**
         * إجمالي عدد الصفحات
         * Total number of pages
         */
        @Schema(description = "إجمالي عدد الصفحات / Total number of pages", example = "10")
        private int totalPages;
        
        /**
         * هل توجد صفحة تالية
         * Has next page
         */
        @Schema(description = "هل توجد صفحة تالية / Has next page", example = "true")
        private boolean hasNext;
        
        /**
         * هل توجد صفحة سابقة
         * Has previous page
         */
        @Schema(description = "هل توجد صفحة سابقة / Has previous page", example = "false")
        private boolean hasPrevious;
        
        /**
         * هل هذه الصفحة الأولى
         * Is first page
         */
        @Schema(description = "هل هذه الصفحة الأولى / Is first page", example = "true")
        private boolean isFirst;
        
        /**
         * هل هذه الصفحة الأخيرة
         * Is last page
         */
        @Schema(description = "هل هذه الصفحة الأخيرة / Is last page", example = "false")
        private boolean isLast;
        
        // Constructors
        public PageInfo() {}
        
        // Builder pattern
        public static Builder builder() {
            return new Builder();
        }
        
        public static class Builder {
            private final PageInfo pageInfo;
            
            public Builder() {
                this.pageInfo = new PageInfo();
            }
            
            public Builder pageNumber(int pageNumber) {
                pageInfo.pageNumber = pageNumber;
                return this;
            }
            
            public Builder pageSize(int pageSize) {
                pageInfo.pageSize = pageSize;
                return this;
            }
            
            public Builder totalElements(long totalElements) {
                pageInfo.totalElements = totalElements;
                return this;
            }
            
            public Builder totalPages(int totalPages) {
                pageInfo.totalPages = totalPages;
                return this;
            }
            
            public Builder hasNext(boolean hasNext) {
                pageInfo.hasNext = hasNext;
                return this;
            }
            
            public Builder hasPrevious(boolean hasPrevious) {
                pageInfo.hasPrevious = hasPrevious;
                return this;
            }
            
            public Builder isFirst(boolean isFirst) {
                pageInfo.isFirst = isFirst;
                return this;
            }
            
            public Builder isLast(boolean isLast) {
                pageInfo.isLast = isLast;
                return this;
            }
            
            public PageInfo build() {
                return pageInfo;
            }
        }
        
        // Getters and Setters
        public int getPageNumber() { return pageNumber; }
        public void setPageNumber(int pageNumber) { this.pageNumber = pageNumber; }
        
        public int getPageSize() { return pageSize; }
        public void setPageSize(int pageSize) { this.pageSize = pageSize; }
        
        public long getTotalElements() { return totalElements; }
        public void setTotalElements(long totalElements) { this.totalElements = totalElements; }
        
        public int getTotalPages() { return totalPages; }
        public void setTotalPages(int totalPages) { this.totalPages = totalPages; }
        
        public boolean isHasNext() { return hasNext; }
        public void setHasNext(boolean hasNext) { this.hasNext = hasNext; }
        
        public boolean isHasPrevious() { return hasPrevious; }
        public void setHasPrevious(boolean hasPrevious) { this.hasPrevious = hasPrevious; }
        
        public boolean isFirst() { return isFirst; }
        public void setFirst(boolean first) { isFirst = first; }
        
        public boolean isLast() { return isLast; }
        public void setLast(boolean last) { isLast = last; }
    }
    
    /**
     * معلومات الفرز
     * Sort information
     */
    @Schema(description = "معلومات الفرز / Sort information")
    public static class SortInfo {
        
        /**
         * هل البيانات مرتبة
         * Is data sorted
         */
        @Schema(description = "هل البيانات مرتبة / Is data sorted", example = "true")
        private boolean sorted;
        
        /**
         * الحقل المرتب حسبه
         * Sort field
         */
        @Schema(description = "الحقل المرتب حسبه / Sort field", example = "name")
        private String sortBy;
        
        /**
         * اتجاه الفرز
         * Sort direction
         */
        @Schema(description = "اتجاه الفرز / Sort direction", example = "ASC")
        private String sortDirection;
        
        // Constructors
        public SortInfo() {}
        
        // Builder pattern
        public static Builder builder() {
            return new Builder();
        }
        
        public static class Builder {
            private final SortInfo sortInfo;
            
            public Builder() {
                this.sortInfo = new SortInfo();
            }
            
            public Builder sorted(boolean sorted) {
                sortInfo.sorted = sorted;
                return this;
            }
            
            public Builder sortBy(String sortBy) {
                sortInfo.sortBy = sortBy;
                return this;
            }
            
            public Builder sortDirection(String sortDirection) {
                sortInfo.sortDirection = sortDirection;
                return this;
            }
            
            public SortInfo build() {
                return sortInfo;
            }
        }
        
        // Getters and Setters
        public boolean isSorted() { return sorted; }
        public void setSorted(boolean sorted) { this.sorted = sorted; }
        
        public String getSortBy() { return sortBy; }
        public void setSortBy(String sortBy) { this.sortBy = sortBy; }
        
        public String getSortDirection() { return sortDirection; }
        public void setSortDirection(String sortDirection) { this.sortDirection = sortDirection; }
    }
    
    /**
     * معلومات الفلترة
     * Filter information
     */
    @Schema(description = "معلومات الفلترة / Filter information")
    public static class FilterInfo {
        
        /**
         * هل تم تطبيق فلترة
         * Is filtered
         */
        @Schema(description = "هل تم تطبيق فلترة / Is filtered", example = "true")
        private boolean filtered;
        
        /**
         * عدد الفلاتر المطبقة
         * Number of applied filters
         */
        @Schema(description = "عدد الفلاتر المطبقة / Number of applied filters", example = "2")
        private int appliedFiltersCount;
        
        /**
         * تفاصيل الفلاتر المطبقة
         * Applied filters details
         */
        @Schema(description = "تفاصيل الفلاتر المطبقة / Applied filters details")
        private Object appliedFilters;
        
        // Constructors
        public FilterInfo() {}
        
        // Builder pattern
        public static Builder builder() {
            return new Builder();
        }
        
        public static class Builder {
            private final FilterInfo filterInfo;
            
            public Builder() {
                this.filterInfo = new FilterInfo();
            }
            
            public Builder filtered(boolean filtered) {
                filterInfo.filtered = filtered;
                return this;
            }
            
            public Builder appliedFiltersCount(int appliedFiltersCount) {
                filterInfo.appliedFiltersCount = appliedFiltersCount;
                return this;
            }
            
            public Builder appliedFilters(Object appliedFilters) {
                filterInfo.appliedFilters = appliedFilters;
                return this;
            }
            
            public FilterInfo build() {
                return filterInfo;
            }
        }
        
        // Getters and Setters
        public boolean isFiltered() { return filtered; }
        public void setFiltered(boolean filtered) { this.filtered = filtered; }
        
        public int getAppliedFiltersCount() { return appliedFiltersCount; }
        public void setAppliedFiltersCount(int appliedFiltersCount) { this.appliedFiltersCount = appliedFiltersCount; }
        
        public Object getAppliedFilters() { return appliedFilters; }
        public void setAppliedFilters(Object appliedFilters) { this.appliedFilters = appliedFilters; }
    }
    
    // ===============================
    // toString Method
    // ===============================
    
    @Override
    public String toString() {
        return "PaginatedResponse{" +
                "content=" + content +
                ", pageInfo=" + pageInfo +
                ", sortInfo=" + sortInfo +
                ", filterInfo=" + filterInfo +
                '}';
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/dto/ValidationErrorResponse.java ---- */

package com.ecommerce.multistore.shared.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import io.swagger.v3.oas.annotations.media.Schema;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * استجابة أخطاء التحقق من صحة البيانات
 * Validation error response
 * 
 * يحتوي على تفاصيل شاملة لأخطاء التحقق مع الترجمة العربية
 * Contains comprehensive validation error details with Arabic translation
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Schema(description = "استجابة أخطاء التحقق / Validation error response")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ValidationErrorResponse {
    
    /**
     * أخطاء التحقق لكل حقل
     * Validation errors per field
     */
    @Schema(description = "أخطاء التحقق لكل حقل / Validation errors per field")
    private Map<String, String> validationErrors;
    
    /**
     * أخطاء التحقق لكل حقل بالعربية
     * Validation errors per field in Arabic
     */
    @Schema(description = "أخطاء التحقق لكل حقل بالعربية / Validation errors per field in Arabic")
    private Map<String, String> validationErrorsAr;
    
    /**
     * قائمة أخطاء التحقق التفصيلية
     * Detailed validation errors list
     */
    @Schema(description = "قائمة أخطاء التحقق التفصيلية / Detailed validation errors list")
    private List<FieldError> fieldErrors;
    
    /**
     * الحقل الذي فشل في التحقق أولاً
     * First failed validation field
     */
    @Schema(description = "الحقل الذي فشل في التحقق أولاً / First failed validation field")
    private String failedField;
    
    /**
     * إجمالي عدد الأخطاء
     * Total number of errors
     */
    @Schema(description = "إجمالي عدد الأخطاء / Total number of errors")
    private int totalErrors;
    
    /**
     * نوع خطأ التحقق
     * Validation error type
     */
    @Schema(description = "نوع خطأ التحقق / Validation error type")
    private String validationType;
    
    /**
     * وقت حدوث الخطأ
     * Error occurrence time
     */
    @Schema(description = "وقت حدوث الخطأ / Error occurrence time")
    private LocalDateTime errorTime;
    
    /**
     * اقتراحات لإصلاح الأخطاء
     * Suggestions to fix errors
     */
    @Schema(description = "اقتراحات لإصلاح الأخطاء / Suggestions to fix errors")
    private List<String> suggestions;
    
    /**
     * اقتراحات لإصلاح الأخطاء بالعربية
     * Suggestions to fix errors in Arabic
     */
    @Schema(description = "اقتراحات لإصلاح الأخطاء بالعربية / Suggestions to fix errors in Arabic")
    private List<String> suggestionsAr;
    
    // ===============================
    // Constructors
    // ===============================
    
    /**
     * Constructor افتراضي
     * Default constructor
     */
    public ValidationErrorResponse() {
        this.errorTime = LocalDateTime.now();
        this.validationType = "FIELD_VALIDATION";
    }
    
    /**
     * Constructor مع الأخطاء الأساسية
     * Constructor with basic errors
     * 
     * @param validationErrors أخطاء التحقق
     * @param validationErrorsAr أخطاء التحقق بالعربية
     */
    public ValidationErrorResponse(Map<String, String> validationErrors, 
                                 Map<String, String> validationErrorsAr) {
        this();
        this.validationErrors = validationErrors;
        this.validationErrorsAr = validationErrorsAr;
        this.totalErrors = validationErrors != null ? validationErrors.size() : 0;
    }
    
    // ===============================
    // Builder Pattern
    // ===============================
    
    /**
     * بناء استجابة أخطاء التحقق
     * Build validation error response
     * 
     * @return Builder
     */
    public static Builder builder() {
        return new Builder();
    }
    
    /**
     * فئة البناء لاستجابة أخطاء التحقق
     * Builder class for validation error response
     */
    public static class Builder {
        private final ValidationErrorResponse response;
        
        public Builder() {
            this.response = new ValidationErrorResponse();
        }
        
        public Builder validationErrors(Map<String, String> validationErrors) {
            response.validationErrors = validationErrors;
            return this;
        }
        
        public Builder validationErrorsAr(Map<String, String> validationErrorsAr) {
            response.validationErrorsAr = validationErrorsAr;
            return this;
        }
        
        public Builder fieldErrors(List<FieldError> fieldErrors) {
            response.fieldErrors = fieldErrors;
            return this;
        }
        
        public Builder failedField(String failedField) {
            response.failedField = failedField;
            return this;
        }
        
        public Builder totalErrors(int totalErrors) {
            response.totalErrors = totalErrors;
            return this;
        }
        
        public Builder validationType(String validationType) {
            response.validationType = validationType;
            return this;
        }
        
        public Builder suggestions(List<String> suggestions) {
            response.suggestions = suggestions;
            return this;
        }
        
        public Builder suggestionsAr(List<String> suggestionsAr) {
            response.suggestionsAr = suggestionsAr;
            return this;
        }
        
        public ValidationErrorResponse build() {
            return response;
        }
    }
    
    // ===============================
    // Utility Methods
    // ===============================
    
    /**
     * التحقق من وجود أخطاء
     * Check if has errors
     * 
     * @return boolean
     */
    public boolean hasErrors() {
        return totalErrors > 0;
    }
    
    /**
     * التحقق من وجود أخطاء لحقل معين
     * Check if has errors for specific field
     * 
     * @param fieldName اسم الحقل
     * @return boolean
     */
    public boolean hasErrorForField(String fieldName) {
        return validationErrors != null && validationErrors.containsKey(fieldName);
    }
    
    /**
     * الحصول على خطأ حقل معين
     * Get error for specific field
     * 
     * @param fieldName اسم الحقل
     * @return String رسالة الخطأ
     */
    public String getErrorForField(String fieldName) {
        return validationErrors != null ? validationErrors.get(fieldName) : null;
    }
    
    /**
     * الحصول على خطأ حقل معين بالعربية
     * Get error for specific field in Arabic
     * 
     * @param fieldName اسم الحقل
     * @return String رسالة الخطأ بالعربية
     */
    public String getErrorForFieldAr(String fieldName) {
        return validationErrorsAr != null ? validationErrorsAr.get(fieldName) : null;
    }
    
    /**
     * إضافة خطأ تحقق جديد
     * Add new validation error
     * 
     * @param fieldName اسم الحقل
     * @param errorMessage رسالة الخطأ
     * @param errorMessageAr رسالة الخطأ بالعربية
     */
    public void addValidationError(String fieldName, String errorMessage, String errorMessageAr) {
        if (validationErrors == null) {
            validationErrors = new java.util.HashMap<>();
        }
        if (validationErrorsAr == null) {
            validationErrorsAr = new java.util.HashMap<>();
        }
        
        validationErrors.put(fieldName, errorMessage);
        validationErrorsAr.put(fieldName, errorMessageAr);
        
        // تحديث إجمالي الأخطاء
        this.totalErrors = validationErrors.size();
        
        // تحديث الحقل الفاشل إذا كان أول خطأ
        if (failedField == null) {
            failedField = fieldName;
        }
    }
    
    /**
     * إضافة اقتراح لإصلاح الأخطاء
     * Add suggestion to fix errors
     * 
     * @param suggestion الاقتراح
     * @param suggestionAr الاقتراح بالعربية
     */
    public void addSuggestion(String suggestion, String suggestionAr) {
        if (suggestions == null) {
            suggestions = new java.util.ArrayList<>();
        }
        if (suggestionsAr == null) {
            suggestionsAr = new java.util.ArrayList<>();
        }
        
        suggestions.add(suggestion);
        suggestionsAr.add(suggestionAr);
    }
    
    // ===============================
    // Inner Classes
    // ===============================
    
    /**
     * خطأ الحقل التفصيلي
     * Detailed field error
     */
    @Schema(description = "خطأ الحقل التفصيلي / Detailed field error")
    public static class FieldError {
        
        /**
         * اسم الحقل
         * Field name
         */
        @Schema(description = "اسم الحقل / Field name")
        private String fieldName;
        
        /**
         * القيمة المرفوضة
         * Rejected value
         */
        @Schema(description = "القيمة المرفوضة / Rejected value")
        private Object rejectedValue;
        
        /**
         * رسالة الخطأ
         * Error message
         */
        @Schema(description = "رسالة الخطأ / Error message")
        private String errorMessage;
        
        /**
         * رسالة الخطأ بالعربية
         * Error message in Arabic
         */
        @Schema(description = "رسالة الخطأ بالعربية / Error message in Arabic")
        private String errorMessageAr;
        
        /**
         * رمز خطأ التحقق
         * Validation error code
         */
        @Schema(description = "رمز خطأ التحقق / Validation error code")
        private String errorCode;
        
        /**
         * نوع القيمة المتوقعة
         * Expected value type
         */
        @Schema(description = "نوع القيمة المتوقعة / Expected value type")
        private String expectedType;
        
        /**
         * القيمة الدنيا المسموحة
         * Minimum allowed value
         */
        @Schema(description = "القيمة الدنيا المسموحة / Minimum allowed value")
        private Object minValue;
        
        /**
         * القيمة العليا المسموحة
         * Maximum allowed value
         */
        @Schema(description = "القيمة العليا المسموحة / Maximum allowed value")
        private Object maxValue;
        
        /**
         * نمط القيمة المطلوب
         * Required value pattern
         */
        @Schema(description = "نمط القيمة المطلوب / Required value pattern")
        private String pattern;
        
        // Constructors
        public FieldError() {}
        
        public FieldError(String fieldName, Object rejectedValue, String errorMessage) {
            this.fieldName = fieldName;
            this.rejectedValue = rejectedValue;
            this.errorMessage = errorMessage;
        }
        
        public FieldError(String fieldName, Object rejectedValue, String errorMessage, String errorMessageAr) {
            this.fieldName = fieldName;
            this.rejectedValue = rejectedValue;
            this.errorMessage = errorMessage;
            this.errorMessageAr = errorMessageAr;
        }
        
        // Builder pattern
        public static Builder builder() {
            return new Builder();
        }
        
        public static class Builder {
            private final FieldError fieldError;
            
            public Builder() {
                this.fieldError = new FieldError();
            }
            
            public Builder fieldName(String fieldName) {
                fieldError.fieldName = fieldName;
                return this;
            }
            
            public Builder rejectedValue(Object rejectedValue) {
                fieldError.rejectedValue = rejectedValue;
                return this;
            }
            
            public Builder errorMessage(String errorMessage) {
                fieldError.errorMessage = errorMessage;
                return this;
            }
            
            public Builder errorMessageAr(String errorMessageAr) {
                fieldError.errorMessageAr = errorMessageAr;
                return this;
            }
            
            public Builder errorCode(String errorCode) {
                fieldError.errorCode = errorCode;
                return this;
            }
            
            public Builder expectedType(String expectedType) {
                fieldError.expectedType = expectedType;
                return this;
            }
            
            public Builder minValue(Object minValue) {
                fieldError.minValue = minValue;
                return this;
            }
            
            public Builder maxValue(Object maxValue) {
                fieldError.maxValue = maxValue;
                return this;
            }
            
            public Builder pattern(String pattern) {
                fieldError.pattern = pattern;
                return this;
            }
            
            public FieldError build() {
                return fieldError;
            }
        }
        
        // Getters and Setters
        public String getFieldName() { return fieldName; }
        public void setFieldName(String fieldName) { this.fieldName = fieldName; }
        
        public Object getRejectedValue() { return rejectedValue; }
        public void setRejectedValue(Object rejectedValue) { this.rejectedValue = rejectedValue; }
        
        public String getErrorMessage() { return errorMessage; }
        public void setErrorMessage(String errorMessage) { this.errorMessage = errorMessage; }
        
        public String getErrorMessageAr() { return errorMessageAr; }
        public void setErrorMessageAr(String errorMessageAr) { this.errorMessageAr = errorMessageAr; }
        
        public String getErrorCode() { return errorCode; }
        public void setErrorCode(String errorCode) { this.errorCode = errorCode; }
        
        public String getExpectedType() { return expectedType; }
        public void setExpectedType(String expectedType) { this.expectedType = expectedType; }
        
        public Object getMinValue() { return minValue; }
        public void setMinValue(Object minValue) { this.minValue = minValue; }
        
        public Object getMaxValue() { return maxValue; }
        public void setMaxValue(Object maxValue) { this.maxValue = maxValue; }
        
        public String getPattern() { return pattern; }
        public void setPattern(String pattern) { this.pattern = pattern; }
        
        @Override
        public String toString() {
            return "FieldError{" +
                    "fieldName='" + fieldName + '\'' +
                    ", rejectedValue=" + rejectedValue +
                    ", errorMessage='" + errorMessage + '\'' +
                    ", errorMessageAr='" + errorMessageAr + '\'' +
                    ", errorCode='" + errorCode + '\'' +
                    '}';
        }
    }
    
    // ===============================
    // Static Factory Methods
    // ===============================
    
    /**
     * إنشاء استجابة خطأ واحد
     * Create single error response
     * 
     * @param fieldName اسم الحقل
     * @param errorMessage رسالة الخطأ
     * @param errorMessageAr رسالة الخطأ بالعربية
     * @return ValidationErrorResponse
     */
    public static ValidationErrorResponse singleError(String fieldName, String errorMessage, String errorMessageAr) {
        ValidationErrorResponse response = new ValidationErrorResponse();
        response.addValidationError(fieldName, errorMessage, errorMessageAr);
        response.setFailedField(fieldName);
        return response;
    }
    
    /**
     * إنشاء استجابة أخطاء متعددة
     * Create multiple errors response
     * 
     * @param validationErrors أخطاء التحقق
     * @param validationErrorsAr أخطاء التحقق بالعربية
     * @return ValidationErrorResponse
     */
    public static ValidationErrorResponse multipleErrors(Map<String, String> validationErrors, 
                                                       Map<String, String> validationErrorsAr) {
        return new ValidationErrorResponse(validationErrors, validationErrorsAr);
    }
    
    // ===============================
    // Getters and Setters
    // ===============================
    
    public Map<String, String> getValidationErrors() { return validationErrors; }
    public void setValidationErrors(Map<String, String> validationErrors) { this.validationErrors = validationErrors; }
    
    public Map<String, String> getValidationErrorsAr() { return validationErrorsAr; }
    public void setValidationErrorsAr(Map<String, String> validationErrorsAr) { this.validationErrorsAr = validationErrorsAr; }
    
    public List<FieldError> getFieldErrors() { return fieldErrors; }
    public void setFieldErrors(List<FieldError> fieldErrors) { this.fieldErrors = fieldErrors; }
    
    public String getFailedField() { return failedField; }
    public void setFailedField(String failedField) { this.failedField = failedField; }
    
    public int getTotalErrors() { return totalErrors; }
    public void setTotalErrors(int totalErrors) { this.totalErrors = totalErrors; }
    
    public String getValidationType() { return validationType; }
    public void setValidationType(String validationType) { this.validationType = validationType; }
    
    public LocalDateTime getErrorTime() { return errorTime; }
    public void setErrorTime(LocalDateTime errorTime) { this.errorTime = errorTime; }
    
    public List<String> getSuggestions() { return suggestions; }
    public void setSuggestions(List<String> suggestions) { this.suggestions = suggestions; }
    
    public List<String> getSuggestionsAr() { return suggestionsAr; }
    public void setSuggestionsAr(List<String> suggestionsAr) { this.suggestionsAr = suggestionsAr; }
    
    // ===============================
    // toString Method
    // ===============================
    
    @Override
    public String toString() {
        return "ValidationErrorResponse{" +
                "validationErrors=" + validationErrors +
                ", validationErrorsAr=" + validationErrorsAr +
                ", fieldErrors=" + fieldErrors +
                ", failedField='" + failedField + '\'' +
                ", totalErrors=" + totalErrors +
                ", validationType='" + validationType + '\'' +
                ", errorTime=" + errorTime +
                ", suggestions=" + suggestions +
                ", suggestionsAr=" + suggestionsAr +
                '}';
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/exception/BusinessException.java ---- */

package com.ecommerce.multistore.shared.exception;

/**
 * استثناء منطق الأعمال المخصص
 * Custom business logic exception
 * 
 * يُستخدم لأخطاء منطق الأعمال مثل قواعد التطبيق والتحقق من المنطق
 * Used for business logic errors like application rules and logic validation
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
public class BusinessException extends RuntimeException {
    
    /**
     * رسالة الخطأ بالعربية
     * Error message in Arabic
     */
    private String messageAr;
    
    /**
     * رمز الحالة HTTP
     * HTTP status code
     */
    private int statusCode;
    
    /**
     * رمز الخطأ المخصص
     * Custom error code
     */
    private String errorCode;
    
    /**
     * بيانات إضافية للخطأ
     * Additional error data
     */
    private Object additionalData;
    
    // ===============================
    // Constructors
    // ===============================
    
    /**
     * Constructor مع رسالة فقط
     * Constructor with message only
     * 
     * @param message رسالة الخطأ
     */
    public BusinessException(String message) {
        super(message);
        this.statusCode = 400; // Bad Request by default
    }
    
    /**
     * Constructor مع رسالة ورمز حالة
     * Constructor with message and status code
     * 
     * @param message رسالة الخطأ
     * @param statusCode رمز الحالة
     */
    public BusinessException(String message, int statusCode) {
        super(message);
        this.statusCode = statusCode;
    }
    
    /**
     * Constructor مع رسالة ورسالة عربية
     * Constructor with message and Arabic message
     * 
     * @param message رسالة الخطأ
     * @param messageAr رسالة الخطأ بالعربية
     */
    public BusinessException(String message, String messageAr) {
        super(message);
        this.messageAr = messageAr;
        this.statusCode = 400;
    }
    
    /**
     * Constructor كامل
     * Full constructor
     * 
     * @param message رسالة الخطأ
     * @param messageAr رسالة الخطأ بالعربية
     * @param statusCode رمز الحالة
     */
    public BusinessException(String message, String messageAr, int statusCode) {
        super(message);
        this.messageAr = messageAr;
        this.statusCode = statusCode;
    }
    
    /**
     * Constructor مع رسالة وسبب
     * Constructor with message and cause
     * 
     * @param message رسالة الخطأ
     * @param cause السبب
     */
    public BusinessException(String message, Throwable cause) {
        super(message, cause);
        this.statusCode = 400;
    }
    
    /**
     * Constructor مع جميع المعاملات
     * Constructor with all parameters
     * 
     * @param message رسالة الخطأ
     * @param messageAr رسالة الخطأ بالعربية
     * @param statusCode رمز الحالة
     * @param errorCode رمز الخطأ المخصص
     * @param additionalData بيانات إضافية
     */
    public BusinessException(String message, String messageAr, int statusCode, 
                           String errorCode, Object additionalData) {
        super(message);
        this.messageAr = messageAr;
        this.statusCode = statusCode;
        this.errorCode = errorCode;
        this.additionalData = additionalData;
    }
    
    // ===============================
    // Static Factory Methods
    // ===============================
    
    /**
     * إنشاء استثناء طلب خاطئ
     * Create bad request exception
     * 
     * @param message رسالة الخطأ
     * @return BusinessException
     */
    public static BusinessException badRequest(String message) {
        return new BusinessException(message, 400);
    }
    
    /**
     * إنشاء استثناء طلب خاطئ مع رسالة عربية
     * Create bad request exception with Arabic message
     * 
     * @param message رسالة الخطأ
     * @param messageAr رسالة الخطأ بالعربية
     * @return BusinessException
     */
    public static BusinessException badRequest(String message, String messageAr) {
        return new BusinessException(message, messageAr, 400);
    }
    
    /**
     * إنشاء استثناء تعارض
     * Create conflict exception
     * 
     * @param message رسالة الخطأ
     * @return BusinessException
     */
    public static BusinessException conflict(String message) {
        return new BusinessException(message, 409);
    }
    
    /**
     * إنشاء استثناء تعارض مع رسالة عربية
     * Create conflict exception with Arabic message
     * 
     * @param message رسالة الخطأ
     * @param messageAr رسالة الخطأ بالعربية
     * @return BusinessException
     */
    public static BusinessException conflict(String message, String messageAr) {
        return new BusinessException(message, messageAr, 409);
    }
    
    /**
     * إنشاء استثناء وصول مرفوض
     * Create forbidden exception
     * 
     * @param message رسالة الخطأ
     * @return BusinessException
     */
    public static BusinessException forbidden(String message) {
        return new BusinessException(message, 403);
    }
    
    /**
     * إنشاء استثناء وصول مرفوض مع رسالة عربية
     * Create forbidden exception with Arabic message
     * 
     * @param message رسالة الخطأ
     * @param messageAr رسالة الخطأ بالعربية
     * @return BusinessException
     */
    public static BusinessException forbidden(String message, String messageAr) {
        return new BusinessException(message, messageAr, 403);
    }
    
    // ===============================
    // Getters and Setters
    // ===============================
    
    /**
     * الحصول على رسالة الخطأ بالعربية
     * Get Arabic error message
     * 
     * @return String رسالة الخطأ بالعربية
     */
    public String getMessageAr() {
        return messageAr;
    }
    
    /**
     * تعيين رسالة الخطأ بالعربية
     * Set Arabic error message
     * 
     * @param messageAr رسالة الخطأ بالعربية
     */
    public void setMessageAr(String messageAr) {
        this.messageAr = messageAr;
    }
    
    /**
     * الحصول على رمز الحالة
     * Get status code
     * 
     * @return int رمز الحالة
     */
    public int getStatusCode() {
        return statusCode;
    }
    
    /**
     * تعيين رمز الحالة
     * Set status code
     * 
     * @param statusCode رمز الحالة
     */
    public void setStatusCode(int statusCode) {
        this.statusCode = statusCode;
    }
    
    /**
     * الحصول على رمز الخطأ المخصص
     * Get custom error code
     * 
     * @return String رمز الخطأ المخصص
     */
    public String getErrorCode() {
        return errorCode;
    }
    
    /**
     * تعيين رمز الخطأ المخصص
     * Set custom error code
     * 
     * @param errorCode رمز الخطأ المخصص
     */
    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }
    
    /**
     * الحصول على البيانات الإضافية
     * Get additional data
     * 
     * @return Object البيانات الإضافية
     */
    public Object getAdditionalData() {
        return additionalData;
    }
    
    /**
     * تعيين البيانات الإضافية
     * Set additional data
     * 
     * @param additionalData البيانات الإضافية
     */
    public void setAdditionalData(Object additionalData) {
        this.additionalData = additionalData;
    }
    
    // ===============================
    // Utility Methods
    // ===============================
    
    /**
     * التحقق من وجود رسالة عربية
     * Check if Arabic message exists
     * 
     * @return boolean
     */
    public boolean hasArabicMessage() {
        return messageAr != null && !messageAr.trim().isEmpty();
    }
    
    /**
     * التحقق من وجود رمز خطأ مخصص
     * Check if custom error code exists
     * 
     * @return boolean
     */
    public boolean hasErrorCode() {
        return errorCode != null && !errorCode.trim().isEmpty();
    }
    
    /**
     * التحقق من وجود بيانات إضافية
     * Check if additional data exists
     * 
     * @return boolean
     */
    public boolean hasAdditionalData() {
        return additionalData != null;
    }
    
    // ===============================
    // toString Method
    // ===============================
    
    @Override
    public String toString() {
        return "BusinessException{" +
                "message='" + getMessage() + '\'' +
                ", messageAr='" + messageAr + '\'' +
                ", statusCode=" + statusCode +
                ", errorCode='" + errorCode + '\'' +
                ", additionalData=" + additionalData +
                '}';
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/exception/DuplicateResourceException.java ---- */

package com.ecommerce.multistore.shared.exception;

/**
 * استثناء تكرار المورد
 * Duplicate resource exception
 * 
 * يُستخدم عندما يحاول المستخدم إنشاء مورد موجود بالفعل
 * Used when user attempts to create a resource that already exists
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
public class DuplicateResourceException extends RuntimeException {
    
    /**
     * رسالة الخطأ بالعربية
     * Error message in Arabic
     */
    private String messageAr;
    
    /**
     * نوع المورد المكرر
     * Type of duplicate resource
     */
    private String resourceType;
    
    /**
     * القيمة المكررة
     * Duplicate value
     */
    private Object duplicateValue;
    
    /**
     * الحقل المكرر
     * Duplicate field
     */
    private String duplicateField;
    
    // ===============================
    // Constructors
    // ===============================
    
    /**
     * Constructor مع رسالة فقط
     * Constructor with message only
     * 
     * @param message رسالة الخطأ
     */
    public DuplicateResourceException(String message) {
        super(message);
    }
    
    /**
     * Constructor مع رسالة ورسالة عربية
     * Constructor with message and Arabic message
     * 
     * @param message رسالة الخطأ
     * @param messageAr رسالة الخطأ بالعربية
     */
    public DuplicateResourceException(String message, String messageAr) {
        super(message);
        this.messageAr = messageAr;
    }
    
    /**
     * Constructor مع تفاصيل التكرار
     * Constructor with duplication details
     * 
     * @param resourceType نوع المورد
     * @param duplicateField الحقل المكرر
     * @param duplicateValue القيمة المكررة
     */
    public DuplicateResourceException(String resourceType, String duplicateField, Object duplicateValue) {
        super(String.format("%s already exists with %s: %s", resourceType, duplicateField, duplicateValue));
        this.resourceType = resourceType;
        this.duplicateField = duplicateField;
        this.duplicateValue = duplicateValue;
        this.messageAr = String.format("%s موجود بالفعل بـ %s: %s", 
                                     translateResourceType(resourceType), 
                                     translateField(duplicateField), 
                                     duplicateValue);
    }
    
    // ===============================
    // Static Factory Methods
    // ===============================
    
    /**
     * إنشاء استثناء تكرار SKU
     * Create duplicate SKU exception
     * 
     * @param sku رمز المنتج المكرر
     * @return DuplicateResourceException
     */
    public static DuplicateResourceException sku(String sku) {
        return new DuplicateResourceException("Product", "SKU", sku);
    }
    
    /**
     * إنشاء استثناء تكرار البريد الإلكتروني
     * Create duplicate email exception
     * 
     * @param email البريد الإلكتروني المكرر
     * @return DuplicateResourceException
     */
    public static DuplicateResourceException email(String email) {
        return new DuplicateResourceException("User", "email", email);
    }
    
    /**
     * إنشاء استثناء تكرار رقم الهاتف
     * Create duplicate phone exception
     * 
     * @param phone رقم الهاتف المكرر
     * @return DuplicateResourceException
     */
    public static DuplicateResourceException phone(String phone) {
        return new DuplicateResourceException("User", "phone", phone);
    }
    
    /**
     * إنشاء استثناء تكرار الرابط الودود
     * Create duplicate slug exception
     * 
     * @param slug الرابط الودود المكرر
     * @return DuplicateResourceException
     */
    public static DuplicateResourceException slug(String slug) {
        return new DuplicateResourceException("Resource", "slug", slug);
    }
    
    // ===============================
    // Helper Methods
    // ===============================
    
    /**
     * ترجمة نوع المورد إلى العربية
     * Translate resource type to Arabic
     * 
     * @param resourceType نوع المورد
     * @return String الترجمة العربية
     */
    private String translateResourceType(String resourceType) {
        switch (resourceType.toLowerCase()) {
            case "product": return "المنتج";
            case "user": return "المستخدم";
            case "category": return "الفئة";
            case "brand": return "العلامة التجارية";
            case "resource": return "المورد";
            default: return resourceType;
        }
    }
    
    /**
     * ترجمة اسم الحقل إلى العربية
     * Translate field name to Arabic
     * 
     * @param field اسم الحقل
     * @return String الترجمة العربية
     */
    private String translateField(String field) {
        switch (field.toLowerCase()) {
            case "sku": return "رمز المنتج";
            case "email": return "البريد الإلكتروني";
            case "phone": return "رقم الهاتف";
            case "slug": return "الرابط الودود";
            case "name": return "الاسم";
            default: return field;
        }
    }
    
    // ===============================
    // Getters and Setters
    // ===============================
    
    public String getMessageAr() { return messageAr; }
    public void setMessageAr(String messageAr) { this.messageAr = messageAr; }
    
    public String getResourceType() { return resourceType; }
    public void setResourceType(String resourceType) { this.resourceType = resourceType; }
    
    public Object getDuplicateValue() { return duplicateValue; }
    public void setDuplicateValue(Object duplicateValue) { this.duplicateValue = duplicateValue; }
    
    public String getDuplicateField() { return duplicateField; }
    public void setDuplicateField(String duplicateField) { this.duplicateField = duplicateField; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/exception/GlobalExceptionHandler.java ---- */

package com.ecommerce.multistore.shared.exception;

import com.ecommerce.multistore.shared.dto.ApiResponse;
import com.ecommerce.multistore.shared.dto.ValidationErrorResponse;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.AuthenticationException;
import org.springframework.validation.FieldError;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import org.springframework.web.servlet.NoHandlerFoundException;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * معالج الأخطاء العام للتطبيق
 * Global exception handler for the application
 * 
 * يتعامل مع جميع أنواع الأخطاء ويحولها إلى استجابات API موحدة
 * Handles all types of exceptions and converts them to unified API responses
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@RestControllerAdvice
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    
    // ===============================
    // Business Logic Exceptions
    // ===============================
    
    /**
     * معالجة أخطاء منطق الأعمال المخصصة
     * Handle custom business logic exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(BusinessException.class)
    public ResponseEntity<ApiResponse<Object>> handleBusinessException(
            BusinessException ex, HttpServletRequest request) {
        
        logger.warn("Business exception occurred: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message(ex.getMessage())
                .messageAr(ex.getMessageAr())
                .statusCode(ex.getStatusCode())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.valueOf(ex.getStatusCode()));
    }
    
    /**
     * معالجة أخطاء المورد غير الموجود
     * Handle resource not found exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ApiResponse<Object>> handleResourceNotFoundException(
            ResourceNotFoundException ex, HttpServletRequest request) {
        
        logger.warn("Resource not found: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message(ex.getMessage())
                .messageAr(ex.getMessageAr())
                .statusCode(HttpStatus.NOT_FOUND.value())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }
    
    /**
     * معالجة أخطاء تكرار المورد
     * Handle duplicate resource exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(DuplicateResourceException.class)
    public ResponseEntity<ApiResponse<Object>> handleDuplicateResourceException(
            DuplicateResourceException ex, HttpServletRequest request) {
        
        logger.warn("Duplicate resource: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message(ex.getMessage())
                .messageAr(ex.getMessageAr())
                .statusCode(HttpStatus.CONFLICT.value())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.CONFLICT);
    }
    
    // ===============================
    // Validation Exceptions
    // ===============================
    
    /**
     * معالجة أخطاء التحقق من صحة البيانات
     * Handle validation exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ApiResponse<Object>> handleValidationException(
            MethodArgumentNotValidException ex, HttpServletRequest request) {
        
        logger.warn("Validation error: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        Map<String, String> validationErrors = new HashMap<>();
        Map<String, String> validationErrorsAr = new HashMap<>();
        
        ex.getBindingResult().getAllErrors().forEach(error -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            
            validationErrors.put(fieldName, errorMessage);
            validationErrorsAr.put(fieldName, translateValidationMessage(errorMessage));
        });
        
        ValidationErrorResponse errorResponse = ValidationErrorResponse.builder()
                .validationErrors(validationErrors)
                .validationErrorsAr(validationErrorsAr)
                .failedField(validationErrors.keySet().iterator().next())
                .totalErrors(validationErrors.size())
                .build();
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message("Validation failed")
                .messageAr("فشل في التحقق من صحة البيانات")
                .errors(errorResponse)
                .statusCode(HttpStatus.BAD_REQUEST.value())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }
    
    /**
     * معالجة أخطاء التحقق من القيود
     * Handle constraint violation exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(ConstraintViolationException.class)
    public ResponseEntity<ApiResponse<Object>> handleConstraintViolationException(
            ConstraintViolationException ex, HttpServletRequest request) {
        
        logger.warn("Constraint violation: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        Map<String, String> constraintErrors = new HashMap<>();
        
        for (ConstraintViolation<?> violation : ex.getConstraintViolations()) {
            String fieldName = violation.getPropertyPath().toString();
            String errorMessage = violation.getMessage();
            constraintErrors.put(fieldName, errorMessage);
        }
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message("Constraint validation failed")
                .messageAr("فشل في التحقق من القيود")
                .errors(constraintErrors)
                .statusCode(HttpStatus.BAD_REQUEST.value())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }
    
    // ===============================
    // Security Exceptions
    // ===============================
    
    /**
     * معالجة أخطاء المصادقة
     * Handle authentication exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(AuthenticationException.class)
    public ResponseEntity<ApiResponse<Object>> handleAuthenticationException(
            AuthenticationException ex, HttpServletRequest request) {
        
        logger.warn("Authentication failed: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message("Authentication failed")
                .messageAr("فشل في المصادقة")
                .statusCode(HttpStatus.UNAUTHORIZED.value())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED);
    }
    
    /**
     * معالجة أخطاء رفض الوصول
     * Handle access denied exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<ApiResponse<Object>> handleAccessDeniedException(
            AccessDeniedException ex, HttpServletRequest request) {
        
        logger.warn("Access denied: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message("Access denied")
                .messageAr("تم رفض الوصول")
                .statusCode(HttpStatus.FORBIDDEN.value())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.FORBIDDEN);
    }
    
    /**
     * معالجة أخطاء بيانات الاعتماد الخاطئة
     * Handle bad credentials exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<ApiResponse<Object>> handleBadCredentialsException(
            BadCredentialsException ex, HttpServletRequest request) {
        
        logger.warn("Bad credentials: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message("Invalid credentials")
                .messageAr("بيانات اعتماد غير صحيحة")
                .statusCode(HttpStatus.UNAUTHORIZED.value())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED);
    }
    
    // ===============================
    // Database Exceptions
    // ===============================
    
    /**
     * معالجة أخطاء سلامة البيانات
     * Handle data integrity violation exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<ApiResponse<Object>> handleDataIntegrityViolationException(
            DataIntegrityViolationException ex, HttpServletRequest request) {
        
        logger.error("Data integrity violation: {} | Request: {} {}", 
                    ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        String userMessage = "Data integrity violation occurred";
        String userMessageAr = "حدث انتهاك لسلامة البيانات";
        
        // تحليل نوع الخطأ وإرسال رسالة مناسبة
        if (ex.getMessage().contains("unique constraint") || ex.getMessage().contains("duplicate")) {
            userMessage = "This record already exists";
            userMessageAr = "هذا السجل موجود بالفعل";
        } else if (ex.getMessage().contains("foreign key")) {
            userMessage = "Cannot delete this record because it is referenced by other records";
            userMessageAr = "لا يمكن حذف هذا السجل لأنه مرتبط بسجلات أخرى";
        }
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message(userMessage)
                .messageAr(userMessageAr)
                .statusCode(HttpStatus.CONFLICT.value())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.CONFLICT);
    }
    
    // ===============================
    // HTTP Exceptions
    // ===============================
    
    /**
     * معالجة أخطاء الطريقة غير المدعومة
     * Handle method not supported exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)
    public ResponseEntity<ApiResponse<Object>> handleMethodNotSupportedException(
            HttpRequestMethodNotSupportedException ex, HttpServletRequest request) {
        
        logger.warn("Method not supported: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message("HTTP method not supported: " + ex.getMethod())
                .messageAr("طريقة HTTP غير مدعومة: " + ex.getMethod())
                .statusCode(HttpStatus.METHOD_NOT_ALLOWED.value())
                .requestId(generateRequestId(request))
                .metadata(Map.of(
                    "supportedMethods", ex.getSupportedMethods(),
                    "requestedMethod", ex.getMethod()
                ))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.METHOD_NOT_ALLOWED);
    }
    
    /**
     * معالجة أخطاء نوع المحتوى غير المدعوم
     * Handle unsupported media type exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(HttpMediaTypeNotSupportedException.class)
    public ResponseEntity<ApiResponse<Object>> handleMediaTypeNotSupportedException(
            HttpMediaTypeNotSupportedException ex, HttpServletRequest request) {
        
        logger.warn("Media type not supported: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message("Media type not supported")
                .messageAr("نوع المحتوى غير مدعوم")
                .statusCode(HttpStatus.UNSUPPORTED_MEDIA_TYPE.value())
                .requestId(generateRequestId(request))
                .metadata(Map.of(
                    "supportedMediaTypes", ex.getSupportedMediaTypes(),
                    "contentType", ex.getContentType()
                ))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.UNSUPPORTED_MEDIA_TYPE);
    }
    
    /**
     * معالجة أخطاء المسار غير الموجود
     * Handle no handler found exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(NoHandlerFoundException.class)
    public ResponseEntity<ApiResponse<Object>> handleNoHandlerFoundException(
            NoHandlerFoundException ex, HttpServletRequest request) {
        
        logger.warn("No handler found: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message("Endpoint not found: " + ex.getRequestURL())
                .messageAr("نقطة النهاية غير موجودة: " + ex.getRequestURL())
                .statusCode(HttpStatus.NOT_FOUND.value())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }
    
    /**
     * معالجة أخطاء المعامل المفقود
     * Handle missing parameter exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(MissingServletRequestParameterException.class)
    public ResponseEntity<ApiResponse<Object>> handleMissingParameterException(
            MissingServletRequestParameterException ex, HttpServletRequest request) {
        
        logger.warn("Missing parameter: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message("Missing required parameter: " + ex.getParameterName())
                .messageAr("معامل مطلوب مفقود: " + ex.getParameterName())
                .statusCode(HttpStatus.BAD_REQUEST.value())
                .requestId(generateRequestId(request))
                .metadata(Map.of(
                    "parameterName", ex.getParameterName(),
                    "parameterType", ex.getParameterType()
                ))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }
    
    /**
     * معالجة أخطاء نوع المعامل الخاطئ
     * Handle method argument type mismatch exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(MethodArgumentTypeMismatchException.class)
    public ResponseEntity<ApiResponse<Object>> handleTypeMismatchException(
            MethodArgumentTypeMismatchException ex, HttpServletRequest request) {
        
        logger.warn("Type mismatch: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message("Invalid parameter type for: " + ex.getName())
                .messageAr("نوع معامل غير صحيح لـ: " + ex.getName())
                .statusCode(HttpStatus.BAD_REQUEST.value())
                .requestId(generateRequestId(request))
                .metadata(Map.of(
                    "parameterName", ex.getName(),
                    "providedValue", ex.getValue(),
                    "expectedType", ex.getRequiredType().getSimpleName()
                ))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }
    
    /**
     * معالجة أخطاء قراءة الرسالة
     * Handle message not readable exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(HttpMessageNotReadableException.class)
    public ResponseEntity<ApiResponse<Object>> handleMessageNotReadableException(
            HttpMessageNotReadableException ex, HttpServletRequest request) {
        
        logger.warn("Message not readable: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message("Invalid request body format")
                .messageAr("تنسيق نص الطلب غير صحيح")
                .statusCode(HttpStatus.BAD_REQUEST.value())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }
    
    // ===============================
    // Generic Exceptions
    // ===============================
    
    /**
     * معالجة أخطاء IllegalArgumentException
     * Handle illegal argument exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ApiResponse<Object>> handleIllegalArgumentException(
            IllegalArgumentException ex, HttpServletRequest request) {
        
        logger.warn("Illegal argument: {} | Request: {} {}", 
                   ex.getMessage(), request.getMethod(), request.getRequestURI());
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message(ex.getMessage())
                .messageAr("معامل غير صحيح")
                .statusCode(HttpStatus.BAD_REQUEST.value())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }
    
    /**
     * معالجة جميع الأخطاء العامة الأخرى
     * Handle all other generic exceptions
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return ResponseEntity<ApiResponse<Object>>
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiResponse<Object>> handleGenericException(
            Exception ex, HttpServletRequest request) {
        
        logger.error("Unexpected error occurred: {} | Request: {} {}", 
                    ex.getMessage(), request.getMethod(), request.getRequestURI(), ex);
        
        ApiResponse<Object> response = ApiResponse.builder()
                .success(false)
                .message("An unexpected error occurred")
                .messageAr("حدث خطأ غير متوقع")
                .statusCode(HttpStatus.INTERNAL_SERVER_ERROR.value())
                .requestId(generateRequestId(request))
                .metadata(createErrorMetadata(ex, request))
                .build();
        
        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
    }
    
    // ===============================
    // Helper Methods
    // ===============================
    
    /**
     * توليد معرف فريد للطلب
     * Generate unique request ID
     * 
     * @param request الطلب
     * @return String معرف الطلب
     */
    private String generateRequestId(HttpServletRequest request) {
        return UUID.randomUUID().toString().substring(0, 8);
    }
    
    /**
     * إنشاء معلومات إضافية للخطأ
     * Create error metadata
     * 
     * @param ex الاستثناء
     * @param request الطلب
     * @return Map<String, Object>
     */
    private Map<String, Object> createErrorMetadata(Exception ex, HttpServletRequest request) {
        Map<String, Object> metadata = new HashMap<>();
        metadata.put("timestamp", LocalDateTime.now());
        metadata.put("path", request.getRequestURI());
        metadata.put("method", request.getMethod());
        metadata.put("exceptionType", ex.getClass().getSimpleName());
        
        if (request.getQueryString() != null) {
            metadata.put("queryString", request.getQueryString());
        }
        
        return metadata;
    }
    
    /**
     * ترجمة رسائل التحقق إلى العربية
     * Translate validation messages to Arabic
     * 
     * @param message الرسالة الأصلية
     * @return String الرسالة المترجمة
     */
    private String translateValidationMessage(String message) {
        Map<String, String> translations = Map.of(
            "must not be blank", "يجب ألا يكون فارغاً",
            "must not be null", "يجب ألا يكون فارغاً",
            "size must be between", "يجب أن يكون الحجم بين",
            "must be greater than", "يجب أن يكون أكبر من",
            "must be less than", "يجب أن يكون أصغر من",
            "is required", "مطلوب",
            "already exists", "موجود بالفعل",
            "not found", "غير موجود"
        );
        
        return translations.entrySet().stream()
                .filter(entry -> message.contains(entry.getKey()))
                .findFirst()
                .map(Map.Entry::getValue)
                .orElse(message);
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/exception/ResourceNotFoundException.java ---- */

package com.ecommerce.multistore.shared.exception;

/**
 * استثناء المورد غير الموجود
 * Resource not found exception
 * 
 * يُستخدم عندما لا يتم العثور على مورد مطلوب
 * Used when a requested resource is not found
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
public class ResourceNotFoundException extends RuntimeException {
    
    /**
     * رسالة الخطأ بالعربية
     * Error message in Arabic
     */
    private String messageAr;
    
    /**
     * نوع المورد غير الموجود
     * Type of resource not found
     */
    private String resourceType;
    
    /**
     * معرف المورد غير الموجود
     * ID of resource not found
     */
    private Object resourceId;
    
    // ===============================
    // Constructors
    // ===============================
    
    /**
     * Constructor مع رسالة فقط
     * Constructor with message only
     * 
     * @param message رسالة الخطأ
     */
    public ResourceNotFoundException(String message) {
        super(message);
    }
    
    /**
     * Constructor مع رسالة ورسالة عربية
     * Constructor with message and Arabic message
     * 
     * @param message رسالة الخطأ
     * @param messageAr رسالة الخطأ بالعربية
     */
    public ResourceNotFoundException(String message, String messageAr) {
        super(message);
        this.messageAr = messageAr;
    }
    
    /**
     * Constructor مع نوع المورد ومعرفه
     * Constructor with resource type and ID
     * 
     * @param resourceType نوع المورد
     * @param resourceId معرف المورد
     */
    public ResourceNotFoundException(String resourceType, Object resourceId) {
        super(String.format("%s not found with ID: %s", resourceType, resourceId));
        this.resourceType = resourceType;
        this.resourceId = resourceId;
        this.messageAr = String.format("%s غير موجود بالمعرف: %s", 
                                     translateResourceType(resourceType), resourceId);
    }
    
    /**
     * Constructor كامل
     * Full constructor
     * 
     * @param message رسالة الخطأ
     * @param messageAr رسالة الخطأ بالعربية
     * @param resourceType نوع المورد
     * @param resourceId معرف المورد
     */
    public ResourceNotFoundException(String message, String messageAr, 
                                   String resourceType, Object resourceId) {
        super(message);
        this.messageAr = messageAr;
        this.resourceType = resourceType;
        this.resourceId = resourceId;
    }
    
    // ===============================
    // Static Factory Methods
    // ===============================
    
    /**
     * إنشاء استثناء للمنتج غير الموجود
     * Create product not found exception
     * 
     * @param productId معرف المنتج
     * @return ResourceNotFoundException
     */
    public static ResourceNotFoundException product(Object productId) {
        return new ResourceNotFoundException("Product", productId);
    }
    
    /**
     * إنشاء استثناء للمستخدم غير الموجود
     * Create user not found exception
     * 
     * @param userId معرف المستخدم
     * @return ResourceNotFoundException
     */
    public static ResourceNotFoundException user(Object userId) {
        return new ResourceNotFoundException("User", userId);
    }
    
    /**
     * إنشاء استثناء للطلب غير الموجود
     * Create order not found exception
     * 
     * @param orderId معرف الطلب
     * @return ResourceNotFoundException
     */
    public static ResourceNotFoundException order(Object orderId) {
        return new ResourceNotFoundException("Order", orderId);
    }
    
    /**
     * إنشاء استثناء للفئة غير الموجودة
     * Create category not found exception
     * 
     * @param categoryId معرف الفئة
     * @return ResourceNotFoundException
     */
    public static ResourceNotFoundException category(Object categoryId) {
        return new ResourceNotFoundException("Category", categoryId);
    }
    
    /**
     * إنشاء استثناء للعلامة التجارية غير الموجودة
     * Create brand not found exception
     * 
     * @param brandId معرف العلامة التجارية
     * @return ResourceNotFoundException
     */
    public static ResourceNotFoundException brand(Object brandId) {
        return new ResourceNotFoundException("Brand", brandId);
    }
    
    // ===============================
    // Helper Methods
    // ===============================
    
    /**
     * ترجمة نوع المورد إلى العربية
     * Translate resource type to Arabic
     * 
     * @param resourceType نوع المورد
     * @return String الترجمة العربية
     */
    private String translateResourceType(String resourceType) {
        switch (resourceType.toLowerCase()) {
            case "product": return "المنتج";
            case "user": return "المستخدم";
            case "order": return "الطلب";
            case "category": return "الفئة";
            case "brand": return "العلامة التجارية";
            case "payment": return "الدفع";
            default: return resourceType;
        }
    }
    
    // ===============================
    // Getters and Setters
    // ===============================
    
    public String getMessageAr() { return messageAr; }
    public void setMessageAr(String messageAr) { this.messageAr = messageAr; }
    
    public String getResourceType() { return resourceType; }
    public void setResourceType(String resourceType) { this.resourceType = resourceType; }
    
    public Object getResourceId() { return resourceId; }
    public void setResourceId(Object resourceId) { this.resourceId = resourceId; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/exception/ValidationException.java ---- */


/* ---- File: src/main/java/com/ecommerce/multistore/shared/exception/ValidationException.java ---- */

package com.ecommerce.multistore.shared.exception;

import java.util.List;

/**
 * استثناء التحقق من الصحة
 * Validation Exception
 */
public class ValidationException extends RuntimeException {

    private final List<String> errors;

    public ValidationException(String message) {
        super(message);
        this.errors = List.of(message);
    }

    public ValidationException(String message, List<String> errors) {
        super(message);
        this.errors = errors;
    }

    public ValidationException(List<String> errors) {
        super("Validation failed");
        this.errors = errors;
    }

    public List<String> getErrors() {
        return errors;
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/security/ApiKeyAuthFilter.java ---- */


/* ---- File: src/main/java/com/ecommerce/multistore/shared/security/ApiKeyAuthFilter.java ---- */

package com.ecommerce.multistore.shared.security;

import com.ecommerce.multistore.shared.constants.AppConstants;
import com.ecommerce.multistore.shared.dto.ApiResponse;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

/**
 * مرشح مصادقة مفتاح API
 * API Key Authentication Filter
 */
@Component
public class ApiKeyAuthFilter extends OncePerRequestFilter {

    @Value("${app.api.key:default-api-key}")
    private String validApiKey;

    @Override
    protected void doFilterInternal(HttpServletRequest request, 
                                  HttpServletResponse response, 
                                  FilterChain filterChain) throws ServletException, IOException {

        String requestPath = request.getRequestURI();

        // تخطي المسارات العامة
        if (isPublicPath(requestPath)) {
            filterChain.doFilter(request, response);
            return;
        }

        String apiKey = request.getHeader(AppConstants.API_KEY_HEADER);

       if (apiKey == null || !validApiKey.equals(apiKey)) {
    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
    response.setContentType("application/json");
    response.setCharacterEncoding("UTF-8");
    
    // استخدام ApiResponse للتنسيق الموحد
    ApiResponse<Void> errorResponse = ApiResponse.unauthorized("Invalid API Key");
    errorResponse.setMessageAr("مفتاح API غير صحيح");
    
    // تحويل إلى JSON
    ObjectMapper objectMapper = new ObjectMapper();
    String jsonString = objectMapper.writeValueAsString(errorResponse);
    
    response.getWriter().write(jsonString);
    return;
}


        filterChain.doFilter(request, response);
    }

    private boolean isPublicPath(String path) {
        return path.startsWith("/api/v1/auth/") ||
               path.startsWith("/swagger-ui/") ||
               path.startsWith("/v3/api-docs") ||
               path.equals("/health") ||
               path.equals("/actuator/health");
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/security/RateLimitingFilter.java ---- */

package com.ecommerce.multistore.shared.security;

import com.ecommerce.multistore.shared.constants.AppConstants;
import com.ecommerce.multistore.shared.dto.ApiResponse;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * مرشح تحديد معدل الطلبات
 * Rate Limiting Filter
 * 
 * يحد من عدد الطلبات المسموح بها لكل عميل في فترة زمنية محددة
 * Limits the number of requests allowed per client in a specified time window
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Component
public class RateLimitingFilter extends OncePerRequestFilter {

    private final ConcurrentHashMap<String, RateLimitInfo> rateLimitMap = new ConcurrentHashMap<>();
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    protected void doFilterInternal(HttpServletRequest request, 
                                  HttpServletResponse response, 
                                  FilterChain filterChain) throws ServletException, IOException {

        String clientIp = getClientIpAddress(request);
        RateLimitInfo rateLimitInfo = rateLimitMap.computeIfAbsent(clientIp, k -> new RateLimitInfo());

        if (isRateLimitExceeded(rateLimitInfo)) {
            handleRateLimitExceeded(response, rateLimitInfo);
            return;
        }

        rateLimitInfo.incrementRequests();
        
        // إضافة Rate Limit headers للطلبات الناجحة
        addRateLimitHeaders(response, rateLimitInfo);
        
        filterChain.doFilter(request, response);
    }

    /**
     * معالجة تجاوز حد الطلبات
     * Handle rate limit exceeded
     */
    private void handleRateLimitExceeded(HttpServletResponse response, RateLimitInfo rateLimitInfo) throws IOException {
        // إعداد response status وheaders
        response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        
        // حساب وقت إعادة التعيين
        long resetTimeMillis = System.currentTimeMillis() + (AppConstants.RATE_LIMIT_WINDOW_MINUTES * 60 * 1000);
        int retryAfterSeconds = AppConstants.RATE_LIMIT_WINDOW_MINUTES * 60;
        
        // إضافة Rate Limit headers حسب RFC 6585
        response.setHeader("X-RateLimit-Limit", String.valueOf(AppConstants.RATE_LIMIT_REQUESTS));
        response.setHeader("X-RateLimit-Remaining", "0");
        response.setHeader("X-RateLimit-Reset", String.valueOf(resetTimeMillis));
        response.setHeader("Retry-After", String.valueOf(retryAfterSeconds));
        
        // إنشاء response موحد
        ApiResponse<Map<String, Object>> errorResponse = ApiResponse.error(
            "Rate limit exceeded",
            Map.of(
                "limit", AppConstants.RATE_LIMIT_REQUESTS,
                "windowMinutes", AppConstants.RATE_LIMIT_WINDOW_MINUTES,
                "retryAfterSeconds", retryAfterSeconds,
                "resetTime", resetTimeMillis,
                "currentRequests", rateLimitInfo.getRequestCount()
            ),
            HttpStatus.TOO_MANY_REQUESTS.value()
        );
        errorResponse.setMessageAr("تم تجاوز حد الطلبات المسموح");
        
        // تحويل إلى JSON وإرسال
        response.getWriter().write(objectMapper.writeValueAsString(errorResponse));
    }

    /**
     * إضافة Rate Limit headers للطلبات الناجحة
     * Add rate limit headers for successful requests
     */
    private void addRateLimitHeaders(HttpServletResponse response, RateLimitInfo rateLimitInfo) {
        int remainingRequests = Math.max(0, AppConstants.RATE_LIMIT_REQUESTS - rateLimitInfo.getRequestCount());
        long resetTimeMillis = System.currentTimeMillis() + (AppConstants.RATE_LIMIT_WINDOW_MINUTES * 60 * 1000);
        
        response.setHeader("X-RateLimit-Limit", String.valueOf(AppConstants.RATE_LIMIT_REQUESTS));
        response.setHeader("X-RateLimit-Remaining", String.valueOf(remainingRequests));
        response.setHeader("X-RateLimit-Reset", String.valueOf(resetTimeMillis));
    }

    /**
     * الحصول على عنوان IP الخاص بالعميل
     * Get client IP address
     */
    private String getClientIpAddress(HttpServletRequest request) {
        // التحقق من X-Forwarded-For header (للـ proxy servers)
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty() && !"unknown".equalsIgnoreCase(xForwardedFor)) {
            return xForwardedFor.split(",")[0].trim();
        }
        
        // التحقق من X-Real-IP header
        String xRealIp = request.getHeader("X-Real-IP");
        if (xRealIp != null && !xRealIp.isEmpty() && !"unknown".equalsIgnoreCase(xRealIp)) {
            return xRealIp;
        }
        
        // التحقق من X-Forwarded-For header (Cloudflare)
        String cfConnectingIp = request.getHeader("CF-Connecting-IP");
        if (cfConnectingIp != null && !cfConnectingIp.isEmpty() && !"unknown".equalsIgnoreCase(cfConnectingIp)) {
            return cfConnectingIp;
        }
        
        // استخدام الـ IP الافتراضي
        return request.getRemoteAddr();
    }

    /**
     * التحقق من تجاوز حد الطلبات
     * Check if rate limit is exceeded
     */
    private boolean isRateLimitExceeded(RateLimitInfo rateLimitInfo) {
        LocalDateTime now = LocalDateTime.now();

        // إعادة تعيين العداد إذا انتهت النافذة الزمنية
        if (now.isAfter(rateLimitInfo.getWindowStart().plusMinutes(AppConstants.RATE_LIMIT_WINDOW_MINUTES))) {
            rateLimitInfo.reset(now);
        }

        return rateLimitInfo.getRequestCount() >= AppConstants.RATE_LIMIT_REQUESTS;
    }

    /**
     * تنظيف البيانات المنتهية الصلاحية
     * Clean up expired entries
     */
    private void cleanupExpiredEntries() {
        LocalDateTime cutoffTime = LocalDateTime.now().minusMinutes(AppConstants.RATE_LIMIT_WINDOW_MINUTES * 2);
        
        rateLimitMap.entrySet().removeIf(entry -> 
            entry.getValue().getWindowStart().isBefore(cutoffTime)
        );
    }

    /**
     * معلومات تحديد معدل الطلبات
     * Rate limit information
     */
    private static class RateLimitInfo {
        private AtomicInteger requestCount = new AtomicInteger(0);
        private volatile LocalDateTime windowStart = LocalDateTime.now();

        /**
         * زيادة عدد الطلبات
         * Increment request count
         */
        public void incrementRequests() {
            requestCount.incrementAndGet();
        }

        /**
         * إعادة تعيين العداد
         * Reset counter
         */
        public void reset(LocalDateTime newWindowStart) {
            requestCount.set(0);
            windowStart = newWindowStart;
        }

        /**
         * الحصول على عدد الطلبات الحالي
         * Get current request count
         */
        public int getRequestCount() {
            return requestCount.get();
        }

        /**
         * الحصول على بداية النافذة الزمنية
         * Get window start time
         */
        public LocalDateTime getWindowStart() {
            return windowStart;
        }

        /**
         * الحصول على الطلبات المتبقية
         * Get remaining requests
         */
        public int getRemainingRequests() {
            return Math.max(0, AppConstants.RATE_LIMIT_REQUESTS - requestCount.get());
        }

        /**
         * التحقق من انتهاء النافذة الزمنية
         * Check if window has expired
         */
        public boolean isWindowExpired() {
            return LocalDateTime.now().isAfter(windowStart.plusMinutes(AppConstants.RATE_LIMIT_WINDOW_MINUTES));
        }
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/security/SecurityUtils.java ---- */

/* ---- File: src/main/java/com/ecommerce/multistore/shared/security/SecurityUtils.java ---- */

package com.ecommerce.multistore.shared.security;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.security.SecureRandom;
import java.util.Base64;
import java.util.UUID;

/**
 * أدوات الأمان المساعدة
 * Security Utilities
 */
public final class SecurityUtils {

    private static final PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
    private static final SecureRandom secureRandom = new SecureRandom();

    private SecurityUtils() {
        // Utility class
    }

    /**
     * تشفير كلمة المرور
     * Encode password
     */
    public static String encodePassword(String rawPassword) {
        return passwordEncoder.encode(rawPassword);
    }

    /**
     * التحقق من كلمة المرور
     * Verify password
     */
    public static boolean verifyPassword(String rawPassword, String encodedPassword) {
        return passwordEncoder.matches(rawPassword, encodedPassword);
    }

    /**
     * الحصول على المستخدم الحالي
     * Get current user
     */
    public static String getCurrentUsername() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.isAuthenticated()) {
            return authentication.getName();
        }
        return null;
    }

    /**
     * توليد رمز عشوائي آمن
     * Generate secure random token
     */
    public static String generateSecureToken() {
        byte[] randomBytes = new byte[32];
        secureRandom.nextBytes(randomBytes);
        return Base64.getUrlEncoder().withoutPadding().encodeToString(randomBytes);
    }

    /**
     * توليد مفتاح API
     * Generate API key
     */
    public static String generateApiKey() {
        return "msk_" + UUID.randomUUID().toString().replace("-", "");
    }

    /**
     * التحقق من صحة البريد الإلكتروني
     * Validate email format
     */
    public static boolean isValidEmail(String email) {
        return email != null && email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$");
    }

    /**
     * التحقق من قوة كلمة المرور
     * Validate password strength
     */
    public static boolean isStrongPassword(String password) {
        if (password == null || password.length() < 8) {
            return false;
        }

        boolean hasUpper = password.chars().anyMatch(Character::isUpperCase);
        boolean hasLower = password.chars().anyMatch(Character::isLowerCase);
        boolean hasDigit = password.chars().anyMatch(Character::isDigit);
        boolean hasSpecial = password.chars().anyMatch(ch -> "!@#$%^&*()_+-=[]{}|;:,.<>?".indexOf(ch) >= 0);

        return hasUpper && hasLower && hasDigit && hasSpecial;
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/utils/PaginationUtils.java ---- */

package com.ecommerce.multistore.shared.utils;

import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import com.ecommerce.multistore.shared.constants.AppConstants;

/**
 * أدوات التصفح والترقيم
 * Pagination Utilities
 */
public class PaginationUtils {
    
    /**
     * إنشاء Pageable مع معاملات افتراضية
     */
    public static Pageable createPageable(Integer page, Integer size, String sortBy, String sortDir) {
        // تطبيق القيم الافتراضية
        int pageNumber = (page != null && page >= 0) ? page : 0;
        int pageSize = (size != null && size > 0) ? 
            Math.min(size, AppConstants.MAX_PAGE_SIZE) : AppConstants.DEFAULT_PAGE_SIZE;
        
        String sortField = (sortBy != null && !sortBy.trim().isEmpty()) ? 
            sortBy : AppConstants.DEFAULT_SORT_BY;
        
        Sort.Direction direction = Sort.Direction.DESC;
        if (sortDir != null && sortDir.equalsIgnoreCase("asc")) {
            direction = Sort.Direction.ASC;
        }
        
        Sort sort = Sort.by(direction, sortField);
        
        return PageRequest.of(pageNumber, pageSize, sort);
    }
    
    /**
     * إنشاء Pageable بسيط
     */
    public static Pageable createSimplePageable(int page, int size) {
        return PageRequest.of(page, size);
    }
    
    /**
     * إنشاء Pageable مع ترتيب
     */
    public static Pageable createPageableWithSort(int page, int size, String sortBy) {
        return PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, sortBy));
    }
    
    /**
     * إنشاء Pageable مع ترتيب تصاعدي
     */
    public static Pageable createPageableAsc(int page, int size, String sortBy) {
        return PageRequest.of(page, size, Sort.by(Sort.Direction.ASC, sortBy));
    }
    
    /**
     * إنشاء Pageable مع ترتيب تنازلي
     */
    public static Pageable createPageableDesc(int page, int size, String sortBy) {
        return PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, sortBy));
    }
    
    /**
     * إنشاء Pageable مع ترتيب متعدد
     */
    public static Pageable createPageableWithMultipleSort(int page, int size, String... sortFields) {
        Sort sort = Sort.by(Sort.Direction.DESC, sortFields);
        return PageRequest.of(page, size, sort);
    }
    
    /**
     * التحقق من صحة معاملات التصفح
     */
    public static boolean isValidPaginationParams(Integer page, Integer size) {
        return (page == null || page >= 0) && 
               (size == null || (size > 0 && size <= AppConstants.MAX_PAGE_SIZE));
    }
    
    /**
     * حساب العدد الإجمالي للصفحات
     */
    public static int calculateTotalPages(long totalElements, int pageSize) {
        if (pageSize <= 0) {
            return 0;
        }
        return (int) Math.ceil((double) totalElements / pageSize);
    }
    
    /**
     * حساب رقم العنصر الأول في الصفحة
     */
    public static long calculateFirstElement(int page, int size) {
        return (long) page * size + 1;
    }
    
    /**
     * حساب رقم العنصر الأخير في الصفحة
     */
    public static long calculateLastElement(int page, int size, long totalElements) {
        long lastElement = (long) (page + 1) * size;
        return Math.min(lastElement, totalElements);
    }
    
    /**
     * التحقق من وجود صفحة سابقة
     */
    public static boolean hasPrevious(int page) {
        return page > 0;
    }
    
    /**
     * التحقق من وجود صفحة تالية
     */
    public static boolean hasNext(int page, int size, long totalElements) {
        int totalPages = calculateTotalPages(totalElements, size);
        return page < totalPages - 1;
    }
    
    /**
     * إنشاء معلومات تفصيلية عن التصفح
     */
    public static PaginationInfo createPaginationInfo(int page, int size, long totalElements) {
        int totalPages = calculateTotalPages(totalElements, size);
        long firstElement = calculateFirstElement(page, size);
        long lastElement = calculateLastElement(page, size, totalElements);
        
        return new PaginationInfo(
            page,
            size,
            totalPages,
            totalElements,
            firstElement,
            lastElement,
            hasPrevious(page),
            hasNext(page, size, totalElements)
        );
    }
    
    /**
     * معلومات التصفح
     */
    public static class PaginationInfo {
        private final int currentPage;
        private final int pageSize;
        private final int totalPages;
        private final long totalElements;
        private final long firstElement;
        private final long lastElement;
        private final boolean hasPrevious;
        private final boolean hasNext;
        
        public PaginationInfo(int currentPage, int pageSize, int totalPages, 
                            long totalElements, long firstElement, long lastElement,
                            boolean hasPrevious, boolean hasNext) {
            this.currentPage = currentPage;
            this.pageSize = pageSize;
            this.totalPages = totalPages;
            this.totalElements = totalElements;
            this.firstElement = firstElement;
            this.lastElement = lastElement;
            this.hasPrevious = hasPrevious;
            this.hasNext = hasNext;
        }
        
        // Getters
        public int getCurrentPage() { return currentPage; }
        public int getPageSize() { return pageSize; }
        public int getTotalPages() { return totalPages; }
        public long getTotalElements() { return totalElements; }
        public long getFirstElement() { return firstElement; }
        public long getLastElement() { return lastElement; }
        public boolean isHasPrevious() { return hasPrevious; }
        public boolean isHasNext() { return hasNext; }
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/shared/utils/SlugGenerator.java ---- */

package com.ecommerce.multistore.shared.utils;

import java.text.Normalizer;
import java.util.function.Function;
import java.util.regex.Pattern;

/**
 * مولد الـ Slug - تحويل النصوص إلى URLs صديقة للمتصفح
 * Slug Generator - Convert text to URL-friendly format
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
public class SlugGenerator {
    
    // Pattern للأحرف غير اللاتينية - مُصحح
    private static final Pattern NON_LATIN = Pattern.compile("[^\\w-]");
    
    // Pattern للمسافات المتعددة - مُصحح
    private static final Pattern WHITESPACE = Pattern.compile("[\\s]+");
    
    // Pattern للشرطات المتعددة - مُصحح
    private static final Pattern MULTIPLE_DASHES = Pattern.compile("-{2,}");
    
    // Pattern للشرطات في البداية والنهاية - مُصحح
    private static final Pattern EDGE_DASHES = Pattern.compile("^-|-$");
    
    /**
     * تحويل النص إلى slug
     * Convert text to slug
     */
    public static String generateSlug(String input) {
        if (input == null || input.trim().isEmpty()) {
            return "";
        }
        
        String slug = input.trim().toLowerCase();
        
        // تطبيع النص لإزالة العلامات التشكيلية - مُصحح
        slug = Normalizer.normalize(slug, Normalizer.Form.NFD);
        slug = slug.replaceAll("[\\p{InCombiningDiacriticalMarks}]", "");
        
        // استبدال المسافات بشرطات
        slug = WHITESPACE.matcher(slug).replaceAll("-");
        
        // إزالة الأحرف غير المسموحة
        slug = NON_LATIN.matcher(slug).replaceAll("");
        
        // إزالة الشرطات المتعددة
        slug = MULTIPLE_DASHES.matcher(slug).replaceAll("-");
        
        // إزالة الشرطات من البداية والنهاية
        slug = EDGE_DASHES.matcher(slug).replaceAll("");
        
        return slug;
    }
    

    /**
 * إنشاء slug فريد باستخدام checker function
 * Generate unique slug using checker function
 * 
 * @param input النص الأصلي
 * @param existsChecker دالة للتحقق من وجود الـ slug
 * @return slug فريد
 */
public static String generateUniqueSlug(String input, Function<String, Boolean> existsChecker) {
    String baseSlug = generateSlug(input);
    
    if (!existsChecker.apply(baseSlug)) {
        return baseSlug;
    }
    
    int counter = 1;
    String uniqueSlug;
    do {
        counter++;
        uniqueSlug = baseSlug + "-" + counter;
    } while (existsChecker.apply(uniqueSlug));
    
    return uniqueSlug;
}

    /**
     * تحويل النص العربي إلى slug
     */
    public static String generateArabicSlug(String arabicText) {
        if (arabicText == null || arabicText.trim().isEmpty()) {
            return "";
        }
        
        String transliterated = transliterateArabic(arabicText);
        return generateSlug(transliterated);
    }
    
    /**
     * تحويل الأحرف العربية إلى لاتينية
     */
    private static String transliterateArabic(String arabic) {
        return arabic
            .replaceAll("ا", "a")
            .replaceAll("ب", "b")
            .replaceAll("ت", "t")
            .replaceAll("ث", "th")
            .replaceAll("ج", "j")
            .replaceAll("ح", "h")
            .replaceAll("خ", "kh")
            .replaceAll("د", "d")
            .replaceAll("ذ", "dh")
            .replaceAll("ر", "r")
            .replaceAll("ز", "z")
            .replaceAll("س", "s")
            .replaceAll("ش", "sh")
            .replaceAll("ص", "s")
            .replaceAll("ض", "d")
            .replaceAll("ط", "t")
            .replaceAll("ظ", "z")
            .replaceAll("ع", "a")
            .replaceAll("غ", "gh")
            .replaceAll("ف", "f")
            .replaceAll("ق", "q")
            .replaceAll("ك", "k")
            .replaceAll("ل", "l")
            .replaceAll("م", "m")
            .replaceAll("ن", "n")
            .replaceAll("ه", "h")
            .replaceAll("و", "w")
            .replaceAll("ي", "y")
            .replaceAll("ى", "a")
            .replaceAll("ة", "h")
            .replaceAll("ء", "");
    }
    
    /**
     * التحقق من صحة الـ slug
     */
    public static boolean isValidSlug(String slug) {
        if (slug == null || slug.isEmpty()) {
            return false;
        }
        
        Pattern validSlugPattern = Pattern.compile("^[a-z0-9]+(?:-[a-z0-9]+)*$");
        return validSlugPattern.matcher(slug).matches();
    }
    
    /**
     * إنشاء slug فريد بإضافة رقم
     */
    public static String generateUniqueSlug(String baseSlug, int counter) {
        if (counter <= 1) {
            return baseSlug;
        }
        return baseSlug + "-" + counter;
    }
    
    /**
     * تقصير الـ slug إلى طول محدد
     */
    public static String truncateSlug(String slug, int maxLength) {
        if (slug == null || slug.length() <= maxLength) {
            return slug;
        }
        
        String truncated = slug.substring(0, maxLength);
        
        if (truncated.endsWith("-")) {
            truncated = truncated.substring(0, truncated.length() - 1);
        }
        
        return truncated;
    }
}


/* ---- File: src/main/java/com/ecommerce/multistore/shared/utils/ValidationUtils.java ---- */

package com.ecommerce.multistore.shared.utils;

import java.util.regex.Pattern;

/**
 * أدوات التحقق من صحة البيانات
 * Validation Utilities
 */
public class ValidationUtils {
    
    private static final Pattern EMAIL_PATTERN = Pattern.compile(
        "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
    );
    
    private static final Pattern PHONE_PATTERN = Pattern.compile(
        "^(\\+967|967|0)?[1-9][0-9]{7,8}$"
    );
    
    private static final Pattern STRONG_PASSWORD_PATTERN = Pattern.compile(
        "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$"
    );
    
    /**
     * التحقق من صحة البريد الإلكتروني
     */
    public static boolean isValidEmail(String email) {
        if (email == null || email.trim().isEmpty()) {
            return false;
        }
        return EMAIL_PATTERN.matcher(email.trim()).matches();
    }
    
    /**
     * التحقق من صحة رقم الهاتف اليمني
     */
    public static boolean isValidYemeniPhone(String phone) {
        if (phone == null || phone.trim().isEmpty()) {
            return false;
        }
        return PHONE_PATTERN.matcher(phone.trim()).matches();
    }
    
    /**
     * التحقق من قوة كلمة المرور
     */
    public static boolean isStrongPassword(String password) {
        if (password == null || password.length() < 8) {
            return false;
        }
        return STRONG_PASSWORD_PATTERN.matcher(password).matches();
    }
    
    /**
     * التحقق من صحة الـ SKU
     */
    public static boolean isValidSku(String sku) {
        if (sku == null || sku.trim().isEmpty()) {
            return false;
        }
        
        String cleaned = sku.trim().toUpperCase();
        return cleaned.matches("^[A-Z0-9-]{3,50}$");
    }
    
    /**
     * التحقق من صحة الرقم الضريبي
     */
    public static boolean isValidTaxNumber(String taxNumber) {
        if (taxNumber == null || taxNumber.trim().isEmpty()) {
            return false;
        }
        
        String cleaned = taxNumber.replaceAll("[^0-9]", "");
        return cleaned.length() >= 9 && cleaned.length() <= 15;
    }
    
    /**
     * تنظيف رقم الهاتف
     */
    public static String normalizePhone(String phone) {
        if (phone == null) {
            return null;
        }
        
        String cleaned = phone.replaceAll("[^0-9+]", "");
        
        if (cleaned.startsWith("+967")) {
            return cleaned;
        } else if (cleaned.startsWith("967")) {
            return "+" + cleaned;
        } else if (cleaned.startsWith("0")) {
            return "+967" + cleaned.substring(1);
        }
        
        return "+967" + cleaned;
    }
    
    /**
     * التحقق من صحة السعر
     */
    public static boolean isValidPrice(Double price) {
        return price != null && price > 0 && price <= 999999.99;
    }
    
    /**
     * التحقق من صحة الكمية
     */
    public static boolean isValidQuantity(Integer quantity) {
        return quantity != null && quantity >= 0 && quantity <= 999999;
    }
    
    /**
     * التحقق من صحة الخصم
     */
    public static boolean isValidDiscount(Double discount) {
        return discount != null && discount >= 0 && discount <= 100;
    }
    
    /**
     * التحقق من صحة الرمز البريدي
     */
    public static boolean isValidPostalCode(String postalCode) {
        if (postalCode == null || postalCode.trim().isEmpty()) {
            return true; // Optional field
        }
        
        String cleaned = postalCode.trim();
        return cleaned.matches("^[0-9]{4,10}$");
    }
    
    /**
     * التحقق من صحة رقم التتبع
     */
    public static boolean isValidTrackingNumber(String trackingNumber) {
        if (trackingNumber == null || trackingNumber.trim().isEmpty()) {
            return false;
        }
        
        String cleaned = trackingNumber.trim().toUpperCase();
        return cleaned.matches("^[A-Z0-9]{6,30}$");
    }
    
    /**
     * التحقق من صحة اللون بصيغة HEX
     */
    public static boolean isValidHexColor(String color) {
        if (color == null || color.trim().isEmpty()) {
            return false;
        }
        
        String cleaned = color.trim();
        return cleaned.matches("^#[0-9A-Fa-f]{6}$");
    }
    
    /**
     * التحقق من صحة الـ URL
     */
    public static boolean isValidUrl(String url) {
        if (url == null || url.trim().isEmpty()) {
            return false;
        }
        
        try {
            new java.net.URL(url);
            return true;
        } catch (java.net.MalformedURLException e) {
            return false;
        }
    }
    
    /**
     * التحقق من صحة JSON
     */
    public static boolean isValidJson(String json) {
        if (json == null || json.trim().isEmpty()) {
            return false;
        }
        
        try {
            com.fasterxml.jackson.databind.ObjectMapper mapper = 
                new com.fasterxml.jackson.databind.ObjectMapper();
            mapper.readTree(json);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}
    


/* ---- File: src/main/java/com/ecommerce/multistore/user/application/dto/CreateUserRequest.java ---- */

package com.ecommerce.multistore.user.application.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

public class CreateUserRequest {
    
    @NotBlank(message = "Email is required")
    @Email(message = "Email should be valid")
    private String email;
    
    @NotBlank(message = "Password is required")
    @Size(min = 6, message = "Password should be at least 6 characters")
    private String password;
    
    @NotBlank(message = "First name is required")
    private String firstName;
    
    @NotBlank(message = "Last name is required")
    private String lastName;
    
    private String firstNameAr;
    private String lastNameAr;
    private String phone;
    
    // Constructors
    public CreateUserRequest() {}
    
    // Getters and Setters
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    
    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }
    
    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }
    
    public String getFirstNameAr() { return firstNameAr; }
    public void setFirstNameAr(String firstNameAr) { this.firstNameAr = firstNameAr; }
    
    public String getLastNameAr() { return lastNameAr; }
    public void setLastNameAr(String lastNameAr) { this.lastNameAr = lastNameAr; }
    
    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/user/application/dto/UserResponse.java ---- */

package com.ecommerce.multistore.user.application.dto;

import com.ecommerce.multistore.user.domain.UserRole;
import java.time.LocalDateTime;
import java.util.UUID;

public class UserResponse {
    
    private UUID id;
    private String displayId;
    private String email;
    private String phone;
    private String firstName;
    private String lastName;
    private String firstNameAr;
    private String lastNameAr;
    private Boolean isActive;
    private Boolean isVerified;
    private UserRole role;
    private LocalDateTime createdAt;
    
    // Constructors
    public UserResponse() {}
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }
    
    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }
    
    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }
    
    public String getFirstNameAr() { return firstNameAr; }
    public void setFirstNameAr(String firstNameAr) { this.firstNameAr = firstNameAr; }
    
    public String getLastNameAr() { return lastNameAr; }
    public void setLastNameAr(String lastNameAr) { this.lastNameAr = lastNameAr; }
    
    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }
    
    public Boolean getIsVerified() { return isVerified; }
    public void setIsVerified(Boolean isVerified) { this.isVerified = isVerified; }
    
    public UserRole getRole() { return role; }
    public void setRole(UserRole role) { this.role = role; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/user/application/service/UserService.java ---- */

package com.ecommerce.multistore.user.application.service;

import com.ecommerce.multistore.user.application.dto.CreateUserRequest;
import com.ecommerce.multistore.user.application.dto.UserResponse;
import com.ecommerce.multistore.user.domain.User;
import com.ecommerce.multistore.user.domain.UserRole;
import com.ecommerce.multistore.user.infrastructure.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * خدمة إدارة المستخدمين
 * تحتوي على جميع العمليات المتعلقة بالمستخدمين مثل الإنشاء والتحديث والبحث
 * 
 * User Management Service
 * Contains all user-related operations such as creation, update, and search
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@Service
@Transactional
public class UserService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    /**
     * Constructor لحقن Dependencies
     * Constructor for dependency injection
     * 
     * @param userRepository مستودع المستخدمين للتعامل مع قاعدة البيانات
     * @param passwordEncoder مشفر كلمات المرور
     */
    @Autowired
    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    /**
     * إنشاء مستخدم جديد
     * Creates a new user with validation and password encryption
     * 
     * @param request بيانات المستخدم الجديد
     * @return UserResponse بيانات المستخدم المُنشأ
     * @throws IllegalArgumentException إذا كان الإيميل أو الهاتف مُستخدم مسبقاً
     * 
     * @see CreateUserRequest
     * @see UserResponse
     */
    public UserResponse createUser(CreateUserRequest request) {
        // التحقق من عدم وجود المستخدم مسبقاً
        validateUserUniqueness(request.getEmail(), request.getPhone());

        // إنشاء كائن المستخدم
        User user = buildUserFromRequest(request);
        
        // حفظ المستخدم
        User savedUser = userRepository.save(user);
        
        // إجبار JPA على كتابة البيانات في قاعدة البيانات
        userRepository.flush();
        
        // إعادة تحميل المستخدم للحصول على display_id المُولد من الـ trigger
        savedUser = userRepository.findById(savedUser.getId())
                .orElse(savedUser);
        
        // تحويل إلى Response وإرجاع النتيجة
        return convertToResponse(savedUser);
    }

    /**
     * البحث عن مستخدم بواسطة الإيميل
     * Finds a user by email address
     * 
     * @param email عنوان البريد الإلكتروني
     * @return Optional<UserResponse> المستخدم إذا وُجد، أو Optional.empty()
     */
    @Transactional(readOnly = true)
    public Optional<UserResponse> findByEmail(String email) {
        return userRepository.findByEmail(email)
                .map(this::convertToResponse);
    }

    /**
     * البحث عن مستخدم بواسطة Display ID
     * Finds a user by display ID
     * 
     * @param displayId المعرف المعروض للمستخدم (مثل USR-000001)
     * @return Optional<UserResponse> المستخدم إذا وُجد، أو Optional.empty()
     */
    @Transactional(readOnly = true)
    public Optional<UserResponse> findByDisplayId(String displayId) {
        return userRepository.findByDisplayId(displayId)
                .map(this::convertToResponse);
    }

    /**
     * البحث عن مستخدم بواسطة UUID
     * Finds a user by UUID
     * 
     * @param id المعرف الفريد للمستخدم
     * @return Optional<UserResponse> المستخدم إذا وُجد، أو Optional.empty()
     */
    @Transactional(readOnly = true)
    public Optional<UserResponse> findById(UUID id) {
        return userRepository.findById(id)
                .map(this::convertToResponse);
    }

    /**
     * الحصول على جميع المستخدمين
     * Retrieves all users from the database
     * 
     * @return List<UserResponse> قائمة بجميع المستخدمين
     */
    @Transactional(readOnly = true)
    public List<UserResponse> getAllUsers() {
        return userRepository.findAll()
                .stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    /**
     * تفعيل أو إلغاء تفعيل المستخدم
     * Activates or deactivates a user account
     * 
     * @param userId معرف المستخدم
     * @param isActive حالة التفعيل المطلوبة
     * @return UserResponse بيانات المستخدم المحدثة
     * @throws IllegalArgumentException إذا لم يوجد المستخدم
     */
    public UserResponse updateUserStatus(UUID userId, Boolean isActive) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User not found with ID: " + userId));
        
        user.setIsActive(isActive);
        user.setUpdatedAt(LocalDateTime.now());
        
        User updatedUser = userRepository.save(user);
        return convertToResponse(updatedUser);
    }

    /**
     * تأكيد البريد الإلكتروني للمستخدم
     * Verifies user's email address
     * 
     * @param userId معرف المستخدم
     * @return UserResponse بيانات المستخدم المحدثة
     * @throws IllegalArgumentException إذا لم يوجد المستخدم
     */
    public UserResponse verifyUserEmail(UUID userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User not found with ID: " + userId));
        
        user.setIsVerified(true);
        user.setUpdatedAt(LocalDateTime.now());
        
        User updatedUser = userRepository.save(user);
        return convertToResponse(updatedUser);
    }

    /**
     * التحقق من صحة بيانات تسجيل الدخول
     * Validates user login credentials
     * 
     * @param email البريد الإلكتروني
     * @param password كلمة المرور
     * @return Optional<UserResponse> المستخدم إذا كانت البيانات صحيحة
     */
    @Transactional(readOnly = true)
    public Optional<UserResponse> validateLogin(String email, String password) {
        return userRepository.findByEmail(email)
                .filter(user -> passwordEncoder.matches(password, user.getPasswordHash()))
                .filter(User::getIsActive)
                .map(this::convertToResponse);
    }

    // ===============================
    // Private Helper Methods
    // ===============================

    /**
     * التحقق من عدم تكرار الإيميل أو الهاتف
     * Validates that email and phone are unique
     * 
     * @param email البريد الإلكتروني
     * @param phone رقم الهاتف
     * @throws IllegalArgumentException إذا كان الإيميل أو الهاتف مُستخدم مسبقاً
     */
    private void validateUserUniqueness(String email, String phone) {
        if (userRepository.existsByEmail(email)) {
            throw new IllegalArgumentException("Email already exists: " + email);
        }
        
        if (phone != null && userRepository.existsByPhone(phone)) {
            throw new IllegalArgumentException("Phone number already exists: " + phone);
        }
    }

    /**
     * بناء كائن المستخدم من طلب الإنشاء
     * Builds User entity from CreateUserRequest
     * 
     * @param request بيانات المستخدم الجديد
     * @return User كائن المستخدم الجديد
     */
    private User buildUserFromRequest(CreateUserRequest request) {
        User user = new User();
        user.setEmail(request.getEmail());
        user.setPasswordHash(passwordEncoder.encode(request.getPassword()));
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());
        user.setFirstNameAr(request.getFirstNameAr());
        user.setLastNameAr(request.getLastNameAr());
        user.setPhone(request.getPhone());
        user.setRole(UserRole.CUSTOMER);
        user.setIsActive(true);
        user.setIsVerified(false);
        
        return user;
    }

    /**
     * تحويل كائن User إلى UserResponse
     * Converts User entity to UserResponse DTO
     * 
     * @param user كائن المستخدم
     * @return UserResponse DTO للاستجابة
     */
    private UserResponse convertToResponse(User user) {
        UserResponse response = new UserResponse();
        response.setId(user.getId());
        response.setDisplayId(user.getDisplayId());
        response.setEmail(user.getEmail());
        response.setPhone(user.getPhone());
        response.setFirstName(user.getFirstName());
        response.setLastName(user.getLastName());
        response.setFirstNameAr(user.getFirstNameAr());
        response.setLastNameAr(user.getLastNameAr());
        response.setIsActive(user.getIsActive());
        response.setIsVerified(user.getIsVerified());
        response.setRole(user.getRole());
        response.setCreatedAt(user.getCreatedAt());
        
        return response;
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/user/domain/User.java ---- */

package com.ecommerce.multistore.user.domain;

import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import java.time.LocalDateTime;
import java.util.UUID;

@Entity
@Table(name = "users")
public class User {
    
    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private UUID id;
    
    @Column(name = "display_id", unique = true)
    private String displayId;
    
    @Column(unique = true, nullable = false)
    private String email;
    
    @Column(name = "phone", unique = true)
    private String phone;
    
    @Column(name = "password_hash", nullable = false)
    private String passwordHash;
    
    @Column(name = "first_name", nullable = false)
    private String firstName;
    
    @Column(name = "last_name", nullable = false)
    private String lastName;
    
    @Column(name = "first_name_ar")
    private String firstNameAr;
    
    @Column(name = "last_name_ar")
    private String lastNameAr;
    
    @Column(name = "is_active")
    private Boolean isActive = true;
    
    @Column(name = "is_verified")
    private Boolean isVerified = false;
    
    @Convert(converter = UserRoleConverter.class)
    @Column(name = "role")
    private UserRole role = UserRole.CUSTOMER;
    
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
    
    @PrePersist
    protected void onCreate() {
        if (this.createdAt == null) {
            this.createdAt = LocalDateTime.now();
        }
        if (this.updatedAt == null) {
            this.updatedAt = LocalDateTime.now();
        }
    }
    
    @PreUpdate
    protected void onUpdate() {
        this.updatedAt = LocalDateTime.now();
    }
    
    // Constructors
    public User() {}
    
    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    
    public String getDisplayId() { return displayId; }
    public void setDisplayId(String displayId) { this.displayId = displayId; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }
    
    public String getPasswordHash() { return passwordHash; }
    public void setPasswordHash(String passwordHash) { this.passwordHash = passwordHash; }
    
    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }
    
    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }
    
    public String getFirstNameAr() { return firstNameAr; }
    public void setFirstNameAr(String firstNameAr) { this.firstNameAr = firstNameAr; }
    
    public String getLastNameAr() { return lastNameAr; }
    public void setLastNameAr(String lastNameAr) { this.lastNameAr = lastNameAr; }
    
    public Boolean getIsActive() { return isActive; }
    public void setIsActive(Boolean isActive) { this.isActive = isActive; }
    
    public Boolean getIsVerified() { return isVerified; }
    public void setIsVerified(Boolean isVerified) { this.isVerified = isVerified; }
    
    public UserRole getRole() { return role; }
    public void setRole(UserRole role) { this.role = role; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
}



/* ---- File: src/main/java/com/ecommerce/multistore/user/domain/UserRole.java ---- */

package com.ecommerce.multistore.user.domain;

import com.fasterxml.jackson.annotation.JsonValue;

/**
 * أدوار المستخدمين في النظام
 * User roles in the system
 * 
 * @author Multi-Store Team
 * @version 1.0
 */
public enum UserRole {
    /**
     * عميل عادي
     * Regular customer
     */
    CUSTOMER("customer"),
    
    /**
     * مدير
     * Administrator
     */
    ADMIN("admin"),
    
    /**
     * مدير عام
     * Super administrator
     */
    SUPER_ADMIN("super_admin"),
    
    /**
     * تاجر
     * Merchant
     */
    MERCHANT("merchant");

    private final String value;

    /**
     * Constructor للإنشاء بالقيمة
     * Constructor with value
     * 
     * @param value القيمة المخزنة في قاعدة البيانات
     */
    UserRole(String value) {
        this.value = value;
    }

    /**
     * الحصول على القيمة المخزنة في قاعدة البيانات
     * Get the database value
     * 
     * @return String القيمة
     */
    @JsonValue
    public String getValue() {
        return value;
    }

    /**
     * تحويل من String إلى Enum
     * Convert from String to Enum
     * 
     * @param value القيمة النصية
     * @return UserRole الدور المقابل
     */
    public static UserRole fromValue(String value) {
        for (UserRole role : UserRole.values()) {
            if (role.value.equals(value)) {
                return role;
            }
        }
        throw new IllegalArgumentException("Unknown role: " + value);
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/user/domain/UserRoleConverter.java ---- */

package com.ecommerce.multistore.user.domain;

import jakarta.persistence.AttributeConverter;
import jakarta.persistence.Converter;

/**
 * محول دور المستخدم لقاعدة البيانات
 * User role converter for database
 */
@Converter(autoApply = true)
public class UserRoleConverter implements AttributeConverter<UserRole, String> {

    @Override
    public String convertToDatabaseColumn(UserRole attribute) {
        if (attribute == null) {
            return null;
        }
        return attribute.getValue();
    }

    @Override
    public UserRole convertToEntityAttribute(String dbData) {
        if (dbData == null) {
            return null;
        }
        return UserRole.fromValue(dbData);
    }
}



/* ---- File: src/main/java/com/ecommerce/multistore/user/infrastructure/UserRepository.java ---- */

package com.ecommerce.multistore.user.infrastructure;

import com.ecommerce.multistore.user.domain.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Optional;
import java.util.UUID;

@Repository
public interface UserRepository extends JpaRepository<User, UUID> {
    
    Optional<User> findByEmail(String email);
    
    Optional<User> findByPhone(String phone);
    
    Optional<User> findByDisplayId(String displayId);
    
    boolean existsByEmail(String email);
    
    boolean existsByPhone(String phone);
}



/* ---- File: src/main/java/com/ecommerce/multistore/user/infrastructure/web/UserController.java ---- */

package com.ecommerce.multistore.user.infrastructure.web;

import com.ecommerce.multistore.user.application.dto.CreateUserRequest;
import com.ecommerce.multistore.user.application.dto.UserResponse;
import com.ecommerce.multistore.user.application.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/**
 * وحدة التحكم في المستخدمين - REST API
 * User Controller - REST API for user management
 * 
 * يوفر APIs لإدارة المستخدمين بما في ذلك التسجيل والبحث والتحديث
 * Provides APIs for user management including registration, search, and updates
 * 
 * @author Multi-Store Team
 * @version 1.0
 * @since 2024-01-01
 */
@RestController
@RequestMapping("/api/v1/users")
@CrossOrigin(origins = "*")
@Tag(name = "User Management", description = "APIs لإدارة المستخدمين - User Management APIs")
public class UserController {

    private final UserService userService;

    /**
     * Constructor لحقن UserService
     * Constructor for UserService dependency injection
     * 
     * @param userService خدمة المستخدمين
     */
    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    /**
     * تسجيل مستخدم جديد
     * Register a new user
     * 
     * @param request بيانات المستخدم الجديد
     * @return ResponseEntity<UserResponse> المستخدم المُنشأ أو رسالة خطأ
     * 
     * @apiNote POST /api/v1/users/register
     * @since 1.0
     */
    @PostMapping("/register")
    @Operation(
        summary = "تسجيل مستخدم جديد - Register New User",
        description = "إنشاء حساب مستخدم جديد في النظام مع التحقق من صحة البيانات - Create a new user account with data validation"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "201",
            description = "تم إنشاء المستخدم بنجاح - User created successfully",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
        ),
        @ApiResponse(
            responseCode = "400",
            description = "بيانات غير صحيحة - Invalid data provided",
            content = @Content(mediaType = "application/json")
        )
    })
    public ResponseEntity<?> registerUser(
            @Parameter(description = "بيانات المستخدم الجديد - New user data", required = true)
            @Valid @RequestBody CreateUserRequest request) {
        try {
            UserResponse user = userService.createUser(request);
            return new ResponseEntity<>(user, HttpStatus.CREATED);
        } catch (IllegalArgumentException e) {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", "Registration failed");
            errorResponse.put("message", e.getMessage());
            errorResponse.put("status", HttpStatus.BAD_REQUEST.value());
            return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }
    }

    /**
     * الحصول على جميع المستخدمين
     * Get all users
     * 
     * @return ResponseEntity<List<UserResponse>> قائمة بجميع المستخدمين
     * 
     * @apiNote GET /api/v1/users
     * @since 1.0
     */
    @GetMapping
    @Operation(
        summary = "الحصول على جميع المستخدمين - Get All Users",
        description = "استرجاع قائمة بجميع المستخدمين المسجلين في النظام - Retrieve list of all registered users"
    )
    @ApiResponse(
        responseCode = "200",
        description = "تم استرجاع المستخدمين بنجاح - Users retrieved successfully",
        content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
    )
    public ResponseEntity<List<UserResponse>> getAllUsers() {
        List<UserResponse> users = userService.getAllUsers();
        return new ResponseEntity<>(users, HttpStatus.OK);
    }

    /**
     * البحث عن مستخدم بواسطة Display ID
     * Find user by display ID
     * 
     * @param displayId المعرف المعروض (مثل USR-000001)
     * @return ResponseEntity<UserResponse> المستخدم أو 404
     * 
     * @apiNote GET /api/v1/users/display/{displayId}
     * @since 1.0
     */
    @GetMapping("/display/{displayId}")
    @Operation(
        summary = "البحث بواسطة Display ID - Find by Display ID",
        description = "البحث عن مستخدم باستخدام المعرف المعروض - Find user using display ID"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "تم العثور على المستخدم - User found",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
        ),
        @ApiResponse(
            responseCode = "404",
            description = "المستخدم غير موجود - User not found"
        )
    })
    public ResponseEntity<?> getUserByDisplayId(
            @Parameter(description = "المعرف المعروض للمستخدم - User display ID", example = "USR-000001")
            @PathVariable String displayId) {
        Optional<UserResponse> user = userService.findByDisplayId(displayId);
        if (user.isPresent()) {
            return new ResponseEntity<>(user.get(), HttpStatus.OK);
        } else {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", "User not found");
            errorResponse.put("message", "User with display ID '" + displayId + "' not found");
            errorResponse.put("status", HttpStatus.NOT_FOUND.value());
            return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
        }
    }

    /**
     * البحث عن مستخدم بواسطة UUID
     * Find user by UUID
     * 
     * @param id المعرف الفريد للمستخدم
     * @return ResponseEntity<UserResponse> المستخدم أو 404
     * 
     * @apiNote GET /api/v1/users/{id}
     * @since 1.0
     */
    @GetMapping("/{id}")
    @Operation(
        summary = "البحث بواسطة UUID - Find by UUID",
        description = "البحث عن مستخدم باستخدام المعرف الفريد - Find user using UUID"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "تم العثور على المستخدم - User found",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
        ),
        @ApiResponse(
            responseCode = "404",
            description = "المستخدم غير موجود - User not found"
        )
    })
    public ResponseEntity<?> getUserById(
            @Parameter(description = "المعرف الفريد للمستخدم - User UUID")
            @PathVariable UUID id) {
        Optional<UserResponse> user = userService.findById(id);
        if (user.isPresent()) {
            return new ResponseEntity<>(user.get(), HttpStatus.OK);
        } else {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", "User not found");
            errorResponse.put("message", "User with ID '" + id + "' not found");
            errorResponse.put("status", HttpStatus.NOT_FOUND.value());
            return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
        }
    }

    /**
     * البحث عن مستخدم بواسطة الإيميل
     * Find user by email
     * 
     * @param email عنوان البريد الإلكتروني
     * @return ResponseEntity<UserResponse> المستخدم أو 404
     * 
     * @apiNote GET /api/v1/users/email/{email}
     * @since 1.0
     */
    @GetMapping("/email/{email}")
    @Operation(
        summary = "البحث بواسطة الإيميل - Find by Email",
        description = "البحث عن مستخدم باستخدام البريد الإلكتروني - Find user using email address"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "تم العثور على المستخدم - User found",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
        ),
        @ApiResponse(
            responseCode = "404",
            description = "المستخدم غير موجود - User not found"
        )
    })
    public ResponseEntity<?> getUserByEmail(
            @Parameter(description = "البريد الإلكتروني للمستخدم - User email address", example = "user@example.com")
            @PathVariable String email) {
        Optional<UserResponse> user = userService.findByEmail(email);
        if (user.isPresent()) {
            return new ResponseEntity<>(user.get(), HttpStatus.OK);
        } else {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", "User not found");
            errorResponse.put("message", "User with email '" + email + "' not found");
            errorResponse.put("status", HttpStatus.NOT_FOUND.value());
            return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
        }
    }

    /**
     * تفعيل أو إلغاء تفعيل المستخدم
     * Activate or deactivate user
     * 
     * @param id معرف المستخدم
     * @param isActive حالة التفعيل المطلوبة
     * @return ResponseEntity<UserResponse> المستخدم المحدث أو رسالة خطأ
     * 
     * @apiNote PUT /api/v1/users/{id}/status?isActive=true
     * @since 1.0
     */
    @PutMapping("/{id}/status")
    @Operation(
        summary = "تحديث حالة المستخدم - Update User Status",
        description = "تفعيل أو إلغاء تفعيل حساب المستخدم - Activate or deactivate user account"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "تم تحديث الحالة بنجاح - Status updated successfully",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
        ),
        @ApiResponse(
            responseCode = "404",
            description = "المستخدم غير موجود - User not found"
        )
    })
    public ResponseEntity<?> updateUserStatus(
            @Parameter(description = "المعرف الفريد للمستخدم - User UUID")
            @PathVariable UUID id, 
            @Parameter(description = "حالة التفعيل المطلوبة - Desired activation status", example = "true")
            @RequestParam Boolean isActive) {
        try {
            UserResponse user = userService.updateUserStatus(id, isActive);
            return new ResponseEntity<>(user, HttpStatus.OK);
        } catch (IllegalArgumentException e) {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", "Update failed");
            errorResponse.put("message", e.getMessage());
            errorResponse.put("status", HttpStatus.NOT_FOUND.value());
            return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
        }
    }

    /**
     * تأكيد البريد الإلكتروني للمستخدم
     * Verify user's email address
     * 
     * @param id معرف المستخدم
     * @return ResponseEntity<UserResponse> المستخدم المحدث أو رسالة خطأ
     * 
     * @apiNote PUT /api/v1/users/{id}/verify
     * @since 1.0
     */
    @PutMapping("/{id}/verify")
    @Operation(
        summary = "تأكيد البريد الإلكتروني - Verify Email",
        description = "تأكيد البريد الإلكتروني للمستخدم - Verify user's email address"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "تم تأكيد البريد الإلكتروني بنجاح - Email verified successfully",
            content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
        ),
        @ApiResponse(
            responseCode = "404",
            description = "المستخدم غير موجود - User not found"
        )
    })
    public ResponseEntity<?> verifyUserEmail(
            @Parameter(description = "المعرف الفريد للمستخدم - User UUID")
            @PathVariable UUID id) {
        try {
            UserResponse user = userService.verifyUserEmail(id);
            return new ResponseEntity<>(user, HttpStatus.OK);
        } catch (IllegalArgumentException e) {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", "Verification failed");
            errorResponse.put("message", e.getMessage());
            errorResponse.put("status", HttpStatus.NOT_FOUND.value());
            return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
        }
    }

    /**
     * فحص صحة النظام
     * Health check endpoint
     * 
     * @return ResponseEntity<String> حالة النظام
     * 
     * @apiNote GET /api/v1/users/health
     * @since 1.0
     */
    @GetMapping("/health")
    @Operation(
        summary = "فحص صحة النظام - Health Check",
        description = "فحص حالة خدمة المستخدمين - Check user service health status"
    )
    @ApiResponse(
        responseCode = "200",
        description = "النظام يعمل بشكل طبيعي - System is running normally"
    )
    public ResponseEntity<Map<String, Object>> health() {
        Map<String, Object> healthResponse = new HashMap<>();
        healthResponse.put("status", "UP");
        healthResponse.put("service", "User Service");
        healthResponse.put("message", "User Service is running");
        healthResponse.put("timestamp", System.currentTimeMillis());
        return new ResponseEntity<>(healthResponse, HttpStatus.OK);
    }
}



/* ---- File: src/main/resources/application-dev.yml ---- */




/* ---- File: src/main/resources/application-prod.yml ---- */




/* ---- File: src/main/resources/application.properties ---- */

spring.application.name=Multi Store Backend



/* ---- File: src/main/resources/application.yml ---- */

# Application Configuration
spring:
  application:
    name: multi-store-backend
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres
    username: postgres.wkwcbdfllvkhotyjkose
    password: MAES@#2025#
    driver-class-name: org.postgresql.Driver
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  
  # Jackson Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false
    default-property-inclusion: non-null
  
  # Security Configuration
  security:
    user:
      name: admin
      password: admin123
      roles: ADMIN

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

# Swagger/OpenAPI Configuration
springdoc:
  api-docs:
    enabled: true
    path: /api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    try-it-out-enabled: true
    operations-sorter: method
    tags-sorter: alpha
    doc-expansion: none
    default-models-expand-depth: 1
    default-model-expand-depth: 1

# Logging Configuration
logging:
  level:
    com.ecommerce.multistore: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

# Management/Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# Rate Limiting Configuration
rate-limit:
  enabled: true
  requests: 100
  window-minutes: 1
  cleanup-interval: 300

# Cache Configuration
spring.cache:
  type: simple
  cache-names: users,brands,categories,products,orders



/* ---- File: src/main/resources/db/migration/V2__add_missing_indexes.sql ---- */




/* ---- File: src/main/resources/gradle.properties ---- */

# في مجلد المشروع الجذر
org.gradle.daemon=true
org.gradle.parallel=true
org.gradle.caching=true
org.gradle.configureondemand=true
org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
org.gradle.buildcache=true


