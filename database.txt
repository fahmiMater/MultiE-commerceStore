-- =====================================================
-- قاعدة بيانات المتجر الإلكتروني متعدد المجالات
-- PostgreSQL + Supabase Optimized - مع Display IDs
-- =====================================================

-- تفعيل الإضافات المطلوبة
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- =====================================================
-- 1. جدول المستخدمين (Users)
-- =====================================================
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20) UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    first_name_ar VARCHAR(100),
    last_name_ar VARCHAR(100),
    date_of_birth DATE,
    gender VARCHAR(10) CHECK (gender IN ('male', 'female', 'other')),
    profile_image TEXT,
    is_active BOOLEAN DEFAULT true,
    is_verified BOOLEAN DEFAULT false,
    email_verified_at TIMESTAMP WITH TIME ZONE,
    phone_verified_at TIMESTAMP WITH TIME ZONE,
    role VARCHAR(20) DEFAULT 'customer' CHECK (role IN ('customer', 'admin', 'super_admin', 'merchant')),
    preferences JSONB DEFAULT '{}',
    last_login_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_phone ON users(phone);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_active ON users(is_active);
CREATE INDEX idx_users_display_id ON users(display_id);

-- =====================================================
-- 2. جدول عناوين المستخدمين (User Addresses)
-- =====================================================
CREATE TABLE user_addresses (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(100) NOT NULL,
    title_ar VARCHAR(100),
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    address_line_1 VARCHAR(255) NOT NULL,
    address_line_2 VARCHAR(255),
    city VARCHAR(100) NOT NULL,
    city_ar VARCHAR(100),
    state VARCHAR(100),
    state_ar VARCHAR(100),
    postal_code VARCHAR(20),
    country VARCHAR(100) DEFAULT 'Yemen',
    country_ar VARCHAR(100) DEFAULT 'اليمن',
    latitude DECIMAL(10, 8),
    longitude DECIMAL(11, 8),
    is_default BOOLEAN DEFAULT false,
    address_type VARCHAR(20) DEFAULT 'home' CHECK (address_type IN ('home', 'work', 'other')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_user_addresses_user_id ON user_addresses(user_id);
CREATE INDEX idx_user_addresses_display_id ON user_addresses(display_id);

-- =====================================================
-- 3. جدول جلسات المستخدمين (User Sessions)
-- =====================================================
CREATE TABLE user_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    token_hash VARCHAR(255) NOT NULL,
    refresh_token_hash VARCHAR(255),
    device_info JSONB,
    ip_address INET,
    user_agent TEXT,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_used_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_user_sessions_user_id ON user_sessions(user_id);
CREATE INDEX idx_user_sessions_token ON user_sessions(token_hash);
CREATE INDEX idx_user_sessions_display_id ON user_sessions(display_id);

-- =====================================================
-- 4. جدول الفئات (Categories)
-- =====================================================
CREATE TABLE categories (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    name VARCHAR(255) NOT NULL,
    name_ar VARCHAR(255),
    slug VARCHAR(255) UNIQUE NOT NULL,
    description TEXT,
    description_ar TEXT,
    parent_id UUID REFERENCES categories(id) ON DELETE SET NULL,
    image_url TEXT,
    icon VARCHAR(100),
    sort_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_categories_parent_id ON categories(parent_id);
CREATE INDEX idx_categories_slug ON categories(slug);
CREATE INDEX idx_categories_active ON categories(is_active);
CREATE INDEX idx_categories_display_id ON categories(display_id);

-- =====================================================
-- 5. جدول العلامات التجارية (Brands)
-- =====================================================
CREATE TABLE brands (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    name VARCHAR(255) NOT NULL,
    name_ar VARCHAR(255),
    slug VARCHAR(255) UNIQUE NOT NULL,
    description TEXT,
    description_ar TEXT,
    logo_url TEXT,
    website_url TEXT,
    is_active BOOLEAN DEFAULT true,
    sort_order INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_brands_slug ON brands(slug);
CREATE INDEX idx_brands_active ON brands(is_active);
CREATE INDEX idx_brands_display_id ON brands(display_id);

-- =====================================================
-- 6. جدول المنتجات (Products)
-- =====================================================
CREATE TABLE products (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    name VARCHAR(255) NOT NULL,
    name_ar VARCHAR(255),
    slug VARCHAR(255) UNIQUE NOT NULL,
    description TEXT,
    description_ar TEXT,
    short_description TEXT,
    short_description_ar TEXT,
    sku VARCHAR(100) UNIQUE NOT NULL,
    barcode VARCHAR(100),
    category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
    brand_id UUID REFERENCES brands(id) ON DELETE SET NULL,
    price DECIMAL(10, 2) NOT NULL,
    compare_price DECIMAL(10, 2),
    cost_price DECIMAL(10, 2),
    weight DECIMAL(8, 3),
    stock_quantity INTEGER DEFAULT 0,
    min_stock_level INTEGER DEFAULT 5,
    track_inventory BOOLEAN DEFAULT true,
    is_active BOOLEAN DEFAULT true,
    is_featured BOOLEAN DEFAULT false,
    is_digital BOOLEAN DEFAULT false,
    requires_shipping BOOLEAN DEFAULT true,
    attributes JSONB DEFAULT '{}',
    tags TEXT[],
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_products_category_id ON products(category_id);
CREATE INDEX idx_products_brand_id ON products(brand_id);
CREATE INDEX idx_products_slug ON products(slug);
CREATE INDEX idx_products_sku ON products(sku);
CREATE INDEX idx_products_active ON products(is_active);
CREATE INDEX idx_products_featured ON products(is_featured);
CREATE INDEX idx_products_price ON products(price);
CREATE INDEX idx_products_display_id ON products(display_id);

-- =====================================================
-- 7. جدول صور المنتجات (Product Images)
-- =====================================================
CREATE TABLE product_images (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
    image_url TEXT NOT NULL,
    alt_text VARCHAR(255),
    alt_text_ar VARCHAR(255),
    sort_order INTEGER DEFAULT 0,
    is_primary BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_product_images_product_id ON product_images(product_id);
CREATE INDEX idx_product_images_display_id ON product_images(display_id);

-- =====================================================
-- 8. جدول سلة التسوق (Shopping Cart)
-- =====================================================
CREATE TABLE shopping_cart (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    session_id VARCHAR(255),
    product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL DEFAULT 1 CHECK (quantity > 0),
    price DECIMAL(10, 2) NOT NULL,
    attributes JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT cart_user_or_session CHECK (user_id IS NOT NULL OR session_id IS NOT NULL)
);

CREATE INDEX idx_shopping_cart_user_id ON shopping_cart(user_id);
CREATE INDEX idx_shopping_cart_session_id ON shopping_cart(session_id);
CREATE INDEX idx_shopping_cart_product_id ON shopping_cart(product_id);
CREATE INDEX idx_shopping_cart_display_id ON shopping_cart(display_id);

-- =====================================================
-- 9. جدول كوبونات الخصم (Coupons)
-- =====================================================
CREATE TABLE coupons (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    code VARCHAR(50) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    name_ar VARCHAR(255),
    description TEXT,
    description_ar TEXT,
    type VARCHAR(20) NOT NULL CHECK (type IN ('percentage', 'fixed_amount', 'free_shipping')),
    value DECIMAL(10, 2) NOT NULL,
    minimum_amount DECIMAL(10, 2) DEFAULT 0,
    maximum_discount DECIMAL(10, 2),
    usage_limit INTEGER,
    usage_limit_per_user INTEGER DEFAULT 1,
    used_count INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    starts_at TIMESTAMP WITH TIME ZONE,
    expires_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_coupons_code ON coupons(code);
CREATE INDEX idx_coupons_active ON coupons(is_active);
CREATE INDEX idx_coupons_display_id ON coupons(display_id);

-- =====================================================
-- 10. جدول الطلبات (Orders)
-- =====================================================
CREATE TABLE orders (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    order_number VARCHAR(50) UNIQUE NOT NULL,
    user_id UUID REFERENCES users(id) ON DELETE SET NULL,
    status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded')),
    payment_status VARCHAR(50) DEFAULT 'pending' CHECK (payment_status IN ('pending', 'paid', 'failed', 'refunded', 'partially_refunded')),
    customer_email VARCHAR(255) NOT NULL,
    customer_phone VARCHAR(20),
    customer_name VARCHAR(255) NOT NULL,
    shipping_address JSONB NOT NULL,
    billing_address JSONB,
    subtotal DECIMAL(10, 2) NOT NULL,
    tax_amount DECIMAL(10, 2) DEFAULT 0,
    shipping_amount DECIMAL(10, 2) DEFAULT 0,
    discount_amount DECIMAL(10, 2) DEFAULT 0,
    total_amount DECIMAL(10, 2) NOT NULL,
    shipping_method VARCHAR(100),
    tracking_number VARCHAR(100),
    shipped_at TIMESTAMP WITH TIME ZONE,
    delivered_at TIMESTAMP WITH TIME ZONE,
    notes TEXT,
    coupon_code VARCHAR(50),
    currency VARCHAR(3) DEFAULT 'YER',
    onex_quote_id VARCHAR(100),
    onex_invoice_id VARCHAR(100),
    onex_status VARCHAR(50),
    onex_synced_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_orders_user_id ON orders(user_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_payment_status ON orders(payment_status);
CREATE INDEX idx_orders_order_number ON orders(order_number);
CREATE INDEX idx_orders_created_at ON orders(created_at);
CREATE INDEX idx_orders_display_id ON orders(display_id);

-- =====================================================
-- 11. جدول عناصر الطلبات (Order Items)
-- =====================================================
CREATE TABLE order_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    order_id UUID NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    product_id UUID REFERENCES products(id) ON DELETE SET NULL,
    product_name VARCHAR(255) NOT NULL,
    product_name_ar VARCHAR(255),
    product_sku VARCHAR(100),
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    unit_price DECIMAL(10, 2) NOT NULL,
    total_price DECIMAL(10, 2) NOT NULL,
    attributes JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_order_items_order_id ON order_items(order_id);
CREATE INDEX idx_order_items_product_id ON order_items(product_id);
CREATE INDEX idx_order_items_display_id ON order_items(display_id);

-- =====================================================
-- 12. جدول المدفوعات (Payments)
-- =====================================================
CREATE TABLE payments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    order_id UUID NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    payment_method VARCHAR(50) NOT NULL CHECK (payment_method IN ('jeeb', 'flousi', 'mobile_money', 'cash_on_delivery', 'bank_transfer')),
    payment_gateway VARCHAR(50),
    transaction_id VARCHAR(255),
    gateway_transaction_id VARCHAR(255),
    amount DECIMAL(10, 2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'YER',
    status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed', 'cancelled', 'refunded')),
    gateway_response JSONB,
    failure_reason TEXT,
    processed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_payments_order_id ON payments(order_id);
CREATE INDEX idx_payments_status ON payments(status);
CREATE INDEX idx_payments_method ON payments(payment_method);
CREATE INDEX idx_payments_transaction_id ON payments(transaction_id);
CREATE INDEX idx_payments_display_id ON payments(display_id);

-- =====================================================
-- 13. جدول إعدادات النظام (System Settings)
-- =====================================================
CREATE TABLE system_settings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    key VARCHAR(255) UNIQUE NOT NULL,
    value JSONB,
    description TEXT,
    description_ar TEXT,
    type VARCHAR(50) DEFAULT 'string' CHECK (type IN ('string', 'number', 'boolean', 'json', 'array')),
    is_public BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_system_settings_key ON system_settings(key);
CREATE INDEX idx_system_settings_public ON system_settings(is_public);
CREATE INDEX idx_system_settings_display_id ON system_settings(display_id);

-- =====================================================
-- 14. جدول الإشعارات (Notifications)
-- =====================================================
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL CHECK (type IN ('order_update', 'payment_update', 'promotion', 'system', 'custom')),
    title VARCHAR(255) NOT NULL,
    title_ar VARCHAR(255),
    message TEXT NOT NULL,
    message_ar TEXT,
    data JSONB DEFAULT '{}',
    is_read BOOLEAN DEFAULT false,
    read_at TIMESTAMP WITH TIME ZONE,
    channel VARCHAR(50) DEFAULT 'in_app' CHECK (channel IN ('in_app', 'email', 'sms', 'push')),
    sent_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_notifications_user_id ON notifications(user_id);
CREATE INDEX idx_notifications_type ON notifications(type);
CREATE INDEX idx_notifications_read ON notifications(user_id, is_read);
CREATE INDEX idx_notifications_display_id ON notifications(display_id);

-- =====================================================
-- 15. جدول تتبع المخزون (Inventory Movements)
-- =====================================================
CREATE TABLE inventory_movements (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
    movement_type VARCHAR(50) NOT NULL CHECK (movement_type IN ('in', 'out', 'adjustment', 'reserved', 'released')),
    quantity INTEGER NOT NULL,
    reference_type VARCHAR(50),
    reference_id UUID,
    notes TEXT,
    created_by UUID REFERENCES users(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_inventory_movements_product_id ON inventory_movements(product_id);
CREATE INDEX idx_inventory_movements_type ON inventory_movements(movement_type);
CREATE INDEX idx_inventory_movements_created_at ON inventory_movements(created_at DESC);
CREATE INDEX idx_inventory_movements_display_id ON inventory_movements(display_id);

-- =====================================================
-- 16. جدول إعدادات المحافظ الإلكترونية (Wallet Settings)
-- =====================================================
CREATE TABLE wallet_settings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    wallet_type VARCHAR(50) NOT NULL CHECK (wallet_type IN ('jeeb', 'flousi', 'mobile_money')),
    is_active BOOLEAN DEFAULT true,
    api_endpoint TEXT,
    api_key TEXT,
    merchant_id VARCHAR(100),
    webhook_url TEXT,
    settings JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_wallet_settings_type ON wallet_settings(wallet_type);
CREATE INDEX idx_wallet_settings_active ON wallet_settings(is_active);
CREATE INDEX idx_wallet_settings_display_id ON wallet_settings(display_id);

-- =====================================================
-- 17. جدول معاملات المحافظ الإلكترونية (Wallet Transactions)
-- =====================================================
CREATE TABLE wallet_transactions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    payment_id UUID NOT NULL REFERENCES payments(id) ON DELETE CASCADE,
    wallet_type VARCHAR(50) NOT NULL,
    wallet_phone VARCHAR(20) NOT NULL,
    transaction_reference VARCHAR(255),
    wallet_transaction_id VARCHAR(255),
    amount DECIMAL(10, 2) NOT NULL,
    fees DECIMAL(10, 2) DEFAULT 0,
    status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed', 'cancelled')),
    request_payload JSONB,
    response_payload JSONB,
    error_message TEXT,
    processed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_wallet_transactions_payment_id ON wallet_transactions(payment_id);
CREATE INDEX idx_wallet_transactions_wallet_type ON wallet_transactions(wallet_type);
CREATE INDEX idx_wallet_transactions_status ON wallet_transactions(status);
CREATE INDEX idx_wallet_transactions_reference ON wallet_transactions(transaction_reference);
CREATE INDEX idx_wallet_transactions_display_id ON wallet_transactions(display_id);

-- =====================================================
-- 18. جدول تكامل OneX Pro (OneX Integration)
-- =====================================================
CREATE TABLE onex_integration (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    display_id VARCHAR(20) UNIQUE,
    order_id UUID NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    onex_entity_type VARCHAR(50) NOT NULL CHECK (onex_entity_type IN ('quote', 'invoice', 'payment')),
    onex_entity_id VARCHAR(100) NOT NULL,
    sync_status VARCHAR(50) DEFAULT 'pending' CHECK (sync_status IN ('pending', 'syncing', 'completed', 'failed')),
    sync_attempts INTEGER DEFAULT 0,
    last_sync_at TIMESTAMP WITH TIME ZONE,
    sync_error TEXT,
    onex_data JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_onex_integration_order_id ON onex_integration(order_id);
CREATE INDEX idx_onex_integration_entity ON onex_integration(onex_entity_type, onex_entity_id);
CREATE INDEX idx_onex_integration_status ON onex_integration(sync_status);
CREATE INDEX idx_onex_integration_display_id ON onex_integration(display_id);

-- =====================================================
-- TRIGGERS للتحديث التلقائي
-- =====================================================

-- دالة تحديث updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;

$$ language 'plpgsql';

-- تطبيق الـ trigger على الجداول المطلوبة
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_user_addresses_updated_at BEFORE UPDATE ON user_addresses FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_categories_updated_at BEFORE UPDATE ON categories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_brands_updated_at BEFORE UPDATE ON brands FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_shopping_cart_updated_at BEFORE UPDATE ON shopping_cart FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_coupons_updated_at BEFORE UPDATE ON coupons FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_payments_updated_at BEFORE UPDATE ON payments FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_system_settings_updated_at BEFORE UPDATE ON system_settings FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_wallet_settings_updated_at BEFORE UPDATE ON wallet_settings FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_wallet_transactions_updated_at BEFORE UPDATE ON wallet_transactions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_onex_integration_updated_at BEFORE UPDATE ON onex_integration FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- SEQUENCES & TRIGGERS لتوليد DISPLAY IDs
-- =====================================================

-- 1. Users
CREATE SEQUENCE IF NOT EXISTS user_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_user_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'USR-' || LPAD(NEXTVAL('user_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_user_display_id BEFORE INSERT ON users FOR EACH ROW EXECUTE FUNCTION generate_user_display_id();

-- 2. User Addresses
CREATE SEQUENCE IF NOT EXISTS user_address_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_user_address_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'ADR-' || LPAD(NEXTVAL('user_address_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_user_address_display_id BEFORE INSERT ON user_addresses FOR EACH ROW EXECUTE FUNCTION generate_user_address_display_id();

-- 3. User Sessions
CREATE SEQUENCE IF NOT EXISTS user_session_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_user_session_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'SES-' || LPAD(NEXTVAL('user_session_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_user_session_display_id BEFORE INSERT ON user_sessions FOR EACH ROW EXECUTE FUNCTION generate_user_session_display_id();

-- 4. Categories
CREATE SEQUENCE IF NOT EXISTS category_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_category_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'CAT-' || LPAD(NEXTVAL('category_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_category_display_id BEFORE INSERT ON categories FOR EACH ROW EXECUTE FUNCTION generate_category_display_id();

-- 5. Brands
CREATE SEQUENCE IF NOT EXISTS brand_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_brand_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'BRD-' || LPAD(NEXTVAL('brand_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_brand_display_id BEFORE INSERT ON brands FOR EACH ROW EXECUTE FUNCTION generate_brand_display_id();

-- 6. Products
CREATE SEQUENCE IF NOT EXISTS product_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_product_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'PRD-' || LPAD(NEXTVAL('product_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_product_display_id BEFORE INSERT ON products FOR EACH ROW EXECUTE FUNCTION generate_product_display_id();

-- 7. Product Images
CREATE SEQUENCE IF NOT EXISTS product_image_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_product_image_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'IMG-' || LPAD(NEXTVAL('product_image_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_product_image_display_id BEFORE INSERT ON product_images FOR EACH ROW EXECUTE FUNCTION generate_product_image_display_id();

-- 8. Shopping Cart
CREATE SEQUENCE IF NOT EXISTS cart_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_cart_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'CRT-' || LPAD(NEXTVAL('cart_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_cart_display_id BEFORE INSERT ON shopping_cart FOR EACH ROW EXECUTE FUNCTION generate_cart_display_id();

-- 9. Coupons
CREATE SEQUENCE IF NOT EXISTS coupon_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_coupon_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'CPN-' || LPAD(NEXTVAL('coupon_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_coupon_display_id BEFORE INSERT ON coupons FOR EACH ROW EXECUTE FUNCTION generate_coupon_display_id();

-- 10. Orders
CREATE SEQUENCE IF NOT EXISTS order_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_order_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'ORD-' || LPAD(NEXTVAL('order_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_order_display_id BEFORE INSERT ON orders FOR EACH ROW EXECUTE FUNCTION generate_order_display_id();

-- 11. Order Items
CREATE SEQUENCE IF NOT EXISTS order_item_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_order_item_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'ORI-' || LPAD(NEXTVAL('order_item_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_order_item_display_id BEFORE INSERT ON order_items FOR EACH ROW EXECUTE FUNCTION generate_order_item_display_id();

-- 12. Payments
CREATE SEQUENCE IF NOT EXISTS payment_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_payment_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'PAY-' || LPAD(NEXTVAL('payment_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_generate_payment_display_id BEFORE INSERT ON payments FOR EACH ROW EXECUTE FUNCTION generate_payment_display_id();

-- 13. System Settings
CREATE SEQUENCE IF NOT EXISTS system_setting_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_system_setting_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'SET-' || LPAD(NEXTVAL('system_setting_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_system_setting_display_id BEFORE INSERT ON system_settings FOR EACH ROW EXECUTE FUNCTION generate_system_setting_display_id();

-- 14. Notifications
CREATE SEQUENCE IF NOT EXISTS notification_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_notification_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'NOT-' || LPAD(NEXTVAL('notification_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_notification_display_id BEFORE INSERT ON notifications FOR EACH ROW EXECUTE FUNCTION generate_notification_display_id();

-- 15. Inventory Movements
CREATE SEQUENCE IF NOT EXISTS inventory_movement_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_inventory_movement_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'INV-' || LPAD(NEXTVAL('inventory_movement_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_inventory_movement_display_id BEFORE INSERT ON inventory_movements FOR EACH ROW EXECUTE FUNCTION generate_inventory_movement_display_id();

-- 16. Wallet Settings
CREATE SEQUENCE IF NOT EXISTS wallet_setting_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_wallet_setting_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'WST-' || LPAD(NEXTVAL('wallet_setting_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_wallet_setting_display_id BEFORE INSERT ON wallet_settings FOR EACH ROW EXECUTE FUNCTION generate_wallet_setting_display_id();

-- 17. Wallet Transactions
CREATE SEQUENCE IF NOT EXISTS wallet_transaction_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_wallet_transaction_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'WTX-' || LPAD(NEXTVAL('wallet_transaction_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_wallet_transaction_display_id BEFORE INSERT ON wallet_transactions FOR EACH ROW EXECUTE FUNCTION generate_wallet_transaction_display_id();

-- 18. OneX Integration
CREATE SEQUENCE IF NOT EXISTS onex_integration_display_seq START 1;
CREATE OR REPLACE FUNCTION generate_onex_integration_display_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.display_id IS NULL THEN
        NEW.display_id := 'ONX-' || LPAD(NEXTVAL('onex_integration_display_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_generate_onex_integration_display_id BEFORE INSERT ON onex_integration FOR EACH ROW EXECUTE FUNCTION generate_onex_integration_display_id();

-- =====================================================
-- دالة توليد رقم الطلب (Order Number)
-- =====================================================
CREATE OR REPLACE FUNCTION generate_order_number()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.order_number IS NULL OR NEW.order_number = '' THEN
        NEW.order_number := 'ORD-' || TO_CHAR(NOW(), 'YYYYMMDD') || '-' || LPAD(NEXTVAL('order_number_seq')::TEXT, 6, '0');
    END IF;
    RETURN NEW;
END;

$$ language 'plpgsql';

-- إنشاء sequence لأرقام الطلبات
CREATE SEQUENCE IF NOT EXISTS order_number_seq START 1;

-- تطبيق trigger على جدول الطلبات
CREATE TRIGGER generate_order_number_trigger BEFORE INSERT ON orders FOR EACH ROW EXECUTE FUNCTION generate_order_number();

-- =====================================================
-- إدراج البيانات الأساسية
-- =====================================================

-- إعدادات النظام الأساسية
INSERT INTO system_settings (key, value, description, description_ar, type, is_public) VALUES
('site_name', '"متجر إلكتروني متعدد المجالات"', 'Site name', 'اسم الموقع', 'string', true),
('site_description', '"منصة تجارة إلكترونية متطورة"', 'Site description', 'وصف الموقع', 'string', true),
('default_currency', '"YER"', 'Default currency', 'العملة الافتراضية', 'string', true),
('tax_rate', '0.0', 'Default tax rate', 'معدل الضريبة الافتراضي', 'number', true),
('free_shipping_threshold', '50000', 'Free shipping threshold in YER', 'حد الشحن المجاني بالريال اليمني', 'number', true),
('payment_methods', '["jeeb", "flousi", "mobile_money", "cash_on_delivery"]', 'Available payment methods', 'طرق الدفع المتاحة', 'json', true),
('supported_languages', '["ar", "en"]', 'Supported languages', 'اللغات المدعومة', 'json', true),
('default_language', '"ar"', 'Default language', 'اللغة الافتراضية', 'string', true),
('default_shipping_cost', '5000', 'Default shipping cost in YER', 'تكلفة الشحن الافتراضية بالريال اليمني', 'number', true),
('max_cart_items', '50', 'Maximum items in cart', 'الحد الأقصى للعناصر في السلة', 'number', true),
('onex_pro_enabled', 'true', 'Enable OneX Pro integration', 'تفعيل تكامل OneX Pro', 'boolean', false),
('onex_pro_api_url', '"https://api.onexpro.com/v1/"', 'OneX Pro API URL', 'رابط API لـ OneX Pro', 'string', false);

-- فئات أساسية
INSERT INTO categories (name, name_ar, slug, description, description_ar, is_active) VALUES
('Electronics', 'إلكترونيات', 'electronics', 'Electronic devices and accessories', 'الأجهزة الإلكترونية والإكسسوارات', true),
('Watches', 'ساعات', 'watches', 'Wrist watches and accessories', 'ساعات اليد والإكسسوارات', true),
('Clothing', 'ملابس', 'clothing', 'Men and women clothing', 'ملابس رجالية ونسائية', true),
('Pharmacy', 'صيدلية', 'pharmacy', 'Medicines and health products', 'الأدوية والمنتجات الصحية', true);

-- علامات تجارية أساسية
INSERT INTO brands (name, name_ar, slug, description, description_ar, is_active) VALUES
('Generic', 'عام', 'generic', 'Generic brand for unbranded products', 'علامة تجارية عامة للمنتجات غير المصنفة', true),
('Local Brand', 'علامة محلية', 'local-brand', 'Local Yemeni brand', 'علامة تجارية يمنية محلية', true);

-- إعدادات المحافظ الإلكترونية اليمنية
INSERT INTO wallet_settings (wallet_type, is_active, api_endpoint, settings) VALUES
('jeeb', true, 'https://api.jeeb.ly/v1/', '{"currency": "YER", "timeout": 30}'),
('flousi', true, 'https://api.flousi.com/v1/', '{"currency": "YER", "timeout": 30}'),
('mobile_money', true, 'https://api.mobilemoney.ye/v1/', '{"currency": "YER", "timeout": 30}');

-- إنشاء مستخدم إداري افتراضي
INSERT INTO users (
    email, 
    password_hash, 
    first_name, 
    last_name, 
    first_name_ar, 
    last_name_ar, 
    role, 
    is_active, 
    is_verified, 
    email_verified_at
) VALUES (
    'admin@example.com',
    crypt('admin123', gen_salt('bf')),
    'Admin',
    'User',
    'المدير',
    'العام',
    'super_admin',
    true,
    true,
    NOW()
);

-- إنشاء منتج تجريبي
INSERT INTO products (
    name,
    name_ar,
    slug,
    description,
    description_ar,
    short_description,
    short_description_ar,
    sku,
    category_id,
    brand_id,
    price,
    compare_price,
    stock_quantity,
    is_active,
    is_featured,
    attributes,
    tags
) VALUES (
    'Smart Watch Pro',
    'ساعة ذكية برو',
    'smart-watch-pro',
    'Advanced smartwatch with health monitoring features',
    'ساعة ذكية متقدمة مع خصائص مراقبة الصحة',
    'Premium smartwatch for active lifestyle',
    'ساعة ذكية فاخرة لنمط حياة نشط',
    'SW-PRO-001',
    (SELECT id FROM categories WHERE slug = 'watches' LIMIT 1),
    (SELECT id FROM brands WHERE slug = 'generic' LIMIT 1),
    75000.00,
    85000.00,
    50,
    true,
    true,
    '{"color": "black", "size": "42mm", "material": "aluminum"}',
    ARRAY['smartwatch', 'health', 'fitness', 'technology']
);

-- =====================================================
-- إحصائيات النظام
-- =====================================================
SELECT 'قاعدة البيانات جاهزة للاستخدام مع Display IDs!' as message;
SELECT 'Database ready with Display IDs for all tables!' as message_en;
SELECT COUNT(*) as total_tables FROM information_schema.tables WHERE table_schema = 'public';
SELECT COUNT(*) as total_sequences FROM information_schema.sequences WHERE sequence_schema = 'public';
SELECT COUNT(*) as total_triggers FROM information_schema.triggers WHERE trigger_schema = 'public';

-- =====================================================
-- تجريب Display IDs
-- =====================================================
SELECT 'عرض البيانات التجريبية:' as test_data;
SELECT display_id, email, role FROM users WHERE email = 'admin@example.com';
SELECT display_id, name, name_ar FROM categories WHERE is_active = true;
SELECT display_id, name, name_ar FROM brands WHERE is_active = true;
SELECT display_id, name, name_ar, sku FROM products WHERE is_active = true;